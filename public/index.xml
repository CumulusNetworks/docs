<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cumulus Networks Documentation Home on Cumulus Networks Documentation</title>
    <link>http://example.org/</link>
    <description>Recent content in Cumulus Networks Documentation Home on Cumulus Networks Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Directory Structure</title>
      <link>http://example.org/Writing_Guide/Hugo_Directory_Structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Writing_Guide/Hugo_Directory_Structure/</guid>
      <description>/content  This directory contains all of the sections and page resources built into the main site. (.md files, images, etc.) Itâ€™s arrangement determines the structure and hierarchy of the final site. More on this folder later  /archetypes  Contains template files for new content (.md files) Builds .md file structure by calling hugo new Populates and adds default front matter  /layouts  Holds go-html templates (.html files) that build pages from /content folder Hugo will search for templates in this folder before looking in /themes  /assets  Contains .</description>
    </item>
    
    <item>
      <title>Markdown Guide</title>
      <link>http://example.org/Writing_Guide/Markdown_Guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Writing_Guide/Markdown_Guide/</guid>
      <description>Second Level Header Third Level Header Fourth Level Header Fifth Level Header The template adds the title in a level-one header by default, start all content with level two headers.
Numbered and Bulleted Lists  The - character signifies a bulleted list Round Bullets are enabled by default The * character may also be used, we will use - by default  Nested lists are supported They will render with a,b,c Only second level nesting currently supported As in paragraphs, you can continue to add text onto the next line in markdown  A new line followed by a - signifies a new list item   Numbered lists are supported as well Very simple and self explanatory  Nested lists also supported Will display as 1,2,3,  Nested ul (bulleted list) will display differently  Bullets Are Displayed   Inline Styling Use two asterisks to bold any text</description>
    </item>
    
    <item>
      <title>Accessing the Console</title>
      <link>http://example.org/Chassis/Accessing_the_Console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Chassis/Accessing_the_Console/</guid>
      <description>You access the console slightly differently, depending upon whether your chassis is a Backpack or the CX-10256-S/OMP-800.
Accessing the Console on a Backpack Chassis Every CPU in the chassis has its own console. However, for design simplicity, console access is multiplexed, so the only console ports are on the chassis management modules (CMMs) and system controller modules (SCMs).
Accessing a Console through a CMM Each CMM has an RJ45 port for console access.</description>
    </item>
    
    <item>
      <title>Quick Start Guide</title>
      <link>http://example.org/version2/cumulus-linux-35/Quick_Start_Guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Quick_Start_Guide/</guid>
      <description>This quick start guide provides an end-to-end setup process for installing and running Cumulus Linux, as well as a collection of example commands for getting started once installation is complete.
Prior intermediate Linux knowledge is assumed for this guide. You should be familiar with basic text editing, Unix file permissions, and process monitoring. A variety of text editors are pre-installed, including vi and nano.
You must have access to a Linux or UNIX shell.</description>
    </item>
    
    <item>
      <title>What&#39;s New in Cumulus Linux 3.0.1</title>
      <link>http://example.org/version/Cumulus_Linux_301/Cumulus_Linux_301/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Cumulus_Linux_301/</guid>
      <description>Cumulus Linux 3.0.1 includes bug fixes only.
Cumulus Linux 3.0 has a host of new features and capabilities. In addition to this chapter, please read the release notes to learn about known issues with this release.
Cumulus Linux 3.0 includes these new features and platforms:
 Debian Jessie (upgraded from Debian Wheezy)
 4.1 kernel (upgraded from 3.2)
 Debian&amp;rsquo;s systemctl and systemd replace the service command for administering services; they also replace jdoo for monitoring</description>
    </item>
    
    <item>
      <title>Fabric Port, Line Card and Switch Port Interfaces</title>
      <link>http://example.org/Chassis/Fabric_Port_Line_Card_and_Switch_Port_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Chassis/Fabric_Port_Line_Card_and_Switch_Port_Interfaces/</guid>
      <description>Each line card in the chassis contains 64 100G ports, broken down into 32 switch ports, which connect to an external network, and 32 fabric ports, which connect to the fabric cards. Because each line card has two Tomahawk ASICs, each line card actually is two switches. On the Backpack chassis, one ASIC is on the left side of the line card and one is on the right side; each half of the line card has half of the switch ports and half of the fabric ports.</description>
    </item>
    
    <item>
      <title>Quick Start Guide</title>
      <link>http://example.org/version/Cumulus_Linux_301/Cumulus_Linux_301/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Cumulus_Linux_301/</guid>
      <description>This chapter helps you get up and running with Cumulus Linux quickly and easily.
What&amp;rsquo;s New in Cumulus Linux 3.0.1 Cumulus Linux 3.0.1 contains bug fixes only. The release notes contain information about the release as well as the fixed and known issues.
Open Source Contributions Cumulus Networks has forked various software projects, like CFEngine, Netdev and some Puppet Labs packages in order to implement various Cumulus Linux features. The forked code resides in the Cumulus Networks GitHub repository.</description>
    </item>
    
    <item>
      <title>Explanation of Shortcodes</title>
      <link>http://example.org/Writing_Guide/Explanation_Of_Shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Writing_Guide/Explanation_Of_Shortcodes/</guid>
      <description>Hugo Shortcodes Markdown is designed for speed and simplicity, therefore limited in authoring and customizing rendered content. Rather than insert raw HTML into markdown, Hugo provides Shortcodes, predefined templates callable from markdown content.
Hugo provides some built-in shortcodes, for some standard use cases. The Hugo documentation for built-in shortcodes is located here Included in this theme is a set of custom shortcodes, built for documentation. Use of these shortcodes are explained below</description>
    </item>
    
    <item>
      <title>Adding New Content</title>
      <link>http://example.org/Writing_Guide/Adding_New_Content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Writing_Guide/Adding_New_Content/</guid>
      <description>After you have installed hugo, cloned the github repository, and run the local server, it is now time to add new content to the Docs site. First, ctrl-c to quit the docs server in your terminal window.
Adding New Pages New pages are added in Hugo using archetypes, .md templates which contain the front matter variables and defaut values.
To create a new Cumulus Linux Page &amp;ldquo;test_post.md&amp;rdquo; run hugo new Cumulus_Linux/test_post.</description>
    </item>
    
    <item>
      <title>Chassis Default Configurations</title>
      <link>http://example.org/Chassis/Chassis_Default_Configurations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Chassis/Chassis_Default_Configurations/</guid>
      <description>A number of configuration files are automatically applied to all the nodes in the chassis the first time you boot it after installing Cumulus Linux on the nodes. These following actions are also performed:
 Enable Zebra and bgpd for FRR in the /etc/frr/daemons file.
 Create the default FRR configuration in the /etc/frr/frr.conf file; iBGP is used. The default configuration uses the ASN 4242424242 to make it easy to recognize.</description>
    </item>
    
    <item>
      <title>Monitoring and Troubleshooting a Chassis</title>
      <link>http://example.org/Chassis/Monitoring_and_Troubleshooting_a_Chassis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Chassis/Monitoring_and_Troubleshooting_a_Chassis/</guid>
      <description>Typically you use standard methods to monitor and troubleshoot the chassis. However, some commands work a little differently and there are some chassis-specific commands you can utilize. Those differences are discussed in this chapter.
Generating the cl-support Script If you&amp;rsquo;re submitting a ticket to the Cumulus Networks support team for an issue with the chassis, you can generate the cl-support script for a specific node in the chassis by specifying the IPv6 address of the node in the cl-chassis command:</description>
    </item>
    
    <item>
      <title>Chassis-specific Commands</title>
      <link>http://example.org/Chassis/Chassis-specific_Commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Chassis/Chassis-specific_Commands/</guid>
      <description>In general, you use the same Cumulus Linux or Debian Linux commands on the chassis that you would use on any other Cumulus Linux switch. However, there is a new suite of commands called cl-chassis. In addition, SSH works a little differently within a chassis.
cl-chassis Commands Cumulus Linux has a number of chassis-specific commands that can execute against one or all cards in the chassis. The cl-chassis command provides options for:</description>
    </item>
    
    <item>
      <title>CLI Preface</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/CLI_Preface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/CLI_Preface/</guid>
      <description>A variety of resources are available for you to become familiar with Cumulus NetQ and to take advantage of its monitoring and analytic capabilities. These resources are identified here along with information about how the content is presented.
What&amp;rsquo;s New in Cumulus NetQ 2.1 Cumulus NetQ has been reinvented to scale with the fast adoption rate of open networks and rapid network growth. In addition to the real-time data collection and fabric-wide performance analysis that are already supported in Cumulus NetQ 1.</description>
    </item>
    
    <item>
      <title>Cumulus Linux Index</title>
      <link>http://example.org/version/Cumulus_Linux_301/Cumulus_Linux_301/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Cumulus_Linux_301/</guid>
      <description>A
 aaa
 abrs
 abrs_stub_areas
 abrs_summary_lsa
 access_control_lists
 access_ports
 acl_policy_files
 acls
 active-active
 active_listener_ports
 addressing_interfaces
 algorithmic_longest_prefix_match
 alpm
 alpm_route_entries
 aoc_cables
 application_daemons
 apt
 apt-get
 area_border_routers
 arp_requests
 as_path
 asn
 authentication
 auto-negotiation
 autonomous_system_number
 autoprovision
  B
 bestpath
 bfd
 bgp
 bidirectional_forwarding_detection
 bonds
 boot_recovery
 border_gateway_protocol</description>
    </item>
    
    <item>
      <title>Cumulus Linux Index</title>
      <link>http://example.org/version2/cumulus-linux-35/Cumulus_Linux_Index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Cumulus_Linux_Index/</guid>
      <description>A
 aaa
 abrs
 abrs_stub_areas
 abrs_summary_lsa
 access_control_lists
 access_ports
 acl_policy_files
 acls
 active-active
 active_listener_ports
 addressing_interfaces
 algorithmic_longest_prefix_match
 alpm
 alpm_route_entries
 anycast
 aoc_cables
 api
 application_daemons
 apt
 apt-get
 area_border_routers
 arp_requests
 as_path
 asic
 asn
 authentication
 auto-negotiation
 autonomous_system_number
 autoprovision
  B
 bestpath
 bfd
 bgp
 bidirectional_forwarding_detection</description>
    </item>
    
    <item>
      <title>NetQ Command Line Overview</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/NetQ_Command_Line_Overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/NetQ_Command_Line_Overview/</guid>
      <description>The NetQ CLI provides access to all of the network state and event information collected by the NetQ Agents. It behaves the same way most CLIs behave, with groups of commands used to display related information, the ability to use TAB completion when entering commands, and to get help for given commands and options. The commands are grouped into four categories: check and show, agent and notifier, trace, and resolve.</description>
    </item>
    
    <item>
      <title>Monitor Overall Network Health</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Overall_Network_Health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Overall_Network_Health/</guid>
      <description>NetQ provides the information you need to monitor the health of your network fabric, devices, and interfaces. You are able to easily validate the operation and view the configuration across the entire network from switches to hosts to containers. For example, you can monitor the operation of routing protocols and virtual network configurations, the status of NetQ Agents and hardware components, and the operation and efficiency of interfaces. When issues are present, NetQ makes it easy to identify and resolve them.</description>
    </item>
    
    <item>
      <title>Monitor Switch Hardware and Software</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Switch_Hardware_and_Software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Switch_Hardware_and_Software/</guid>
      <description>With NetQ, a network administrator can monitor both the switch hardware and software components for misconfigurations. NetQ helps answer questions such as:
 What switches do I have in the network?
 What hardware and software are installed on my switches?
 Are all switches licensed correctly?
 Do all switches have NetQ agents running?
  NetQ uses LLDP (Link Layer Discovery Protocol) to collect port information. NetQ can also identify peer ports connected to DACs ( Direct Attached Cables) and AOCs (Active Optical Cables) without using LLDP, even if the link is not UP.</description>
    </item>
    
    <item>
      <title>Monitor Physical Layer Components</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Physical_Layer_Components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Physical_Layer_Components/</guid>
      <description>With NetQ, a network administrator can monitor OSI Layer 1 physical components on network devices, including interfaces, ports, links, and peers. NetQ provides the ability to:
 Manage physical inventory: view the performance and status of various components of a switch or host server
 Validate configurations: verify the configuration of network peers and ports
  It helps answer questions such as:
 Are any individual or bonded links down?</description>
    </item>
    
    <item>
      <title>Monitor Data Link Layer Devices and Protocols</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Data_Link_Layer_Devices_and_Protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Data_Link_Layer_Devices_and_Protocols/</guid>
      <description>With NetQ, a network administrator can monitor OSI Layer 2 devices and protocols, including switches, bridges, link control, and physical media access. Keeping track of the various data link layer devices in your network ensures consistent and error-free communications between devices. NetQ provides the ability to:
 Monitor and validate device and protocol configurations
 View available communication paths between devices
  It helps answer questions such as:</description>
    </item>
    
    <item>
      <title>Managing Cumulus Linux Disk Images</title>
      <link>http://example.org/Cumulus_Linux/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</guid>
      <description>The Cumulus Linux operating system resides on a switch as a disk image. This section discusses how to manage the disk image.
For information on installing a new Cumulus Linux disk image, refer to Installing a New Cumulus Linux Image. For information on upgrading Cumulus Linux, refer to Upgrading Cumulus Linux.
Determine the Switch Platform To determine if your switch is on an x86 or ARM platform, run the uname -m command.</description>
    </item>
    
    <item>
      <title>Managing Cumulus Linux Disk Images</title>
      <link>http://example.org/version/Cumulus_Linux_35/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</guid>
      <description>The Cumulus Linux operating system resides on a switch as a disk image. This section discusses how to manage the image, including installation and upgrading.
Installing a New Cumulus Linux Image For details, read the chapter, Installing a New Cumulus Linux Image.
Upgrading Cumulus Linux There are two ways you can upgrade Cumulus Linux:
 Upgrading only the changed packages, using apt-get update and apt-get upgrade. This is the preferred method.</description>
    </item>
    
    <item>
      <title>Managing Cumulus Linux Disk Images</title>
      <link>http://example.org/version/Cumulus_Linux_36/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</guid>
      <description>The Cumulus Linux operating system resides on a switch as a disk image. This section discusses how to manage the image, and includes installation and upgrade information.
Installing a New Cumulus Linux Image For details, read the chapter, Installing a New Cumulus Linux Image.
Upgrading Cumulus Linux There are two ways you can upgrade Cumulus Linux:
 Upgrade only the changed packages using apt-get update and apt-get upgrade. This is the preferred method.</description>
    </item>
    
    <item>
      <title>Managing Cumulus Linux Disk Images</title>
      <link>http://example.org/version2/cumulus-linux-35/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Installation_Management/Managing_Cumulus_Linux_Disk_Images/</guid>
      <description>The Cumulus Linux operating system resides on a switch as a disk image. This section discusses how to manage the image, including installation and upgrading.
Installing a New Cumulus Linux Image For details, read the chapter, Installing a New Cumulus Linux Image.
Upgrading Cumulus Linux There are two ways you can upgrade Cumulus Linux:
 Upgrading only the changed packages, using apt-get update and apt-get upgrade. This is the preferred method.</description>
    </item>
    
    <item>
      <title>Monitor Network Layer Protocols</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Network_Layer_Protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Network_Layer_Protocols/</guid>
      <description>With NetQ, a network administrator can monitor OSI Layer 3 network protocols running on Linux-based hosts, including IP (Internet Protocol), BGP (Border Gateway Protocol) and OSPF (Open Shortest Path First). NetQ provides the ability to:
 Validate protocol configurations
 Validate layer 3 communication paths
  It helps answer questions such as:
 Who are the IP neighbors for a switch?
 How many IPv4 and IPv6 addresses am I using?</description>
    </item>
    
    <item>
      <title>Adding and Updating Packages</title>
      <link>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/</guid>
      <description>You use the Advanced Packaging Tool (APT) to manage additional applications (in the form of packages) and to install the latest updates.
Commands  apt-get
 apt-cache
 dpkg
  Updating the Package Cache To work properly, APT relies on a local cache of the available packages. You must populate the cache initially, and then periodically update it with apt-get update:
cumulus@switch:~$ sudo apt-get update Get:1 http://repo3.cumulusnetworks.com CumulusLinux-3 InRelease [7,624 B] Get:2 http://repo3.</description>
    </item>
    
    <item>
      <title>Installing a New Cumulus Linux Image</title>
      <link>http://example.org/Cumulus_Linux/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</guid>
      <description>This topic discusses how to install a new Cumulus Linux disk image using ONIE, an open source project (equivalent to PXE on servers) that enables the installation of network operating systems (NOS) on bare metal switches.
Before you install Cumulus Linux, the switch can be in two different states:
 No image is installed on the switch (the switch is only running ONIE).
 Cumulus Linux is already installed on the switch but you want to use ONIE to reinstall Cumulus Linux or upgrade to a newer version.</description>
    </item>
    
    <item>
      <title>Installing a New Cumulus Linux Image</title>
      <link>http://example.org/version/Cumulus_Linux_35/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</guid>
      <description>Before you install Cumulus Linux, the switch can be in two different states:
 The switch has no image on it (so the switch is only running ONIE) or you desire or require a clean installation. In this case, you can install Cumulus Linux in one of the following ways, using:
 DHCP/a web server with DHCP options
 DHCP/a web server without DHCP options
 A web server with no DHCP</description>
    </item>
    
    <item>
      <title>Installing a New Cumulus Linux Image</title>
      <link>http://example.org/version/Cumulus_Linux_36/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</guid>
      <description>Before you install Cumulus Linux, the switch can be in two different states:
 No image is installed on the switch (the switch is only running ONIE) or you need to perform a clean installation. In this case, you can install Cumulus Linux in one of the following ways, using:
 DHCP/a web server with DHCP options
 DHCP/a web server without DHCP options
 A web server with no DHCP</description>
    </item>
    
    <item>
      <title>Installing a New Cumulus Linux Image</title>
      <link>http://example.org/version2/cumulus-linux-35/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Installation_Management/Installing_a_New_Cumulus_Linux_Image/</guid>
      <description>Before you install Cumulus Linux, the switch can be in two different states:
 The switch has no image on it (so the switch is only running ONIE) or you desire or require a clean installation. In this case, you can install Cumulus Linux in one of the following ways, using:
 DHCP/a web server with DHCP options
 DHCP/a web server without DHCP options
 A web server with no DHCP</description>
    </item>
    
    <item>
      <title>Monitor Virtual Network Overlays</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Virtual_Network_Overlays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Virtual_Network_Overlays/</guid>
      <description>With NetQ, a network administrator can monitor virtual network components in the data center, including VXLAN, EVPN, and LNV software constructs. NetQ provides the ability to:
 Manage virtual constructs: view the performance and status of VXLANs, EVPN, and LNV
 Validate overlay communication paths
  It helps answer questions such as:
 Is my overlay configured and operating correctly?
 Is my control plane configured correctly?
 Can device A reach device B?</description>
    </item>
    
    <item>
      <title>Monitor Linux Hosts</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Linux_Hosts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Linux_Hosts/</guid>
      <description>Running NetQ on Linux hosts provides unprecedented network visibility, giving the network operator a complete view of the entire infastrucutreâ€™s network connectivity instead of just from the network devices.
The NetQ Agent is supported on the following Linux hosts:
 CentOS 7
 Red Hat Enterprise Linux 7.1
 Ubuntu 16.04
  You need to install the OS-specific NetQ metapack on every host you want to monitor with NetQ.</description>
    </item>
    
    <item>
      <title>Upgrading Cumulus Linux</title>
      <link>http://example.org/Cumulus_Linux/Installation_Management/Upgrading_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Installation_Management/Upgrading_Cumulus_Linux/</guid>
      <description>This topic describes how to upgrade Cumulus Linux on your switches to a more recent release.
Cumulus Networks recommends that you deploy, provision, configure, and upgrade switches using automation, even with small networks or test labs. During the upgrade process, you can quickly upgrade dozens of devices in a repeatable manner. Using tools like Ansible, Chef, or Puppet for configuration management greatly increases the speed and accuracy of the next major upgrade; these tools also enable the quick swap of failed switch hardware.</description>
    </item>
    
    <item>
      <title>Upgrading Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_35/Installation_Management/Upgrading_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Installation_Management/Upgrading_Cumulus_Linux/</guid>
      <description>Cumulus Networks software melds the Linux host world with the networking devices world. Each world comes with its own paradigm on how to upgrade software. Before we discuss the various ways to upgrade Cumulus Linux switches, let&amp;rsquo;s review the general considerations and strategies used to upgrade network devices and Linux hosts.
Upgrades: Comparing the Network Device Worldview vs. the Linux Host Worldview Manual vs. Automated Configuration Historically, network devices were configured in place, and most network devices required customized configurations, which led predominantly to configuring the hardware manually.</description>
    </item>
    
    <item>
      <title>Upgrading Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_36/Installation_Management/Upgrading_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Installation_Management/Upgrading_Cumulus_Linux/</guid>
      <description>Cumulus Networks software melds the Linux host world with the networking devices world. Each world comes with its own paradigm on how to upgrade software. Before we discuss the various ways to upgrade Cumulus Linux switches, let&amp;rsquo;s review the general considerations and strategies used to upgrade network devices and Linux hosts.
Upgrades: Comparing the Network Device Worldview and the Linux Host Worldview Manual and Automated Configuration Historically, network devices were configured in place, and most network devices required customized configurations, which led predominantly to configuring the hardware manually.</description>
    </item>
    
    <item>
      <title>Upgrading Cumulus Linux</title>
      <link>http://example.org/version2/cumulus-linux-35/Installation_Management/Upgrading_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Installation_Management/Upgrading_Cumulus_Linux/</guid>
      <description>Cumulus Networks software melds the Linux host world with the networking devices world. Each world comes with its own paradigm on how to upgrade software. Before we discuss the various ways to upgrade Cumulus Linux switches, let&amp;rsquo;s review the general considerations and strategies used to upgrade network devices and Linux hosts.
Upgrades: Comparing the Network Device Worldview vs. the Linux Host Worldview Manual vs. Automated Configuration Historically, network devices were configured in place, and most network devices required customized configurations, which led predominantly to configuring the hardware manually.</description>
    </item>
    
    <item>
      <title>Zero Touch Provisioning - ZTP</title>
      <link>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/</guid>
      <description>Zero touch provisioning (ZTP) enables network devices to be quickly deployed in large-scale environments. Data center engineers only need to rack and stack the switch, install Cumulus Linux via ONIE, then connect the switch to the management network â€” or alternatively, insert a USB stick and boot the switch. From here, the provisioning process can start automatically and deploy a configuration.
The provisioning framework allows for a one-time, user-provided script to be executed.</description>
    </item>
    
    <item>
      <title>Monitor Container Environments</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Container_Environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Monitor_Container_Environments/</guid>
      <description>The NetQ Agent monitors container environments the same way it monitors physical servers. There is no special implementation. The NetQ Agent pulls data from the container as it would pull data from a Cumulus Linux switch or Linux host. It can be installed on a Linux server or in a Linux VM. NetQ Agent integrates with the Kubernetes container orchestrator.
NetQ monitors many aspects of containers on your network, including their:</description>
    </item>
    
    <item>
      <title>Using Snapshots</title>
      <link>http://example.org/Cumulus_Linux/Installation_Management/Using_Snapshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Installation_Management/Using_Snapshots/</guid>
      <description>Cumulus Linux supports the ability to take snapshots of the complete file system as well as the ability to roll back to a previous snapshot. Snapshots are performed automatically right before and after you upgrade Cumulus Linux using package install, and right before and after you commit a switch configuration using NCLU. In addition, you can take a snapshot at any time. You can roll back the entire file system to a specific snapshot or just retrieve specific files.</description>
    </item>
    
    <item>
      <title>Using Snapshots</title>
      <link>http://example.org/version/Cumulus_Linux_35/Installation_Management/Using_Snapshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Installation_Management/Using_Snapshots/</guid>
      <description>Cumulus Linux supports the ability to take snapshots of the complete file system as well as the ability to roll back to a previous snapshot. Snapshots are performed automatically right before and after you upgrade Cumulus Linux and right before and after you commit a switch configuration using NCLU. In addition, you can take a snapshot at any time. You can roll back the entire file system to a specific snapshot or just retrieve specific files.</description>
    </item>
    
    <item>
      <title>Using Snapshots</title>
      <link>http://example.org/version/Cumulus_Linux_36/Installation_Management/Using_Snapshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Installation_Management/Using_Snapshots/</guid>
      <description>Cumulus Linux supports the ability to take snapshots of the complete file system as well as the ability to roll back to a previous snapshot. Snapshots are performed automatically right before and after you upgrade Cumulus Linux and right before and after you commit a switch configuration using NCLU. In addition, you can take a snapshot at any time. You can roll back the entire file system to a specific snapshot or just retrieve specific files.</description>
    </item>
    
    <item>
      <title>Using Snapshots</title>
      <link>http://example.org/version2/cumulus-linux-35/Installation_Management/Using_Snapshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Installation_Management/Using_Snapshots/</guid>
      <description>Cumulus Linux supports the ability to take snapshots of the complete file system as well as the ability to roll back to a previous snapshot. Snapshots are performed automatically right before and after you upgrade Cumulus Linux and right before and after you commit a switch configuration using NCLU. In addition, you can take a snapshot at any time. You can roll back the entire file system to a specific snapshot or just retrieve specific files.</description>
    </item>
    
    <item>
      <title>Adding and Updating Packages</title>
      <link>http://example.org/Cumulus_Linux/Installation_Management/Adding_and_Updating_Packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Installation_Management/Adding_and_Updating_Packages/</guid>
      <description>You use the Advanced Packaging Tool (apt) to manage additional applications (in the form of packages) and to install the latest updates.
Updating, upgrading, and installing packages with apt causes disruptions to network services:
 Upgrading a package might result in services being restarted or stopped as part of the upgrade process.
 Installing a package might disrupt core services by changing core service dependency packages. In some cases, installing new packages might also upgrade additional existing packages due to dependencies.</description>
    </item>
    
    <item>
      <title>Adding and Updating Packages</title>
      <link>http://example.org/version/Cumulus_Linux_35/Installation_Management/Adding_and_Updating_Packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Installation_Management/Adding_and_Updating_Packages/</guid>
      <description>You use the Advanced Packaging Tool (apt) to manage additional applications (in the form of packages) and to install the latest updates.
Before running any apt-get commands or after changing the /etc/apt/sources.list file, you need to run apt-get update.
The apt-get upgrade and apt-get install cause disruptions to network services:
 The apt-get upgrade command may result in services being restarted or stopped as part of the upgrade process.</description>
    </item>
    
    <item>
      <title>Adding and Updating Packages</title>
      <link>http://example.org/version/Cumulus_Linux_36/Installation_Management/Adding_and_Updating_Packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Installation_Management/Adding_and_Updating_Packages/</guid>
      <description>You use the Advanced Packaging Tool (apt) to manage additional applications (in the form of packages) and to install the latest updates.
Before running any apt-get commands or after changing the /etc/apt/sources.list file, you need to run apt-get update.
The apt-get upgrade and apt-get install commands cause disruptions to network services:
 The apt-get upgrade command might result in services being restarted or stopped as part of the upgrade process.</description>
    </item>
    
    <item>
      <title>Adding and Updating Packages</title>
      <link>http://example.org/version2/cumulus-linux-35/Installation_Management/Adding_and_Updating_Packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Installation_Management/Adding_and_Updating_Packages/</guid>
      <description>You use the Advanced Packaging Tool (apt) to manage additional applications (in the form of packages) and to install the latest updates.
Before running any apt-get commands or after changing the /etc/apt/sources.list file, you need to run apt-get update.
The apt-get upgrade and apt-get install cause disruptions to network services:
 The apt-get upgrade command may result in services being restarted or stopped as part of the upgrade process.</description>
    </item>
    
    <item>
      <title>Zero Touch Provisioning - ZTP</title>
      <link>http://example.org/Cumulus_Linux/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</guid>
      <description>Zero touch provisioning (ZTP) enables you to deploy network devices quickly in large-scale environments. On first boot, Cumulus Linux invokes ZTP, which executes the provisioning automation used to deploy the device for its intended role in the network.
The provisioning framework allows for a one-time, user-provided script to be executed. You can develop this script using a variety of automation tools and scripting languages, providing ample flexibility for you to design the provisioning scheme to meet your needs.</description>
    </item>
    
    <item>
      <title>Zero Touch Provisioning - ZTP</title>
      <link>http://example.org/version/Cumulus_Linux_35/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</guid>
      <description>Zero touch provisioning (ZTP) enables network devices to be quickly deployed in large-scale environments. On first boot, Cumulus Linux will invoke ZTP, which executes the provisioning automation used to deploy the device for its intended role in the network.
The provisioning framework allows for a one-time, user-provided script to be executed. You can develop this script using a variety of automation tools and scripting languages, providing ample flexibility for you to design the provisioning scheme to meet your needs.</description>
    </item>
    
    <item>
      <title>Zero Touch Provisioning - ZTP</title>
      <link>http://example.org/version/Cumulus_Linux_36/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</guid>
      <description>Zero touch provisioning (ZTP) enables you to deploy network devices quickly in large-scale environments. On first boot, Cumulus Linux invokes ZTP, which executes the provisioning automation used to deploy the device for its intended role in the network.
The provisioning framework allows for a one-time, user-provided script to be executed. You can develop this script using a variety of automation tools and scripting languages, providing ample flexibility for you to design the provisioning scheme to meet your needs.</description>
    </item>
    
    <item>
      <title>Zero Touch Provisioning - ZTP</title>
      <link>http://example.org/version2/cumulus-linux-35/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Installation_Management/Zero_Touch_Provisioning_-_ZTP/</guid>
      <description>Zero touch provisioning (ZTP) enables network devices to be quickly deployed in large-scale environments. On first boot, Cumulus Linux will invoke ZTP, which executes the provisioning automation used to deploy the device for its intended role in the network.
The provisioning framework allows for a one-time, user-provided script to be executed. You can develop this script using a variety of automation tools and scripting languages, providing ample flexibility for you to design the provisioning scheme to meet your needs.</description>
    </item>
    
    <item>
      <title>Setting Date and Time</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</guid>
      <description>Setting the time zone, date and time requires root privileges; use sudo.
Commands  date
 dpkg-reconfigure tzdata
 hwclock
 ntpd (daemon)
 ntpq
  Setting the Time Zone To see the current time zone, list the contents of /etc/timezone:
cumulus@switch:~$ cat /etc/timezone US/Eastern  Edit the file to add your desired time zone. A list of valid time zones can be found at the following link.</description>
    </item>
    
    <item>
      <title>Deployment Preface</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Deployment_Preface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Deployment_Preface/</guid>
      <description>A variety of resources are available for you to become familiar with Cumulus NetQ and aid in its deployment. These are identified here along with information about how the content is presented.
What&amp;rsquo;s New in Cumulus NetQ 2.1 Cumulus NetQ has been reinvented to scale with the fast adoption rate of open networks and rapid network growth. In addition to the real-time data collection and fabric-wide performance analysis that are already supported in Cumulus NetQ 1.</description>
    </item>
    
    <item>
      <title>Netfilter - ACLs</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</guid>
      <description>Netfilter is the packet filtering framework in Cumulus Linux as well as most other Linux distributions. iptables, ip6tables and ebtables are userspace tools in Linux to administer filtering rules for IPv4 packets, IPv6 packets and Ethernet frames (layer 2 using MAC addresses) respectively. cl-acltool is the userspace tool to administer filtering rules on Cumulus Linux, and is the only tool for configuring ACLs in Cumulus Linux.
cl-acltool operates on a series of configuration files, and uses iptables, ip6tables and ebtables to install rules into the kernel.</description>
    </item>
    
    <item>
      <title>Cumulus NetQ Primer</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Cumulus_NetQ_Primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Cumulus_NetQ_Primer/</guid>
      <description>CumulusÂ® NetQ is a highly-scalable, modern network operations tool set that provides visibility and troubleshooting of your overlay and underlay networks in real-time. NetQ delivers actionable insights and operational intelligence about the health of your data center â€” from the container, virtual machine, or host, all the way to the switch and port. NetQ correlates configuration and operational status, and instantly identifies and tracks state changes while simplifying management for the entire Linux-based data center.</description>
    </item>
    
    <item>
      <title>Managing Application Daemons</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</guid>
      <description>You manage application daemons (services) in Cumulus Linux in the following ways:
 Identifying active listener ports
 Identifying daemons currently active or stopped
 Identifying boot time state of a specific daemon
 Disabling or enabling a specific daemon
  Using systemd and the systemctl Command In general, you manage services using systemd via the systemctl command. You use it with any service on the switch to start/stop/restart/reload/enable/disable/reenable or get the status of the service.</description>
    </item>
    
    <item>
      <title>Network Command Line Utility - NCLU</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Network_Command_Line_Utility_-_NCLU/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Network_Command_Line_Utility_-_NCLU/</guid>
      <description>The Network Command Line Utility (NCLU) is a command line interface for Cumulus Networks products that simplifies the networking configuration process for all users.
NCLU resides in the Linux user space and provides consistent access to networking commands directly through bash, making configuration and troubleshooting simple and easy; no need to edit files or enter modes and sub-modes. NCLU provides these benefits:
 Embeds help, examples, and automatic command checking with suggestions in case you enter a typo.</description>
    </item>
    
    <item>
      <title>Configuring switchd</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</guid>
      <description>switchd is the daemon at the heart of Cumulus Linux. It communicates between the switch and Cumulus Linux, and all the applications running on Cumulus Linux.
The switchd configuration is stored in /etc/cumulus/switchd.conf.
Versions of Cumulus Linux prior to 2.1 stored the switchd configuration at /etc/default/switchd.
 The switchd File System switchd also exports a file system, mounted on /cumulus/switchd, that presents all the switchd configuration options as a series of files arranged in a tree structure.</description>
    </item>
    
    <item>
      <title>Install NetQ</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Install_NetQ/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Install_NetQ/</guid>
      <description>Installing NetQ can be accomplished in one of three ways:
 If you have purchased a NetQ Appliance, the only installation required is to load the NetQ Agent on any host you want to monitor.
 If you already have a Cumulus Linux switch (running version 3.3.0 or later) and you want to add NetQ functionality to it, installation involves three steps:
 Verify your server meets the hardware and software requirements.</description>
    </item>
    
    <item>
      <title>Setting Date and Time</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Setting_Date_and_Time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Setting_Date_and_Time/</guid>
      <description>Setting the time zone, date and time requires root privileges; use sudo.
Set the Time Zone You can use one of two methods to set the time zone on the switch:
 Edit the /etc/timezone file.
 Use the guided wizard.
  Edit the /etc/timezone File To see the current time zone, list the contents of /etc/timezone:
 cumulus@switch:~$ cat /etc/timezone US/Eastern  Edit the file to add your desired time zone.</description>
    </item>
    
    <item>
      <title>Setting Date and Time</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Setting_Date_and_Time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Setting_Date_and_Time/</guid>
      <description>Setting the time zone, date and time requires root privileges; use sudo.
Setting the Time Zone To see the current time zone, list the contents of /etc/timezone:
 cumulus@switch:~$ cat /etc/timezone US/Eastern  Edit the file to add your desired time zone. A list of valid time zones can be found at the following link.
Use the following command to apply the new time zone immediately.
 cumulus@switch:~$ sudo dpkg-reconfigure --frontend noninteractive tzdata  Alternative: Use the Guided Wizard to Find and Apply a Time Zone To set the time zone, run dpkg-reconfigure tzdata as root:</description>
    </item>
    
    <item>
      <title>Setting Date and Time</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Setting_Date_and_Time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Setting_Date_and_Time/</guid>
      <description>Setting the time zone, date and time requires root privileges; use sudo.
Setting the Time Zone To see the current time zone, list the contents of /etc/timezone:
 cumulus@switch:~$ cat /etc/timezone US/Eastern  Edit the file to add your desired time zone. A list of valid time zones can be found at the following link.
Use the following command to apply the new time zone immediately.
 cumulus@switch:~$ sudo dpkg-reconfigure --frontend noninteractive tzdata  Alternative: Use the Guided Wizard to Find and Apply a Time Zone To set the time zone, run dpkg-reconfigure tzdata as root:</description>
    </item>
    
    <item>
      <title>Setting Date and Time</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Setting_Date_and_Time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Setting_Date_and_Time/</guid>
      <description>Setting the time zone, date and time requires root privileges; use sudo.
Setting the Time Zone To see the current time zone, list the contents of /etc/timezone:
 cumulus@switch:~$ cat /etc/timezone US/Eastern  Edit the file to add your desired time zone. A list of valid time zones can be found at the following link.
Use the following command to apply the new time zone immediately.
 cumulus@switch:~$ sudo dpkg-reconfigure --frontend noninteractive tzdata  Alternative: Use the Guided Wizard to Find and Apply a Time Zone To set the time zone, run dpkg-reconfigure tzdata as root:</description>
    </item>
    
    <item>
      <title>Power over Ethernet - PoE</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</guid>
      <description>Cumulus Linux supports Power over Ethernet (PoE), so certain Cumulus Linux switches can supply power from Ethernet switch ports to enabled devices over the Ethernet cables that connect them.
The currently supported platform includes:
 Accton AS4610-54P, which supports PoE and PoE+ (an early access feature) and configuration over Ethernet layer 2 LLDP for power negotiation  How It Works When a powered device is connected to the switch via an Ethernet cable:</description>
    </item>
    
    <item>
      <title>Upgrade from NetQ 1.x to NetQ 2.1.0</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Upgrade_from_NetQ_1.x_to_NetQ_2.1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Upgrade_from_NetQ_1.x_to_NetQ_2.1.0/</guid>
      <description>This document describes the steps required to upgrade from NetQ 1.x to NetQ 2.1.
Data collected in the NetQ 1.x environment cannot be migrated to the NetQ 2.1 environment at this time. Event notification configurations must also be reconfigured as the CLI commands have changed. Upgrading from NetQ 1.x version requires a fresh install as described here.
 Prerequisites Hardware Requirements NetQ is supported on the NetQ Appliance and a variety of other hardware.</description>
    </item>
    
    <item>
      <title>Configuring a Global Proxy</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Cumulus_Linux_301/System_Management/</guid>
      <description>Global HTTP and HTTPS proxies are configured in the /etc/profile.d/ directory of Cumulus Linux.
 In a terminal, create a new file in the /etc/profile.d/ directory. In the code example below, the file is called proxy, and is created using the text editor vi.
cumulus@switch:~$ sudo vi /etc/profile.d/proxy  Add a line to the file to configure either an HTTP or an HTTPS proxy, and save the file:
 HTTP proxy:</description>
    </item>
    
    <item>
      <title>Upgrade from NetQ 2.0.x to NetQ 2.1.0</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Upgrade_from_NetQ_2.0.x_to_NetQ_2.1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Upgrade_from_NetQ_2.0.x_to_NetQ_2.1.0/</guid>
      <description>This document describes the steps required to upgrade from NetQ 2.0.x to NetQ 2.1.0.
Cumulus Networks recommends only upgrading NetQ during a network maintenance window.
Any data you have collected while using NetQ 2.0.x is maintained during this upgrade process.
 Events generated during the upgrade process will not be available in the database. Once the upgrade process is complete, the agents re-sync with the current state of the Host or Cumulus Linux switch with the NetQ Platform.</description>
    </item>
    
    <item>
      <title>Managing Application Daemons</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Managing_Application_Daemons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Managing_Application_Daemons/</guid>
      <description>You manage application daemons (services) in Cumulus Linux in the following ways:
 Identifying active listener ports
 Identifying daemons currently active or stopped
 Identifying boot time state of a specific daemon
 Disabling or enabling a specific daemon
  Using systemd and the systemctl Command In general, you manage services using systemd via the systemctl command. You use it with any service on the switch to start/stop/restart/reload/enable/disable/reenable or get the status of the service.</description>
    </item>
    
    <item>
      <title>Managing Application Daemons</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Managing_Application_Daemons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Managing_Application_Daemons/</guid>
      <description>You manage application daemons (services) in Cumulus Linux in the following ways:
 Identifying active listener ports
 Identifying daemons currently active or stopped
 Identifying boot time state of a specific daemon
 Disabling or enabling a specific daemon
  Using systemd and the systemctl Command In general, you manage services using systemd via the systemctl command. You use it with any service on the switch to start/stop/restart/reload/enable/disable/reenable or get the status of the service.</description>
    </item>
    
    <item>
      <title>Managing Application Daemons</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Managing_Application_Daemons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Managing_Application_Daemons/</guid>
      <description>You manage application daemons (services) in Cumulus Linux in the following ways:
 Identifying active listener ports
 Identifying daemons currently active or stopped
 Identifying boot time state of a specific daemon
 Disabling or enabling a specific daemon
  Using systemd and the systemctl Command In general, you manage services using systemd via the systemctl command. You use it with any service on the switch to start/stop/restart/reload/enable/disable/reenable or get the status of the service.</description>
    </item>
    
    <item>
      <title>Services and Daemons in Cumulus Linux</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Services_and_Daemons_in_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Services_and_Daemons_in_Cumulus_Linux/</guid>
      <description>Services (also known as daemons) and processes are at the heart of how a Linux system functions. Most of the time a service takes care of itself; you just enable and start it, then let it run. However, because a Cumulus Linux switch is a Linux system, you have the ability to dig deeper if you like. Services may start multiple processes as they run. Services tend to be the most important things to monitor on a Cumulus Linux switch.</description>
    </item>
    
    <item>
      <title>Upgrade from NetQ 2.1.0 to NetQ 2.1.x</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Upgrade_from_NetQ_2.1.0_to_NetQ_2.1.x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Upgrade_from_NetQ_2.1.0_to_NetQ_2.1.x/</guid>
      <description>This document describes the steps required to upgrade from NetQ 2.1.0 to NetQ 2.1.1 or later.
Cumulus Networks recommends only upgrading NetQ during a network maintenance window.
Any data you have collected while using NetQ 2.1.0 is maintained during this upgrade process.
 Events generated during the upgrade process will not be available in the database. Once the upgrade process is complete, the agents re-sync with the current state of the Host or Cumulus Linux switch with the NetQ Platform.</description>
    </item>
    
    <item>
      <title>Configuring switchd</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Configuring_switchd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Configuring_switchd/</guid>
      <description>switchd is the daemon at the heart of Cumulus Linux. It communicates between the switch and Cumulus Linux, and all the applications running on Cumulus Linux.
The switchd configuration is stored in /etc/cumulus/switchd.conf.
The switchd File System switchd also exports a file system, mounted on /cumulus/switchd, that presents all the switchd configuration options as a series of files arranged in a tree structure. You can see the contents by parsing the switchd tree; run tree /cumulus/switchd.</description>
    </item>
    
    <item>
      <title>Configuring switchd</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Configuring_switchd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Configuring_switchd/</guid>
      <description>switchd is the daemon at the heart of Cumulus Linux. It communicates between the switch and Cumulus Linux, and all the applications running on Cumulus Linux.
The switchd configuration is stored in /etc/cumulus/switchd.conf.
Versions of Cumulus Linux prior to 2.1 stored the switchd configuration at /etc/default/switchd.
 The switchd File System switchd also exports a file system, mounted on /cumulus/switchd, that presents all the switchd configuration options as a series of files arranged in a tree structure.</description>
    </item>
    
    <item>
      <title>Configuring switchd</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Configuring_switchd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Configuring_switchd/</guid>
      <description>switchd is the daemon at the heart of Cumulus Linux. It communicates between the switch and Cumulus Linux, and all the applications running on Cumulus Linux.
The switchd configuration is stored in /etc/cumulus/switchd.conf.
Versions of Cumulus Linux prior to 2.1 stored the switchd configuration at /etc/default/switchd.
 The switchd File System switchd also exports a file system, mounted on /cumulus/switchd, that presents all the switchd configuration options as a series of files arranged in a tree structure.</description>
    </item>
    
    <item>
      <title>Configuring switchd</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Configuring_switchd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Configuring_switchd/</guid>
      <description>switchd is the daemon at the heart of Cumulus Linux. It communicates between the switch and Cumulus Linux, and all the applications running on Cumulus Linux.
The switchd configuration is stored in /etc/cumulus/switchd.conf.
Versions of Cumulus Linux prior to 2.1 stored the switchd configuration at /etc/default/switchd.
 The switchd File System switchd also exports a file system, mounted on /cumulus/switchd, that presents all the switchd configuration options as a series of files arranged in a tree structure.</description>
    </item>
    
    <item>
      <title>Integrate with Third-party Software and Hardware</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Integrate_with_Third-party_Software_and_Hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Integrate_with_Third-party_Software_and_Hardware/</guid>
      <description>After you have installed NetQ applications package and the NetQ Agents, you may want to configure some of the additional capabilities that NetQ offers. This topic describes how to install, setup, and configure these capabilities.
Integrate NetQ with an Event Notification Application To take advantage of the numerous event messages generated and processed by NetQ, you must integrate with third-party event notification applications . You can integrate NetQ with the PagerDuty and Slack tools.</description>
    </item>
    
    <item>
      <title>Manage NetQ Agents</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Manage_NetQ_Agents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_Deployment_Guide/Manage_NetQ_Agents/</guid>
      <description>At various points in time, you might want to change which network nodes are being monitored by NetQ or look more closely at a network node for troubleshooting purposes. Adding the NetQ Agent to a switch or host is described in Install NetQ (2.1.0 version). Disabling an Agent is described here and managing NetQ Agent logging is also presented.
Disable the NetQ Agent on a Node You can temporarily disable NetQ Agent on a node.</description>
    </item>
    
    <item>
      <title>Power over Ethernet - PoE</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Power_over_Ethernet_-_PoE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Power_over_Ethernet_-_PoE/</guid>
      <description>Cumulus Linux supports Power over Ethernet (PoE) and PoE+, so certain Cumulus Linux switches can supply power from Ethernet switch ports to enabled devices over the Ethernet cables that connect them. Power over Ethernet (PoE) is capable of powering devices up to 15W, while PoE+ can power devices up to 30W.
The currently supported platform is the Edge-Core AS4610-54P, which supports PoE and PoE+ and configuration over Ethernet layer 2 LLDP for power negotiation.</description>
    </item>
    
    <item>
      <title>Power over Ethernet - PoE</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Power_over_Ethernet_-_PoE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Power_over_Ethernet_-_PoE/</guid>
      <description>Cumulus Linux supports Power over Ethernet (PoE) and PoE+, so certain Cumulus Linux switches can supply power from Ethernet switch ports to enabled devices over the Ethernet cables that connect them. Power over Ethernet (PoE) is capable of powering devices up to 15W, while PoE+ can power devices up to 30W.
The currently supported platform is the Edge-Core AS4610-54P, which supports PoE and PoE+ and configuration over Ethernet layer 2 LLDP for power negotiation.</description>
    </item>
    
    <item>
      <title>Power over Ethernet - PoE</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Power_over_Ethernet_-_PoE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Power_over_Ethernet_-_PoE/</guid>
      <description>Cumulus Linux supports Power over Ethernet (PoE) and PoE+, so certain Cumulus Linux switches can supply power from Ethernet switch ports to enabled devices over the Ethernet cables that connect them. Power over Ethernet (PoE) is capable of powering devices up to 15W, while PoE+ can power devices up to 30W.
The currently supported platform is the Edge-Core AS4610-54P, which supports PoE and PoE+ and configuration over Ethernet layer 2 LLDP for power negotiation.</description>
    </item>
    
    <item>
      <title>Power over Ethernet - PoE</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Power_over_Ethernet_-_PoE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Power_over_Ethernet_-_PoE/</guid>
      <description>Cumulus Linux supports Power over Ethernet (PoE) and PoE+, so certain Cumulus Linux switches can supply power from Ethernet switch ports to enabled devices over the Ethernet cables that connect them. Power over Ethernet (PoE) is capable of powering devices up to 15W, while PoE+ can power devices up to 30W.
The currently supported platform is the Edge-Core AS4610-54P, which supports PoE and PoE+ and configuration over Ethernet layer 2 LLDP for power negotiation.</description>
    </item>
    
    <item>
      <title>Configuring a Global Proxy</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Configuring_a_Global_Proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Configuring_a_Global_Proxy/</guid>
      <description>You configure global HTTP and HTTPS proxies in the /etc/profile.d/ directory of Cumulus Linux. To do so, set the http_proxy and https_proxy variables, which tells the switch the address of the proxy server to use to fetch URLs on the command line. This is useful for programs such as apt/apt-get, curl and wget, which can all use this proxy.
 In a terminal, create a new file in the /etc/profile.</description>
    </item>
    
    <item>
      <title>Configuring a Global Proxy</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Configuring_a_Global_Proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Configuring_a_Global_Proxy/</guid>
      <description>You configure global HTTP and HTTPS proxies in the /etc/profile.d/ directory of Cumulus Linux. To do so, set the http_proxy and https_proxy variables, which tells the switch the address of the proxy server to use to fetch URLs on the command line. This is useful for programs such as apt/apt-get, curl and wget, which can all use this proxy.
 In a terminal, create a new file in the /etc/profile.</description>
    </item>
    
    <item>
      <title>Configuring a Global Proxy</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Configuring_a_Global_Proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Configuring_a_Global_Proxy/</guid>
      <description>You configure global HTTP and HTTPS proxies in the /etc/profile.d/ directory of Cumulus Linux. To do so, set the http_proxy and https_proxy variables, which tells the switch the address of the proxy server to use to fetch URLs on the command line. This is useful for programs such as apt/apt-get, curl and wget, which can all use this proxy.
 In a terminal, create a new file in the /etc/profile.</description>
    </item>
    
    <item>
      <title>Configuring a Global Proxy</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Configuring_a_Global_Proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Configuring_a_Global_Proxy/</guid>
      <description>You configure global HTTP and HTTPS proxies in the /etc/profile.d/ directory of Cumulus Linux. To do so, set the http_proxy and https_proxy variables, which tells the switch the address of the proxy server to use to fetch URLs on the command line. This is useful for programs such as apt/apt-get, curl and wget, which can all use this proxy.
 In a terminal, create a new file in the /etc/profile.</description>
    </item>
    
    <item>
      <title>HTTP API</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/HTTP_API/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/HTTP_API/</guid>
      <description>Cumulus Linux implements an HTTP application programing interface to OpenStack ML2 driver and NCLU. Rather than accessing Cumulus Linux using SSH, you can interact with the switch using an HTTP client, such as cURL, HTTPie or a web browser.
The HTTP API service is enabled by default on chassis hardware only. However, the associated server is configured to only listen to traffic originating from within the chassis.
The service is not enabled by default on non-chassis hardware.</description>
    </item>
    
    <item>
      <title>HTTP API</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/HTTP_API/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/HTTP_API/</guid>
      <description>Cumulus Linux 3.4+ implements an HTTP application programing interface to OpenStack ML2 driver and NCLU. Rather than accessing a Cumulus Linux host with SSH, you can interact with a server with a HTTP client, such as cURL, HTTPie or a web browser.
The HTTP API service is enabled by default on chassis hardware only. However, the associated server is configured to only listen to traffic originating from within the chassis.</description>
    </item>
    
    <item>
      <title>HTTP API</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/HTTP_API/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/HTTP_API/</guid>
      <description>Cumulus Linux 3.4+ implements an HTTP application programing interface to OpenStack ML2 driver and NCLU. Rather than accessing Cumulus Linux using SSH, you can interact with the switch through an HTTP client, such as cURL, HTTPie or a web browser.
The HTTP API service is enabled by default on chassis hardware only. However, the associated server is configured to only listen to traffic originating from within the chassis.
The service is not enabled by default on non-chassis hardware.</description>
    </item>
    
    <item>
      <title>HTTP API</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/HTTP_API/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/HTTP_API/</guid>
      <description>Cumulus Linux 3.4+ implements an HTTP application programing interface to OpenStack ML2 driver and NCLU. Rather than accessing a Cumulus Linux host with SSH, you can interact with a server with a HTTP client, such as cURL, HTTPie or a web browser.
The HTTP API service is enabled by default on chassis hardware only. However, the associated server is configured to only listen to traffic originating from within the chassis.</description>
    </item>
    
    <item>
      <title>Layer 1 and Switch Port Attributes</title>
      <link>http://example.org/version/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/</guid>
      <description>This chapter discusses the various network interfaces on a switch running Cumulus Linux.
Commands  ethtool
 ip
  Man Pages  man ethtool
 man interfaces
 man ip
 man ip addr
 man ip link
  Configuration Files  /etc/cumulus/ports.conf
 /etc/network/interfaces
  Interface Types Cumulus Linux exposes network interfaces for several types of physical and logical devices:
 lo, network loopback device</description>
    </item>
    
    <item>
      <title>Buffer and Queue Management</title>
      <link>http://example.org/version/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/</guid>
      <description>Hardware datapath configuration manages packet buffering, queueing, and scheduling in hardware. There are two configuration input files:
 /etc/cumulus/datapath/traffic.conf, which describes priority groups and assigns the scheduling algorithm and weights
 /etc/bcm.d/datapath/datapath.conf, which assigns buffer space and egress queues
  Versions of these files prior to Cumulus Linux 2.1 are incompatible with Cumulus Linux 2.1 and later; using older files will cause switchd to fail to start and return an error that it cannot find the /var/lib/cumulus/rc.</description>
    </item>
    
    <item>
      <title>Configuring DHCP Relays</title>
      <link>http://example.org/version/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/Cumulus_Linux_301/Configuring_and_Managing_Network_Interfaces/</guid>
      <description>You can configure an interface so it can make DHCP relay requests for IPv4 and IPv6.
To run DHCP for both IPv4 and IPv6, you need to initiate the DHCP relay and DHCP server twice: once for IPv4 using the -4 option, and once for IPv6 using the -6 option. Following are the configurations on the host, leaf and DHCP server using the following topology:
{{&amp;lt; imgOld 0 &amp;gt;}}</description>
    </item>
    
    <item>
      <title>UI Preface</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/UI_Preface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/UI_Preface/</guid>
      <description>A variety of resources are available for you to become familiar with Cumulus NetQ and to take advantage of its monitoring and analytic capabilities. These resources are identified here along with information about how the content is presented.
What&amp;rsquo;s New in Cumulus NetQ 2.1 Cumulus NetQ has been reinvented to scale with the fast adoption rate of open networks and rapid network growth. In addition to the real-time data collection and fabric-wide performance analysis that are already supported in Cumulus NetQ 1.</description>
    </item>
    
    <item>
      <title>NetQ User Interface Overview</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/NetQ_User_Interface_Overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/NetQ_User_Interface_Overview/</guid>
      <description>The NetQ 2.1 graphical user interface (UI) enables you to access NetQ capabilities through a web browser as opposed to through a terminal window using the Command Line Interface (CLI). Visual representations of the health of the network, inventory, and system events make it easy to both find faults and misconfigurations and to fix them.
The UI is supported on Google Chrome. Other popular browsers may be used, but have not been tested and may have some presentation issues.</description>
    </item>
    
    <item>
      <title>Layer 1 and Switch Port Attributes</title>
      <link>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Layer_1_and_Switch_Port_Attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Layer_1_and_Switch_Port_Attributes/</guid>
      <description>This chapter discusses the various network interfaces on a switch running Cumulus Linux, how to configure various interface-level settings (if needed) and some troubleshooting commands.
Interface Types Cumulus Linux exposes network interfaces for several types of physical and logical devices:
 lo, network loopback device
 ethN, switch management port(s), for out of band management only
 swpN, switch front panel ports
 (optional) brN, bridges (IEEE 802.1Q VLANs)</description>
    </item>
    
    <item>
      <title>Layer 1 and Switch Port Attributes</title>
      <link>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Layer_1_and_Switch_Port_Attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Layer_1_and_Switch_Port_Attributes/</guid>
      <description>This chapter discusses the various network interfaces on a switch running Cumulus Linux, how to configure various interface-level settings (if needed) and some troubleshooting commands.
Interface Types Cumulus Linux exposes network interfaces for several types of physical and logical devices:
 lo, network loopback device
 ethN, switch management port(s), for out of band management only
 swpN, switch front panel ports
 (optional) brN, bridges (IEEE 802.1Q VLANs)</description>
    </item>
    
    <item>
      <title>NetQ Management</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/NetQ_Management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/NetQ_Management/</guid>
      <description>As an administrator, you can manage access to and various application-wide settings for the NetQ UI as well as view information about the system server, all from a single workbench.
Individual users have the ability to set preferences specific to their workspaces. This information is covered separately. Refer to User Settings .
NetQ Management Workbench The NetQ Management workbench is accessed from the main menu and from the header of an open workbench.</description>
    </item>
    
    <item>
      <title>Configuring DHCP Relays</title>
      <link>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Configuring_DHCP_Relays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Configuring_DHCP_Relays/</guid>
      <description>You can configure DHCP relays for IPv4 and IPv6.
To run DHCP for both IPv4 and IPv6, initiate the DHCP relay once for IPv4 and once for IPv6. Following are the configurations on the server hosts, DHCP relay and DHCP server using the following topology:
The dhcpd and dhcrelay services are disabled by default. After you finish configuring the DHCP relays and servers, you need to start those services.</description>
    </item>
    
    <item>
      <title>Configuring DHCP Relays</title>
      <link>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Configuring_DHCP_Relays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Configuring_DHCP_Relays/</guid>
      <description>You can configure DHCP relays for IPv4 and IPv6.
To run DHCP for both IPv4 and IPv6, initiate the DHCP relay once for IPv4 and once for IPv6. Following are the configurations on the server hosts, DHCP relay and DHCP server using the following topology:
The dhcpd and dhcrelay services are disabled by default. After you finish configuring the DHCP relays and servers, you need to start those services.</description>
    </item>
    
    <item>
      <title>DHCP Relays</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/DHCP_Relays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/DHCP_Relays/</guid>
      <description>You can configure DHCP relays for IPv4 and IPv6.
To run DHCP for both IPv4 and IPv6, initiate the DHCP relay once for IPv4 and once for IPv6. Following are the configurations on the server hosts, DHCP relay, and DHCP server using the following topology:
The dhcpd and dhcrelay services are disabled by default. After you finish configuring the DHCP relays and servers, you need to start those services.</description>
    </item>
    
    <item>
      <title>DHCP Relays</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/DHCP_Relays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/DHCP_Relays/</guid>
      <description>You can configure DHCP relays for IPv4 and IPv6.
To run DHCP for both IPv4 and IPv6, initiate the DHCP relay once for IPv4 and once for IPv6. Following are the configurations on the server hosts, DHCP relay and DHCP server using the following topology:
The dhcpd and dhcrelay services are disabled by default. After you finish configuring the DHCP relays and servers, you need to start those services.</description>
    </item>
    
    <item>
      <title>Monitor Switches</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_Switches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_Switches/</guid>
      <description>With the NetQ UI, you can monitor individual switches separately from the network. You are able to view the status of services they are running, health of its various components, and connectivity performance. Being able to monitor switch component inventory aids in upgrade, compliance, and other planning tasks. Viewing individual switch health helps isolate performance issues.
For network-wide monitoring, refer to Monitor the Network.
Monitor Switch Performance Viewing detail about a particular switch is essential when troubleshooting performance issues.</description>
    </item>
    
    <item>
      <title>Configuring DHCP Servers</title>
      <link>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Configuring_DHCP_Servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Configuring_DHCP_Servers/</guid>
      <description>To run DHCP for both IPv4 and IPv6, you need to initiate the DHCP server twice: once for IPv4 and once for IPv6. The following configuration uses the following topology for the host, DHCP relay and DHCP server:
For the configurations used in this chapter, the DHCP server is a switch running Cumulus Linux; however, the DHCP server can also be located on a dedicated server in your environment.</description>
    </item>
    
    <item>
      <title>Configuring DHCP Servers</title>
      <link>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Configuring_DHCP_Servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Configuring_DHCP_Servers/</guid>
      <description>To run DHCP for both IPv4 and IPv6, you need to initiate the DHCP server twice: once for IPv4 and once for IPv6. The following configuration uses the following topology for the host, DHCP relay and DHCP server:
For the configurations used in this chapter, the DHCP server is a switch running Cumulus Linux; however, the DHCP server can also be located on a dedicated server in your environment.</description>
    </item>
    
    <item>
      <title>DHCP Servers</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/DHCP_Servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/DHCP_Servers/</guid>
      <description>To run DHCP for both IPv4 and IPv6, you need to initiate the DHCP server twice: once for IPv4 and once for IPv6. The following configuration uses the following topology for the host, DHCP relay and DHCP server:
For the configurations used in this chapter, the DHCP server is a switch running Cumulus Linux; however, the DHCP server can also be located on a dedicated server in your environment.</description>
    </item>
    
    <item>
      <title>DHCP Servers</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/DHCP_Servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/DHCP_Servers/</guid>
      <description>To run DHCP for both IPv4 and IPv6, you need to initiate the DHCP server twice: once for IPv4 and once for IPv6. The following configuration uses the following topology for the host, DHCP relay and DHCP server:
For the configurations used in this chapter, the DHCP server is a switch running Cumulus Linux; however, the DHCP server can also be located on a dedicated server in your environment.</description>
    </item>
    
    <item>
      <title>Spanning Tree and Rapid Spanning Tree</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>Spanning tree protocol (STP) is always recommended in layer 2 topologies, as it prevents bridge loops and broadcast radiation on a bridged network.
The mstpd daemon is an open source project used by Cumulus Linux to implement IEEE802.1D 2004 and IEEE802.1Q 2011. mstpctl is the utility provided by the mstpd service to configure STP. STP is disabled by default on bridges in Cumulus Linux.
Commands  brctl
 mstpctl</description>
    </item>
    
    <item>
      <title>802.1X Interfaces</title>
      <link>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/802.1X_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/802.1X_Interfaces/</guid>
      <description>The IEEE 802.1X protocol provides a method of authenticating a client (called a supplicant) over wired media. It also provides access for individual MAC addresses on a switch (called the authenticator) after those MAC addresses have been authenticated by an authentication server â€” typically a RADIUS (Remote Authentication Dial In User Service, defined by RFC 2865) server.
A Cumulus Linux switch acts as an intermediary between the clients connected to the wired ports and the authentication server, which is reachable over the existing network.</description>
    </item>
    
    <item>
      <title>802.1X Interfaces</title>
      <link>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/802.1X_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/802.1X_Interfaces/</guid>
      <description>The IEEE 802.1X protocol provides a method of authenticating a client (called a supplicant) over wired media. It also provides access for individual MAC addresses on a switch (called the authenticator) after those MAC addresses have been authenticated by an authentication server â€” typically a RADIUS (Remote Authentication Dial In User Service, defined by RFC 2865) server.
A Cumulus Linux switch acts as an intermediary between the clients connected to the wired ports and the authentication server, which is reachable over the existing network.</description>
    </item>
    
    <item>
      <title>Facebook Voyager Optical Interfaces</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Facebook_Voyager_Optical_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Facebook_Voyager_Optical_Interfaces/</guid>
      <description>Facebook Voyager is a Broadcom Tomahawk-based switch with added Dense Wave Division Multiplexing (DWDM) ports that can connect to another switch thousands of kilometers away by adding transponders. DWDM allows many separate connections on one fiber pair by sending them over different wavelengths. Although the wavelengths are sent on the same physical fiber, they do not interact with each other, similar to VLANs on a trunk. Each wavelength can transport very high speeds over very long distances.</description>
    </item>
    
    <item>
      <title>Facebook Voyager Optical Interfaces</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Facebook_Voyager_Optical_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Facebook_Voyager_Optical_Interfaces/</guid>
      <description>Facebook Voyager is a Broadcom Tomahawk-based switch with added Dense Wave Division Multiplexing (DWDM) ports that can connect to another switch thousands of kilometers away by adding transponders. DWDM allows many separate connections on one fiber pair by sending them over different wavelengths. Although the wavelengths are sent on the same physical fiber, they do not interact with each other, similar to VLANs on a trunk. Each wavelength can transport very high speeds over very long distances.</description>
    </item>
    
    <item>
      <title>Link Layer Discovery Protocol</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>The lldpd daemon implements the IEEE802.1AB (Link Layer Discovery Protocol, or LLDP) standard. LLDP allows you to know which ports are neighbors of a given port. By default, lldpd runs as a daemon and is started at system boot. lldpd command line arguments are placed in /etc/default/lldpd. lldpd configuration options are placed in /etc/lldpd.conf or under /etc/lldpd.d/.
For more details on the command line arguments and config options, please see man lldpd(8).</description>
    </item>
    
    <item>
      <title>802.1X Interfaces</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/802.1X_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/802.1X_Interfaces/</guid>
      <description>The IEEE 802.1X protocol provides a method of authenticating a client (called a supplicant) over wired media. It also provides access for individual MAC addresses on a switch (called the authenticator) after those MAC addresses have been authenticated by an authentication server â€” typically a RADIUS (Remote Authentication Dial In User Service, defined by RFC 2865) server.
A Cumulus Linux switch acts as an intermediary between the clients connected to the wired ports and the authentication server, which is reachable over the existing network.</description>
    </item>
    
    <item>
      <title>802.1X Interfaces</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/802.1X_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/802.1X_Interfaces/</guid>
      <description>The IEEE 802.1X protocol provides a method of authenticating a client (called a supplicant) over wired media. It also provides access for individual MAC addresses on a switch (called the authenticator) after those MAC addresses have been authenticated by an authentication server â€” typically a RADIUS (Remote Authentication Dial In User Service, defined by RFC 2865) server.
A Cumulus Linux switch acts as an intermediary between the clients connected to the wired ports and the authentication server, which is reachable over the existing network.</description>
    </item>
    
    <item>
      <title>Prescriptive Topology Manager - PTM</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>In data center topologies, right cabling is a time-consuming endeavor and is error prone. Prescriptive Topology Manager (PTM) is a dynamic cabling verification tool to help detect and eliminate such errors. It takes a Graphviz-DOT specified network cabling plan (something many operators already generate), stored in a topology.dot file, and couples it with runtime information derived from LLDP to verify that the cabling matches the specification. The check is performed on every link transition on each node in the network.</description>
    </item>
    
    <item>
      <title>Bonding - Link Aggregation</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>Linux bonding provides a method for aggregating multiple network interfaces (the slaves) into a single logical bonded interface (the bond). Cumulus Linux bonding supports the IEEE 802.3ad link aggregation mode. Link aggregation allows one or more links to be aggregated together to form a link aggregation group (LAG), such that a media access control (MAC) client can treat the link aggregation group as if it were a single link. The benefits of link aggregation are:</description>
    </item>
    
    <item>
      <title>Prescriptive Topology Manager - PTM</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Prescriptive_Topology_Manager_-_PTM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Prescriptive_Topology_Manager_-_PTM/</guid>
      <description>In data center topologies, right cabling is a time-consuming endeavor and is error prone. Prescriptive Topology Manager (PTM) is a dynamic cabling verification tool to help detect and eliminate such errors. It takes a Graphviz-DOT specified network cabling plan (something many operators already generate), stored in a topology.dot file, and couples it with runtime information derived from LLDP to verify that the cabling matches the specification. The check is performed on every link transition on each node in the network.</description>
    </item>
    
    <item>
      <title>Prescriptive Topology Manager - PTM</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Prescriptive_Topology_Manager_-_PTM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Prescriptive_Topology_Manager_-_PTM/</guid>
      <description>In data center topologies, right cabling is a time-consuming endeavor and is error prone. Prescriptive Topology Manager (PTM) is a dynamic cabling verification tool to help detect and eliminate such errors. It takes a Graphviz-DOT specified network cabling plan (something many operators already generate), stored in a topology.dot file, and couples it with runtime information derived from LLDP to verify that the cabling matches the specification. The check is performed on every link transition on each node in the network.</description>
    </item>
    
    <item>
      <title>Methods for Diagnosing Network Issues</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Resolve_Issues/Methods_for_Diagnosing_Network_Issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Resolve_Issues/Methods_for_Diagnosing_Network_Issues/</guid>
      <description>NetQ provides users with the ability to go back in time to replay the network state, see fabric-wide event change logs and root cause state deviations. The NetQ Telemetry Server maintains data collected by NetQ agents in a time-series database, making fabric-wide events available for analysis. This enables you to replay and analyze network-wide events for better visibility and to correlate patterns. This allows for root-cause analysis and optimization of network configs for the future.</description>
    </item>
    
    <item>
      <title>Multi-Chassis Link Aggregation - MLAG</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>Multi-Chassis Link Aggregation, or MLAG, enables a server or switch with a two-port bond (such as a link aggregation group/LAG, EtherChannel, port group, or trunk) to connect those ports to different switches and operate as if they are connected to a single, logical switch. This provides greater redundancy and greater system throughput.
Dual-connected devices can create LACP bonds that contain links to each physical switch. Thus, active-active links from the dual-connected devices are supported even though they are connected to two different physical switches.</description>
    </item>
    
    <item>
      <title>LACP Bypass</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>On Cumulus Linux, LACP Bypass is a feature that allows a bond configured in 802.3ad mode to become active and forward traffic even when there is no LACP partner. A typical use case for this feature is to enable a host, without the capability to run LACP, to PXE boot while connected to a switch on a bond configured in 802.3ad mode. Once the pre-boot process finishes and the host is capable of running LACP, the normal 802.</description>
    </item>
    
    <item>
      <title>Resolve MLAG Issues</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Resolve_Issues/Resolve_MLAG_Issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Resolve_Issues/Resolve_MLAG_Issues/</guid>
      <description>This topic outlines a few scenarios that illustrate how you use NetQ to troubleshoot MLAG on Cumulus Linux switches. Each starts with a log message that indicates the current MLAG state.
NetQ can monitor many aspects of an MLAG configuration, including:
 Verifying the current state of all nodes
 Verifying the dual connectivity state
 Checking that the peer link is part of the bridge
 Verifying whether MLAG bonds are not bridge members</description>
    </item>
    
    <item>
      <title>Investigate NetQ Issues</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Resolve_Issues/Investigate_NetQ_Issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_CLI_User_Guide/Resolve_Issues/Investigate_NetQ_Issues/</guid>
      <description>There are several paths you can take to locate and investigate issues that occur in the NetQ software itself, including viewing configuration and log files, verifying NetQ Agent health, and verifying NetQ Platform configuration. If these do not produce a resolution, you can capture a log to use in discussion with Cumulus Networks support team.
Browse Configuration and Log Files To aid in troubleshooting issues with NetQ, there are the following configuration and log files that can provide insight into the root cause of the issue:</description>
    </item>
    
    <item>
      <title>Spanning Tree and Rapid Spanning Tree</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Spanning_Tree_and_Rapid_Spanning_Tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Spanning_Tree_and_Rapid_Spanning_Tree/</guid>
      <description>Spanning tree protocol (STP) is always recommended in layer 2 topologies, as it prevents bridge loops and broadcast radiation on a bridged network. STP also provides redundant links for automatic failover when an active link fails. STP is disabled by default on bridges in Cumulus Linux.
Supported Modes The STP modes Cumulus Linux supports vary depending upon whether the traditional or VLAN-aware bridge driver mode is in use.
Bridges configured in VLAN-aware mode operate only in RSTP mode.</description>
    </item>
    
    <item>
      <title>Spanning Tree and Rapid Spanning Tree</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Spanning_Tree_and_Rapid_Spanning_Tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Spanning_Tree_and_Rapid_Spanning_Tree/</guid>
      <description>Spanning tree protocol (STP) is always recommended in layer 2 topologies, as it prevents bridge loops and broadcast radiation on a bridged network. STP also provides redundant links for automatic failover when an active link fails. STP is disabled by default on bridges in Cumulus Linux.
Supported Modes The STP modes Cumulus Linux supports vary depending upon whether the traditional or VLAN-aware bridge driver mode is in use.
Bridges configured in VLAN-aware mode operate only in RSTP mode.</description>
    </item>
    
    <item>
      <title>Virtual Router Redundancy - VRR</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>VRR provides virtualized router redundancy in network configurations, which enables the hosts to communicate with any redundant router without:
 Needing to be reconfigured
 Having to run dynamic router protocols
 Having to run router redundancy protocols
  A basic VRR-enabled network configuration is shown below. The network consists of several hosts, two routers running Cumulus Linux and configured with MLAG, and the rest of the network:</description>
    </item>
    
    <item>
      <title>IGMP and MLD Snooping</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/</guid>
      <description>IGMP (Internet Group Management Protocol) and MLD (Multicast Listener Discovery) snooping functionality is implemented in the bridge driver in the Cumulus Linux kernel and are enabled by default. IGMP snooping processes IGMP v1/v2/v3 reports received on a bridge port in a bridge to identify the hosts which would like to receive multicast traffic destined to that group.
When an IGMPv2 leave message is received, a group specific query is sent to identify if there are any other hosts interested in that group, before the group is deleted.</description>
    </item>
    
    <item>
      <title>Prescriptive Topology Manager - PTM</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Prescriptive_Topology_Manager_-_PTM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Prescriptive_Topology_Manager_-_PTM/</guid>
      <description>In data center topologies, right cabling is a time-consuming endeavor and is error prone. Prescriptive Topology Manager (PTM) is a dynamic cabling verification tool to help detect and eliminate such errors. It takes a Graphviz-DOT specified network cabling plan (something many operators already generate), stored in a topology.dot file, and couples it with runtime information derived from LLDP to verify that the cabling matches the specification. The check is performed on every link transition on each node in the network.</description>
    </item>
    
    <item>
      <title>Prescriptive Topology Manager - PTM</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Prescriptive_Topology_Manager_-_PTM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Prescriptive_Topology_Manager_-_PTM/</guid>
      <description>In data center topologies, right cabling is a time-consuming endeavor and is error prone. Prescriptive Topology Manager (PTM) is a dynamic cabling verification tool to help detect and eliminate such errors. It takes a Graphviz-DOT specified network cabling plan (something many operators already generate), stored in a topology.dot file, and couples it with runtime information derived from LLDP to verify that the cabling matches the specification. The check is performed on every link transition on each node in the network.</description>
    </item>
    
    <item>
      <title>Spanning Tree and Rapid Spanning Tree</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Spanning_Tree_and_Rapid_Spanning_Tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Spanning_Tree_and_Rapid_Spanning_Tree/</guid>
      <description>Spanning tree protocol (STP) is always recommended in layer 2 topologies as it prevents bridge loops and broadcast radiation on a bridged network. STP also provides redundant links for automatic failover when an active link fails. STP is enabled by default in Cumulus Linux.
Supported Modes The STP modes Cumulus Linux supports vary depending upon whether the traditional or VLAN-aware bridge driver mode is in use.
 Bridges configured in VLAN-aware mode operate only in RSTP mode.</description>
    </item>
    
    <item>
      <title>Spanning Tree and Rapid Spanning Tree</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Spanning_Tree_and_Rapid_Spanning_Tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Spanning_Tree_and_Rapid_Spanning_Tree/</guid>
      <description>Spanning tree protocol (STP) is always recommended in layer 2 topologies, as it prevents bridge loops and broadcast radiation on a bridged network. STP also provides redundant links for automatic failover when an active link fails. STP is disabled by default on bridges in Cumulus Linux.
Supported Modes The STP modes Cumulus Linux supports vary depending upon whether the traditional or VLAN-aware bridge driver mode is in use.
 Bridges configured in VLAN-aware mode operate only in RSTP mode.</description>
    </item>
    
    <item>
      <title>Bonding - Link Aggregation</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Bonding_-_Link_Aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Bonding_-_Link_Aggregation/</guid>
      <description>Linux bonding provides a method for aggregating multiple network interfaces (slaves) into a single logical bonded interface (bond). Cumulus Linux supports two bonding modes:
 The IEEE 802.3ad link aggregation mode, which allows one or more links to be aggregated together to form a link aggregation group (LAG), such that a media access control (MAC) client can treat the link aggregation group as if it were a single link.</description>
    </item>
    
    <item>
      <title>Bonding - Link Aggregation</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Bonding_-_Link_Aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Bonding_-_Link_Aggregation/</guid>
      <description>Linux bonding provides a method for aggregating multiple network interfaces (slaves) into a single logical bonded interface (bond). Cumulus Linux supports two bonding modes:
 The IEEE 802.3ad link aggregation mode, which allows one or more links to be aggregated together to form a link aggregation group (LAG), such that a media access control (MAC) client can treat the link aggregation group as if it were a single link.</description>
    </item>
    
    <item>
      <title>Bonding - Link Aggregation</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Bonding_-_Link_Aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Bonding_-_Link_Aggregation/</guid>
      <description>Linux bonding provides a method for aggregating multiple network interfaces (slaves) into a single logical bonded interface (bond). Cumulus Linux supports two bonding modes:
 IEEE 802.3ad link aggregation mode, which allows one or more links to be aggregated together to form a link aggregation group (LAG), so that a media access control (MAC) client can treat the link aggregation group as if it were a single link. IEEE 802.</description>
    </item>
    
    <item>
      <title>Bonding - Link Aggregation</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Bonding_-_Link_Aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Bonding_-_Link_Aggregation/</guid>
      <description>Linux bonding provides a method for aggregating multiple network interfaces (slaves) into a single logical bonded interface (bond). Cumulus Linux supports two bonding modes:
 The IEEE 802.3ad link aggregation mode, which allows one or more links to be aggregated together to form a link aggregation group (LAG), such that a media access control (MAC) client can treat the link aggregation group as if it were a single link.</description>
    </item>
    
    <item>
      <title>Multi-Chassis Link Aggregation - MLAG</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Multi-Chassis_Link_Aggregation_-_MLAG/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Multi-Chassis_Link_Aggregation_-_MLAG/</guid>
      <description>Multi-Chassis Link Aggregation, or MLAG, enables a server or switch with a two-port bond (such as a link aggregation group/LAG, EtherChannel, port group or trunk) to connect those ports to different switches and operate as if they are connected to a single, logical switch. This provides greater redundancy and greater system throughput.
The Cumulus Linux implementation of MLAG is referred to by other vendors as CLAG, MC-LAG or VPC. You will even see references to CLAG in Cumulus Linux, including the management daemon, named clagd, and other options in the code, such as clag-id, which exist for historical purposes.</description>
    </item>
    
    <item>
      <title>Multi-Chassis Link Aggregation - MLAG</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Multi-Chassis_Link_Aggregation_-_MLAG/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Multi-Chassis_Link_Aggregation_-_MLAG/</guid>
      <description>Multi-Chassis Link Aggregation, or MLAG, enables a server or switch with a two-port bond (such as a link aggregation group/LAG, EtherChannel, port group or trunk) to connect those ports to different switches and operate as if they are connected to a single, logical switch. This provides greater redundancy and greater system throughput.
The Cumulus Linux implementation of MLAG is referred to by other vendors as CLAG, MC-LAG or VPC. You will even see references to CLAG in Cumulus Linux, including the management daemon, named clagd, and other options in the code, such as clag-id, which exist for historical purposes.</description>
    </item>
    
    <item>
      <title>LACP Bypass</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/LACP_Bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/LACP_Bypass/</guid>
      <description>On Cumulus Linux, LACP Bypass is a feature that allows a bond configured in 802.3ad mode to become active and forward traffic even when there is no LACP partner. A typical use case for this feature is to enable a host, without the capability to run LACP, to PXE boot while connected to a switch on a bond configured in 802.3ad mode. Once the pre-boot process finishes and the host is capable of running LACP, the normal 802.</description>
    </item>
    
    <item>
      <title>LACP Bypass</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/LACP_Bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/LACP_Bypass/</guid>
      <description>On Cumulus Linux, LACP Bypass is a feature that allows a bond configured in 802.3ad mode to become active and forward traffic even when there is no LACP partner. A typical use case for this feature is to enable a host, without the capability to run LACP, to PXE boot while connected to a switch on a bond configured in 802.3ad mode. Once the pre-boot process finishes and the host is capable of running LACP, the normal 802.</description>
    </item>
    
    <item>
      <title>Monitor Network Health</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Health/</guid>
      <description>As with any network, one of the challenges is keeping track of all of the moving parts. With the NetQ GUI, you can view the overall health of your network at a glance and then delve deeper for periodic checks or as conditions arise that require attention. For a general understanding of how well your network is operating, the Network Health card workflow is the best place to start as it contains the highest view and performance rollups.</description>
    </item>
    
    <item>
      <title>Multi-Chassis Link Aggregation - MLAG</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Multi-Chassis_Link_Aggregation_-_MLAG/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Multi-Chassis_Link_Aggregation_-_MLAG/</guid>
      <description>Multi-Chassis Link Aggregation (MLAG), enables a server or switch with a two-port bond, such as a link aggregation group/LAG, EtherChannel, port group or trunk, to connect those ports to different switches and operate as if they are connected to a single, logical switch. This provides greater redundancy and greater system throughput.
The Cumulus Linux implementation of MLAG is referred to by other vendors as CLAG, MC-LAG or VPC. You will even see references to CLAG in Cumulus Linux, including the management daemon, named clagd, and other options in the code, such as clag-id, which exist for historical purposes.</description>
    </item>
    
    <item>
      <title>Multi-Chassis Link Aggregation - MLAG</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Multi-Chassis_Link_Aggregation_-_MLAG/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Multi-Chassis_Link_Aggregation_-_MLAG/</guid>
      <description>Multi-Chassis Link Aggregation (MLAG), enables a server or switch with a two-port bond, such as a link aggregation group/LAG, EtherChannel, port group or trunk, to connect those ports to different switches and operate as if they are connected to a single, logical switch. This provides greater redundancy and greater system throughput.
The Cumulus Linux implementation of MLAG is referred to by other vendors as CLAG, MC-LAG or VPC. You will even see references to CLAG in Cumulus Linux, including the management daemon, named clagd, and other options in the code, such as clag-id, which exist for historical purposes.</description>
    </item>
    
    <item>
      <title>LACP Bypass</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/LACP_Bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/LACP_Bypass/</guid>
      <description>On Cumulus Linux, LACP Bypass is a feature that allows a bond configured in 802.3ad mode to become active and forward traffic even when there is no LACP partner. A typical use case for this feature is to enable a host, without the capability to run LACP, to PXE boot while connected to a switch on a bond configured in 802.3ad mode. Once the pre-boot process finishes and the host is capable of running LACP, the normal 802.</description>
    </item>
    
    <item>
      <title>LACP Bypass</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/LACP_Bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/LACP_Bypass/</guid>
      <description>On Cumulus Linux, LACP Bypass is a feature that allows a bond configured in 802.3ad mode to become active and forward traffic even when there is no LACP partner. A typical use case for this feature is to enable a host, without the capability to run LACP, to PXE boot while connected to a switch on a bond configured in 802.3ad mode. Once the pre-boot process finishes and the host is capable of running LACP, the normal 802.</description>
    </item>
    
    <item>
      <title>Validate Network Protocol and Service Operations</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Validate_Network_Protocol_and_Service_Operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Validate_Network_Protocol_and_Service_Operations/</guid>
      <description>With the NetQ UI, you can validate the operation of the network protocols and services running in your network either on demand or on a scheduled basis. There are three card workflows to perform this validation: one for creating the validation request (either on-demand or scheduled) and two validation results (one for on-demand and one for scheduled).
This release supports validation of the following network protocols and services: Agents, BGP, CLAG, EVPN, Interfaces, License, and NTP.</description>
    </item>
    
    <item>
      <title>IGMP and MLD Snooping</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/IGMP_and_MLD_Snooping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/IGMP_and_MLD_Snooping/</guid>
      <description>IGMP (Internet Group Management Protocol) and MLD (Multicast Listener Discovery) snooping are implemented in the bridge driver in the Cumulus Linux kernel and are enabled by default. IGMP snooping processes IGMP v1/v2/v3 reports received on a bridge port in a bridge to identify the hosts which would like to receive multicast traffic destined to that group.
When an IGMPv2 leave message is received, a group specific query is sent to identify if there are any other hosts interested in that group, before the group is deleted.</description>
    </item>
    
    <item>
      <title>IGMP and MLD Snooping</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/IGMP_and_MLD_Snooping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/IGMP_and_MLD_Snooping/</guid>
      <description>IGMP (Internet Group Management Protocol) and MLD (Multicast Listener Discovery) snooping are implemented in the bridge driver in the Cumulus Linux kernel and are enabled by default. IGMP snooping processes IGMP v1/v2/v3 reports received on a bridge port in a bridge to identify the hosts which would like to receive multicast traffic destined to that group.
When an IGMPv2 leave message is received, a group specific query is sent to identify if there are any other hosts interested in that group, before the group is deleted.</description>
    </item>
    
    <item>
      <title>Monitor Network Inventory</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Inventory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Inventory/</guid>
      <description>With NetQ, a network administrator can monitor both the switch hardware and its operating system for misconfigurations or misbehaving services. The Devices Inventory card workflow provides a view into the switches and hosts installed in your network and their various hardware and software components. The workflow contains a small card with a count of each device type in your network, a medium card displaying the operating systems running on each set of devices, large cards with component information statistics, and full-screen cards displaying tables with attributes of all switches and all hosts in your network.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>This chapter discusses routing on switches running Cumulus Linux.
Commands  ip route  Static Routing via ip route The ip route command allows manipulating the kernel routing table directly from the Linux shell. See man ip(8) for details. quagga monitors the kernel routing table changes and updates its own routing table accordingly.
To display the routing table:
cumulus@switch:~$ ip route show default via 10.0.1.2 dev eth0 10.0.1.0/24 dev eth0 proto kernel scope link src 10.</description>
    </item>
    
    <item>
      <title>Virtual Router Redundancy - VRR and VRRP</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Virtual_Router_Redundancy_-_VRR_and_VRRP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Virtual_Router_Redundancy_-_VRR_and_VRRP/</guid>
      <description>Cumulus Linux provides the option of using Virtual Router Redundancy (VRR) or Virtual Router Redundancy Protocol (VRRP).
VRR enables hosts to communicate with any redundant router without reconfiguration, running dynamic router protocols, or running router redundancy protocols. This means that redundant routers respond to Address Resolution Protocol (ARP) requests from hosts. Routers are configured to respond in an identical manner, but if one fails, the other redundant routers continue to respond, leaving the hosts with the impression that nothing has changed.</description>
    </item>
    
    <item>
      <title>IGMP and MLD Snooping</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/IGMP_and_MLD_Snooping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/IGMP_and_MLD_Snooping/</guid>
      <description>IGMP (Internet Group Management Protocol) and MLD (Multicast Listener Discovery) snooping are implemented in the bridge driver in the Cumulus Linux kernel and are enabled by default. IGMP snooping processes IGMP v1/v2/v3 reports received on a bridge port in a bridge to identify the hosts which would like to receive multicast traffic destined to that group.
In Cumulus Linux 3.7.4 and later, IGMP and MLD snooping is supported over VXLAN bridges on Broadcom switches; however, this feature is not enabled by default.</description>
    </item>
    
    <item>
      <title>IGMP and MLD Snooping</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/IGMP_and_MLD_Snooping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/IGMP_and_MLD_Snooping/</guid>
      <description>IGMP (Internet Group Management Protocol) and MLD (Multicast Listener Discovery) snooping are implemented in the bridge driver in the Cumulus Linux kernel and are enabled by default. IGMP snooping processes IGMP v1/v2/v3 reports received on a bridge port in a bridge to identify the hosts which would like to receive multicast traffic destined to that group.
When an IGMPv2 leave message is received, a group specific query is sent to identify if there are any other hosts interested in that group, before the group is deleted.</description>
    </item>
    
    <item>
      <title>Introduction to Routing Protocols</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>This chapter discusses the various routing protocols, and how to configure them.
Defining Routing Protocols A routing protocol dynamically computes reachability between various end points. This enables communication to work around link and node failures, and additions and withdrawals of various addresses.
IP routing protocols are typically distributed; that is, an instance of the routing protocol runs on each of the routers in a network.
Cumulus Linux does not support running multiple instances of the same protocol on a router.</description>
    </item>
    
    <item>
      <title>Monitor Events</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Events/</guid>
      <description>Two event workflows, the Alarms card workflow and the Info card workflow, provide a view into the events occurring in the network. The Alarms card workflow tracks critical severity events, whereas the Info card workflow tracks all warning, info, and debug severity events.
To focus on events from a single device perspective, refer to Monitor Switches .
Monitor Alarms You can easily monitor critical events occurring across your network using the Alarms card.</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>In computer networks, topology refers to the structure of interconnecting various nodes. Some commonly used topologies in networks are star, hub and spoke, leaf and spine, and broadcast.
Clos Topologies In the vast majority of modern data centers, Clos or fat tree topology is very popular. This topology is shown in the figure below. It is also commonly referred to as leaf-spine topology. We shall use this topology throughout the routing protocol guide.</description>
    </item>
    
    <item>
      <title>Monitor Network Connectivity</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Connectivity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Connectivity/</guid>
      <description>It is helpful to verify that communications are freely flowing between the various devices in your network. You can verify the connectivity between two devices currently or for a time in the past. You can also view connectivity in both an adhoc fashion and specifically define connectivity checks to occur on a scheduled basis. There are three card workflows which enable you to view connectivity, the Trace Request, On-demand Trace Results, and Scheduled Trace Results.</description>
    </item>
    
    <item>
      <title>Quagga Overview</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>Cumulus Linux uses quagga, an open source routing software suite, to provide the routing protocols for dynamic routing. Cumulus Linux supports the l atest Quagga version, 0.99.23.1+cl3.0  . Quagga is a fork of the GNU Zebra project.
Quagga provides many routing protocols, of which Cumulus Linux supports the following:
 Open Shortest Path First (v2 and v3)
 Border Gateway Protocol
  Architecture {{&amp;lt; imgOld 0 &amp;gt;}}</description>
    </item>
    
    <item>
      <title>Open Shortest Path First - OSPF - Protocol</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>OSPFv2 is a link-state routing protocol for IPv4. OSPF maintains the view of the network topology conceptually as a directed graph. Each router represents a vertex in the graph. Each link between neighboring routers represents a unidirectional edge. Each link has an associated weight (called cost) that is either automatically derived from its bandwidth or administratively assigned. Using the weighted topology graph, each router computes a shortest path tree (SPT) with itself as the root, and applies the results to build its forwarding table.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First v3 - OSPFv3 - Protocol</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>OSPFv3 is a revised version of OSPFv2 to support the IPv6 address family. Refer to Open Shortest Path First (OSPF) Protocol for a discussion on the basic concepts, which remain the same between the two versions.
OSPFv3 has changed the formatting in some of the packets and LSAs either as a necessity to support IPv6 or to improve the protocol behavior based on OSPFv2 experience. Most notably, v3 defines a new LSA, called intra-area prefix LSA to separate out the advertisement of stub networks attached to a router from the router LSA.</description>
    </item>
    
    <item>
      <title>Border Gateway Protocol - BGP</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>BGP is the routing protocol that runs the Internet. It is an increasingly popular protocol for use in the data center as it lends itself well to the rich interconnections in a Clos topology. Specifically:
 It does not require routing state to be periodically refreshed unlike OSPF.
 It is less chatty than its link-state siblings. For example, a link or node transition can result in a bestpath change, causing BGP to send updates.</description>
    </item>
    
    <item>
      <title>Bidirectional Forwarding Detection - BFD</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>Bidirectional Forwarding Detection (BFD) provides low overhead and rapid detection of failures in the paths between two network devices. It provides a unified mechanism for link detection over all media and protocol layers. Use BFD to detect failures for IPv4 and IPv6 single or multihop paths between any two network devices, including unidirectional path failure detection.
Cumulus Linux does not support demand mode in BFD.
 Using BFD Multihop Routed Paths BFD multihop sessions are built over arbitrary paths between two systems, which results in some complexity that does not exist for single hop sessions.</description>
    </item>
    
    <item>
      <title>Ethernet Virtual Private Network - EVPN</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</guid>
      <description>VXLAN is the de facto technology for implementing network virtualization in the data center, enabling layer 2 segments to be extended over an IP core (the underlay). The initial definition of VXLAN (RFC 7348) did not include any control plane and relied on a flood-and-learn approach for MAC address learning. An alternate deployment model was to use a controller or a technology such as Lightweight Network Virtualization (LNV) in Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Ethernet Virtual Private Network - EVPN</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</guid>
      <description>VXLAN is the de facto technology for implementing network virtualization in the data center, enabling layer 2 segments to be extended over an IP core (the underlay). The initial definition of VXLAN (RFC 7348) did not include any control plane and relied on a flood-and-learn approach for MAC address learning. An alternate deployment model was to use a controller or a technology such as Lightweight Network Virtualization (LNV) in Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Ethernet Virtual Private Network - EVPN</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</guid>
      <description>VXLAN is the de facto technology for implementing network virtualization in the data center, enabling layer 2 segments to be extended over an IP core (the underlay). The initial definition of VXLAN (RFC 7348) did not include any control plane and relied on a flood-and-learn approach for MAC address learning. An alternate deployment model was to use a controller or a technology such as Lightweight Network Virtualization (LNV) in Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Equal Cost Multipath Load Sharing - Hardware ECMP</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>Cumulus Linux supports hardware-based equal cost multipath (ECMP) load sharing. ECMP is enabled by default in Cumulus Linux. Load sharing occurs automatically for all routes with multiple next hops installed. ECMP load sharing supports both IPv4 and IPv6 routes.
Understanding Equal Cost Routing ECMP operates only on equal cost routes in the Linux routing table.
In this example, the 10.1.1.0/24 route has two possible next hops that have been installed in the routing table:</description>
    </item>
    
    <item>
      <title>Ethernet Virtual Private Network - EVPN</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Ethernet_Virtual_Private_Network_-_EVPN/</guid>
      <description>VXLAN is the de facto technology for implementing network virtualization in the data center, enabling layer 2 segments to be extended over an IP core (the underlay). The initial definition of VXLAN (RFC 7348) did not include any control plane and relied on a flood-and-learn approach for MAC address learning. An alternate deployment model was to use a controller or a technology such as Lightweight Network Virtualization (LNV) in Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Monitor the BGP Service</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_BGP_Service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_BGP_Service/</guid>
      <description>The Cumulus NetQ UI enables operators to view the health of the BGP service on a network-wide and a per session basis, giving greater insight into all aspects of the service. This is accomplished through two card workflows, one for the service and one for the session. They are described separately here.
Monitor the BGP Service (All Sessions) With NetQ, you can monitor the number of nodes running the BGP service, view switches with the most established and unestablished BGP sessions, and view alarms triggered by the BGP service.</description>
    </item>
    
    <item>
      <title>VXLAN Routing</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/VXLAN_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/VXLAN_Routing/</guid>
      <description>VXLAN routing, sometimes referred to as inter-VXLAN routing, provides IP routing between VXLAN VNIs in overlay networks. The routing of traffic is based on the inner header or the overlay tenant IP address.
Because VXLAN routing is fundamentally routing, it is most commonly deployed with a control plane, such as Ethernet Virtual Private Network (EVPN). You can set up static routing too, either with or without the Cumulus Lightweight Network Virtualization (LNV) for MAC distribution and BUM handling.</description>
    </item>
    
    <item>
      <title>VXLAN Routing</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/VXLAN_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/VXLAN_Routing/</guid>
      <description>VXLAN routing, sometimes referred to as inter-VXLAN routing, provides IP routing between VXLAN VNIs in overlay networks. The routing of traffic is based on the inner header or the overlay tenant IP address.
Because VXLAN routing is fundamentally routing, it is most commonly deployed with a control plane, such as Ethernet Virtual Private Network (EVPN). You can set up static routing too, either with or without the Cumulus Lightweight Network Virtualization (LNV) for MAC distribution and BUM handling.</description>
    </item>
    
    <item>
      <title>Monitor the EVPN Service</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_EVPN_Service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_EVPN_Service/</guid>
      <description>The Cumulus NetQ UI enables operators to view the health of the EVPN service on a network-wide and a per session basis, giving greater insight into all aspects of the service. This is accomplished through two card workflows, one for the service and one for the session. They are described separately here.
Monitor the EVPN Service (All Sessions) With NetQ, you can monitor the number of nodes running the EVPN service, view switches with the sessions, total number of VNIs, and alarms triggered by the EVPN service.</description>
    </item>
    
    <item>
      <title>Redistribute Neighbor</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>Redistribute neighbor provides a mechanism for IP subnets to span racks without forcing the end hosts to run a routing protocol.
The fundamental premise behind redistribute neighbor is to announce individual host /32 routes in the routed fabric. Other hosts on the fabric can then use this new path to access the hosts in the fabric. If multiple equal-cost paths (ECMP) are available, traffic can load balance across the available paths natively.</description>
    </item>
    
    <item>
      <title>VXLAN Active-Active Mode</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/VXLAN_Active-Active_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/VXLAN_Active-Active_Mode/</guid>
      <description>VXLAN active-active mode allows a pair of MLAG switches to act as a single VTEP, providing active-active VXLAN termination for bare metal as well as virtualized workloads.
There are some differences whether you&amp;rsquo;re deploying this with EVPN or LNV. This chapter outlines the configurations for both options.
Terminology    Term Definition     VTEP The virtual tunnel endpoint. This is an encapsulation and decapsulation point for VXLANs.</description>
    </item>
    
    <item>
      <title>VXLAN Routing</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/VXLAN_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/VXLAN_Routing/</guid>
      <description>VXLAN routing, sometimes referred to as inter-VXLAN routing, provides IP routing between VXLAN VNIs in overlay networks. The routing of traffic is based on the inner header or the overlay tenant IP address.
Because VXLAN routing is fundamentally routing, it is most commonly deployed with a control plane, such as Ethernet Virtual Private Network (EVPN). You can set up static routing too, either with or without the Cumulus Lightweight Network Virtualization (LNV) for MAC distribution and BUM handling.</description>
    </item>
    
    <item>
      <title>Monitor the LLDP Service</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_LLDP_Service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_LLDP_Service/</guid>
      <description>The Cumulus NetQ UI enables operators to view the health of the LLDP service on a network-wide and a per session basis, giving greater insight into all aspects of the service. This is accomplished through two card workflows, one for the service and one for the session. They are described separately here.
Monitor the LLDP Service (All Sessions) With NetQ, you can monitor the number of nodes running the LLDP service, view nodes with the most LLDP neighbor nodes, those nodes with the least neighbor nodes, and view alarms triggered by the LLDP service.</description>
    </item>
    
    <item>
      <title>VXLAN Routing</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/VXLAN_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/VXLAN_Routing/</guid>
      <description>VXLAN routing, sometimes referred to as inter-VXLAN routing, provides IP routing between VXLAN VNIs in overlay networks. The routing of traffic is based on the inner header or the overlay tenant IP address.
Because VXLAN routing is fundamentally routing, it is most commonly deployed with a control plane, such as Ethernet Virtual Private Network (EVPN). You can set up static routing too, either with or without the Cumulus Lightweight Network Virtualization (LNV) for MAC distribution and BUM handling.</description>
    </item>
    
    <item>
      <title>VXLAN Scale</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/VXLAN_Scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/VXLAN_Scale/</guid>
      <description>On Broadcom Trident II and Tomahawk (but not Trident II+ or Maverick) and Mellanox Spectrum switches running Cumulus Linux, there is a limit on the amount of VXLANs you can configure simultaneously. The limit most often given is 2000 VXLANs that can be run, but network architects want to get more specific and know exactly the limit for their specific design.
The limit is a physical to virtual mappings where a switch can hold 15000 mappings in hardware before you encounter hash collisions.</description>
    </item>
    
    <item>
      <title>VXLAN Scale</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/VXLAN_Scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/VXLAN_Scale/</guid>
      <description>On Broadcom Trident II and Tomahawk (but not Trident II+ or Maverick) and Mellanox Spectrum switches running Cumulus Linux, there is a limit on the amount of VXLANs you can configure simultaneously. The limit most often given is 2000 VXLANs that can be run, but network architects want to get more specific and know exactly the limit for their specific design.
The limit is a physical to virtual mappings where a switch can hold 15000 mappings in hardware before you encounter hash collisions.</description>
    </item>
    
    <item>
      <title>Virtual Routing and Forwarding - VRF</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>Cumulus Linux provides virtual routing and forwarding (VRF) to allow for the presence of multiple independent routing tables working simultaneously on the same router or switch. This permits multiple network paths without the need for multiple switches. Think of this feature as VLAN for layer 3, but unlike VLANs, there is no field in the IP header carrying it. Other implementations call this feature VRF-Lite.
The primary use cases for VRF in a data center are similar to VLANs at layer 2: using common physical infrastructure to carry multiple isolated traffic streams for multi-tenant environments, where these streams are allowed to cross over only at configured boundary points, typically firewalls or IDS.</description>
    </item>
    
    <item>
      <title>Hybrid Cloud Connectivity with QinQ and VXLANs</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</guid>
      <description>QinQ is an amendment to the IEEE 802.1Q specification that provides the capability for multiple VLAN tags to be inserted into a single Ethernet frame.
The primary use case for QinQ with VXLAN is where a service provider who offers multi-tenant layer 2 connectivity between different customersâ€™ data centers (private clouds) may also need to connect those data centers to public cloud providers. Public clouds often has a mandatory QinQ handoff interface, where the outer tag is for the customer and the inner tag is for the service.</description>
    </item>
    
    <item>
      <title>Hybrid Cloud Connectivity with QinQ and VXLANs</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</guid>
      <description>QinQ is an amendment to the IEEE 802.1Q specification that provides the capability for multiple VLAN tags to be inserted into a single Ethernet frame.
The primary use case for QinQ with VXLAN is where a service provider who offers multi-tenant layer 2 connectivity between different customersâ€™ data centers (private clouds) may also need to connect those data centers to public cloud providers. Public clouds often has a mandatory QinQ handoff interface, where the outer tag is for the customer and the inner tag is for the service.</description>
    </item>
    
    <item>
      <title>Management VRF</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Cumulus_Linux_301/Layer_3_Features/</guid>
      <description>Management VRF â€” a subset of VRF (virtual routing tables and forwarding) â€” provides a separation between the out-of-band management network and the in-band data plane network. For all VRFs, the main routing table is the default table for all of the data plane switch ports. With management VRF, a second table, mgmt, is used for routing through eth0.
Cumulus Linux only supports eth0 as the management interface. VLAN subinterfaces, bonds, bridges and the front panel switch ports are not supported as management interfaces.</description>
    </item>
    
    <item>
      <title>Monitor the MLAG Service</title>
      <link>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_MLAG_Service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_NetQ/Cumulus_NetQ_UI_User_Guide/Monitor_the_Network/Monitor_Network_Protocols_and_Services/Monitor_the_MLAG_Service/</guid>
      <description>The Cumulus NetQ UI enables operators to view the health of the MLAG service on a network-wide and a per session basis, giving greater insight into all aspects of the service. This is accomplished through two card workflows, one for the service and one for the session. They are described separately here.
The Cumulus Linux implementation of MLAG is referred to by other vendors as CLAG, MC-LAG or VPC. The Cumulus NetQ UI uses the CLAG terminology.</description>
    </item>
    
    <item>
      <title>VXLAN Scale</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/VXLAN_Scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/VXLAN_Scale/</guid>
      <description>On Broadcom Trident II and Tomahawk switches running Cumulus Linux, there is a limit to the number of VXLANs you can configure simultaneously. The limit most often given is 2000 VXLANs, but you might want to get more specific and know exactly the limit for your specific design.
While this limitation does apply to Trident II+, Trident3, or Maverick ASICs, Cumulus Linux supports the same number of VXLANs on these ASICs as it does for Trident II or Tomahawk ASICs.</description>
    </item>
    
    <item>
      <title>VXLAN Scale</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/VXLAN_Scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/VXLAN_Scale/</guid>
      <description>On Broadcom Trident II and Tomahawk switches running Cumulus Linux, there is a limit to the number of VXLANs you can configure simultaneously. The limit most often given is 2000 VXLANs, but you might want to get more specific and know exactly the limit for your specific design.
While this limitation does apply to Trident II+ or Maverick ASICs, Cumulus Linux supports the same number of VXLANs on these ASICs as it does for Trident II or Tomahawk ASICs.</description>
    </item>
    
    <item>
      <title>Hybrid Cloud Connectivity with QinQ and VXLANs</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</guid>
      <description>QinQ is an amendment to the IEEE 802.1Q specification that provides the capability for multiple VLAN tags to be inserted into a single Ethernet frame.
The primary use case for QinQ with VXLAN is where a service provider who offers multi-tenant layer 2 connectivity between different customersâ€™ data centers (private clouds) may also need to connect those data centers to public cloud providers. Public clouds often has a mandatory QinQ handoff interface, where the outer tag is for the customer and the inner tag is for the service.</description>
    </item>
    
    <item>
      <title>Hybrid Cloud Connectivity with QinQ and VXLANs</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Hybrid_Cloud_Connectivity_with_QinQ_and_VXLANs/</guid>
      <description>QinQ is an amendment to the IEEE 802.1Q specification that provides the capability for multiple VLAN tags to be inserted into a single Ethernet frame.
The primary use case for QinQ with VXLAN is where a service provider who offers multi-tenant layer 2 connectivity between different customersâ€™ data centers (private clouds) may also need to connect those data centers to public cloud providers. Public clouds often has a mandatory QinQ handoff interface, where the outer tag is for the customer and the inner tag is for the service.</description>
    </item>
    
    <item>
      <title>Troubleshooting VXLANs</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Troubleshooting_VXLANs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Troubleshooting_VXLANs/</guid>
      <description>This topic discusses various ways you can verify and troubleshoot VXLANs.
Verify the Registration Node Daemon Use the vxrdctl vxlans ****command to see the configured VNIs, the local address being used to source the VXLAN tunnel, and the service node being used.
     cumulus@leaf1:~$ vxrdctl vxlans VNI Local Addr Svc Node === ========== ======== 10 10.2.1.1 10.2.1.3 30 10.2.1.1 10.2.1.3 2000 10.2.1.1 10.2.1.3   cumulus@leaf2:~$ vxrdctl vxlans VNI Local Addr Svc Node === ========== ======== 10 10.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Routing/</guid>
      <description>This chapter discusses routing on switches running Cumulus Linux.
Managing Static Routes You manage static routes using NCLU or the Cumulus Linux ip route command. The routes are added to the FRRouting routing table, and are then updated into the kernel routing table as well.
To add a static route, run:
 cumulus@switch:~$ net add routing route 203.0.113.0/24 198.51.100.2 cumulus@switch:~$ net pending cumulus@switch:~$ net commit  These commands create the following configuration in the /etc/frr/frr.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Routing/</guid>
      <description>This chapter discusses routing on switches running Cumulus Linux.
Managing Static Routes You manage static routes using NCLU or the Cumulus Linux ip route command. The routes are added to the FRRouting routing table, and are then updated into the kernel routing table as well.
To add a static route, run:
 cumulus@switch:~$ net add routing route 203.0.113.0/24 198.51.100.2 cumulus@switch:~$ net pending cumulus@switch:~$ net commit  These commands create the following configuration in the /etc/frr/frr.</description>
    </item>
    
    <item>
      <title>Single User Mode - Boot Recovery</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</guid>
      <description>Use single user mode to assist in troubleshooting system boot issues or for password recovery. Entering single user mode is platform-specific, so follow the appropriate steps for your x86 or ARM switch.
Entering Single User Mode on an x86 Switch  Boot the switch, as soon as you see the GRUB menu.
 GNU GRUB version 2.02~beta2-22+deb8u1 +----------------------------------------------------------------------------+ |*Cumulus Linux GNU/Linux | | Advanced options for Cumulus Linux GNU/Linux | | ONIE | | | +----------------------------------------------------------------------------+  Use the ^ and v arrow keys to select Advanced options for Cumulus Linux GNU/Linux.</description>
    </item>
    
    <item>
      <title>Introduction to Routing Protocols</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Introduction_to_Routing_Protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Introduction_to_Routing_Protocols/</guid>
      <description>This chapter discusses the various routing protocols, and how to configure them.
Defining Routing Protocols A routing protocol dynamically computes reachability between various end points. This enables communication to work around link and node failures, and additions and withdrawals of various addresses.
IP routing protocols are typically distributed; that is, an instance of the routing protocol runs on each of the routers in a network.
Cumulus Linux does not support running multiple instances of the same protocol on a router.</description>
    </item>
    
    <item>
      <title>Introduction to Routing Protocols</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Introduction_to_Routing_Protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Introduction_to_Routing_Protocols/</guid>
      <description>This chapter discusses the various routing protocols, and how to configure them.
Defining Routing Protocols A routing protocol dynamically computes reachability between various end points. This enables communication to work around link and node failures, and additions and withdrawals of various addresses.
IP routing protocols are typically distributed; that is, an instance of the routing protocol runs on each of the routers in a network.
Cumulus Linux does not support running multiple instances of the same protocol on a router.</description>
    </item>
    
    <item>
      <title>Resource Diagnostics Using cl-resource-query</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</guid>
      <description>You can use cl-resource-queryto retrieve information about host entries, MAC entries, L2 and L3 routes, and ECMPs (equal-cost multi-path routes, see Load Balancing) that are in use. This is especially useful because Cumulus Linux syncs routes between the kernel and the switching silicon. If the required resource pools in hardware fill up, new kernel routes can cause existing routes to move from being fully allocated to being partially allocated.
In order to avoid this, routes in the hardware should be monitored and kept below the ASIC limits.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Routing/</guid>
      <description>This chapter discusses routing on switches running Cumulus Linux.
Managing Static Routes You manage static routes using NCLU or the Cumulus Linux ip route command. The routes are added to the FRRouting routing table, and are then updated into the kernel routing table as well.
To add a static route, run:
 cumulus@switch:~$ net add routing route 203.0.113.0/24 198.51.100.2 cumulus@switch:~$ net pending cumulus@switch:~$ net commit  These commands create the following configuration in the /etc/frr/frr.</description>
    </item>
    
    <item>
      <title>Introduction to Routing Protocols</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Introduction_to_Routing_Protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Introduction_to_Routing_Protocols/</guid>
      <description>This chapter discusses the various routing protocols, and how to configure them.
Defining Routing Protocols A routing protocol dynamically computes reachability between various end points. This enables communication to work around link and node failures, and additions and withdrawals of various addresses.
IP routing protocols are typically distributed; that is, an instance of the routing protocol runs on each of the routers in a network.
Cumulus Linux does not support running multiple instances of the same protocol on a router.</description>
    </item>
    
    <item>
      <title>Monitoring System Hardware</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</guid>
      <description>You monitor system hardware in these ways, using:
 decode-syseeprom
 sensors
 smond
 Net-SNMP
 watchdog
  Commands  decode-syseeprom
 dmidecode
 lshw
 sensors
 smond
  Monitoring Hardware Using decode-syseeprom The decode-syseeprom command enables you to retrieve information about the switch&amp;rsquo;s EEPROM. If the EEPROM is writable, you can set values on the EEPROM.
For example:
cumulus@switch:~$ decode-syseeprom TlvInfo Header: Id String: TlvInfo Version: 1 Total Length: 114 TLV Name Code Len Value -------------------- ---- --- ----- Product Name 0x21 4 4804 Part Number 0x22 14 R0596-F0009-00 Device Version 0x26 1 2 Serial Number 0x23 19 D1012023918PE000012 Manufacture Date 0x25 19 10/09/2013 20:39:02 Base MAC Address 0x24 6 00:E0:EC:25:7B:D0 MAC Addresses 0x2A 2 53 Vendor Name 0x2D 17 Penguin Computing Label Revision 0x27 4 4804 Manufacture Country 0x2C 2 CN CRC-32 0xFE 4 0x96543BC5 (checksum valid)  Command Options Usage: /usr/cumulus/bin/decode-syseeprom [-a][-r][-s [args]][-t]</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Network_Topology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Network_Topology/</guid>
      <description>In computer networks, topology refers to the structure of interconnecting various nodes. Some commonly used topologies in networks are star, hub and spoke, leaf and spine, and broadcast.
Clos Topologies In the vast majority of modern data centers, Clos or fat tree topology is very popular. This topology is shown in the figure below. It is also commonly referred to as leaf-spine topology. We shall use this topology throughout the routing protocol guide.</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Network_Topology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Network_Topology/</guid>
      <description>In computer networks, topology refers to the structure of interconnecting various nodes. Some commonly used topologies in networks are star, hub and spoke, leaf and spine, and broadcast.
Clos Topologies In the vast majority of modern data centers, Clos or fat tree topology is very popular. This topology is shown in the figure below. It is also commonly referred to as leaf-spine topology. We shall use this topology throughout the routing protocol guide.</description>
    </item>
    
    <item>
      <title>Monitoring Virtual Device Counters</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</guid>
      <description>Cumulus Linux gathers statistics for VXLANs and VLANs using virtual device counters. These counters are supported on Tomahawk, Trident II+ and Trident II-based platforms only; see the Cumulus Networks HCL for a list of supported platforms.
You can retrieve the data from these counters using tools like ip -s link show, ifconfig, /proc/net/dev, or netstat -i.
Sample VXLAN Statistics VXLAN statistics are available as follows:
 Aggregate statistics are available per VNI; this includes access and network statistics.</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Network_Topology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Network_Topology/</guid>
      <description>In computer networks, topology refers to the structure of interconnecting various nodes. Some commonly used topologies in networks are star, hub and spoke, leaf and spine, and broadcast.
Clos Topologies In the vast majority of modern data centers, Clos or fat tree topology is very popular. This topology is shown in the figure below. It is also commonly referred to as leaf-spine topology. We shall use this topology throughout the routing protocol guide.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Routing/</guid>
      <description>This chapter discusses routing on switches running Cumulus Linux.
Manage Static Routes You manage static routes using NCLU or the Cumulus Linux ip route command. The routes are added to the FRRouting routing table, and are then updated into the kernel routing table as well.
To add a static route, run:
 cumulus@switch:~$ net add routing route 203.0.113.0/24 198.51.100.2 cumulus@switch:~$ net pending cumulus@switch:~$ net commit  These commands create the following configuration in the /etc/frr/frr.</description>
    </item>
    
    <item>
      <title>Introduction to Routing Protocols</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Introduction_to_Routing_Protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Introduction_to_Routing_Protocols/</guid>
      <description>This chapter discusses the various routing protocols, and how to configure them.
Routing Protocols A routing protocol dynamically computes reachability between various end points. This enables communication to work around link and node failures, and additions and withdrawals of various addresses.
IP routing protocols are typically distributed; that is, an instance of the routing protocol runs on each of the routers in a network.
Cumulus Linux does not support running multiple instances of the same protocol on a router.</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Network_Topology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Network_Topology/</guid>
      <description>In computer networks, topology refers to the structure of interconnecting various nodes. Some commonly used topologies in networks are star, hub and spoke, leaf and spine, and broadcast.
Clos Topologies In the vast majority of modern data centers, Clos or fat tree topology is very popular. This topology is shown in the figure below. It is also commonly referred to as leaf-spine topology. We shall use this topology throughout the routing protocol guide.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First - OSPF - Protocol</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Open_Shortest_Path_First_-_OSPF_-_Protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Open_Shortest_Path_First_-_OSPF_-_Protocol/</guid>
      <description>OSPFv2 is a link-state routing protocol for IPv4. OSPF maintains the view of the network topology conceptually as a directed graph. Each router represents a vertex in the graph. Each link between neighboring routers represents a unidirectional edge. Each link has an associated weight (called cost) that is either automatically derived from its bandwidth or administratively assigned. Using the weighted topology graph, each router computes a shortest path tree (SPT) with itself as the root, and applies the results to build its forwarding table.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First - OSPF - Protocol</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Open_Shortest_Path_First_-_OSPF_-_Protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Open_Shortest_Path_First_-_OSPF_-_Protocol/</guid>
      <description>OSPFv2 is a link-state routing protocol for IPv4. OSPF maintains the view of the network topology conceptually as a directed graph. Each router represents a vertex in the graph. Each link between neighboring routers represents a unidirectional edge. Each link has an associated weight (called cost) that is either automatically derived from its bandwidth or administratively assigned. Using the weighted topology graph, each router computes a shortest path tree (SPT) with itself as the root, and applies the results to build its forwarding table.</description>
    </item>
    
    <item>
      <title>Address Resolution Protocol - ARP</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Address_Resolution_Protocol_-_ARP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Address_Resolution_Protocol_-_ARP/</guid>
      <description>Address Resolution Protocol ( ARP ) is a communication protocol used for discovering the link layer address, such as a MAC address , associated with a given network layer address . ARP is defined by RFC 826. The Cumulus Linux ARP implementation differs from standard Debian Linux ARP behavior in a few ways because Cumulus Linux is an operating system for routers/switches rather than servers. This chapter describes the differences in ARP behavior, why the changes were made, where the changes were implemented, and how to change port-specific values.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First v3 - OSPFv3 - Protocol</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3_-_Protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3_-_Protocol/</guid>
      <description>OSPFv3 is a revised version of OSPFv2 to support the IPv6 address family. Refer to Open Shortest Path First (OSPF) Protocol for a discussion on the basic concepts, which remain the same between the two versions.
OSPFv3 has changed the formatting in some of the packets and LSAs either as a necessity to support IPv6 or to improve the protocol behavior based on OSPFv2 experience. Most notably, v3 defines a new LSA, called intra-area prefix LSA to separate out the advertisement of stub networks attached to a router from the router LSA.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First v3 - OSPFv3 - Protocol</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3_-_Protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3_-_Protocol/</guid>
      <description>OSPFv3 is a revised version of OSPFv2 to support the IPv6 address family. Refer to Open Shortest Path First (OSPF) Protocol for a discussion on the basic concepts, which remain the same between the two versions.
OSPFv3 has changed the formatting in some of the packets and LSAs either as a necessity to support IPv6 or to improve the protocol behavior based on OSPFv2 experience. Most notably, v3 defines a new LSA, called intra-area prefix LSA to separate out the advertisement of stub networks attached to a router from the router LSA.</description>
    </item>
    
    <item>
      <title>Border Gateway Protocol - BGP</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Border_Gateway_Protocol_-_BGP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Border_Gateway_Protocol_-_BGP/</guid>
      <description>BGP is the routing protocol that runs the Internet. It is an increasingly popular protocol for use in the data center as it lends itself well to the rich interconnections in a Clos topology. Specifically, BGP:
 Does not require routing state to be periodically refreshed, unlike OSPF.
 Is less chatty than its link-state siblings. For example, a link or node transition can result in a bestpath change, causing BGP to send updates.</description>
    </item>
    
    <item>
      <title>Border Gateway Protocol - BGP</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Border_Gateway_Protocol_-_BGP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Border_Gateway_Protocol_-_BGP/</guid>
      <description>BGP is the routing protocol that runs the Internet. It is an increasingly popular protocol for use in the data center as it lends itself well to the rich interconnections in a Clos topology. Specifically, BGP:
 Does not require routing state to be periodically refreshed, unlike OSPF.
 Is less chatty than its link-state siblings. For example, a link or node transition can result in a bestpath change, causing BGP to send updates.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First - OSPF - Protocol</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Open_Shortest_Path_First_-_OSPF_-_Protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Open_Shortest_Path_First_-_OSPF_-_Protocol/</guid>
      <description>OSPFv2 is a link-state routing protocol for IPv4. OSPF maintains the view of the network topology conceptually as a directed graph. Each router represents a vertex in the graph. Each link between neighboring routers represents a unidirectional edge. Each link has an associated weight (called cost) that is either automatically derived from its bandwidth or administratively assigned. Using the weighted topology graph, each router computes a shortest path tree (SPT) with itself as the root, and applies the results to build its forwarding table.</description>
    </item>
    
    <item>
      <title>SNMP Monitoring</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/</guid>
      <description>Cumulus Linux utilizes the open source Net-SNMP agent snmpd, v5.7.3, which provides support for most of the common industry-wide MIBs, including interface counters and TCP/UDP IP stack data.
Cumulus Linux does not prevent customers from extending SNMP features. However, Cumulus Networks encourages the use of higher performance monitoring environments, rather than SNMP.
 Introduction to SNMP (Simple Network Management Protocol) SNMP is an IETF standards-based network management architecture and protocol that traces its roots back to Carnegie-Mellon University in 1982.</description>
    </item>
    
    <item>
      <title>Address Resolution Protocol - ARP</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Address_Resolution_Protocol_-_ARP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Address_Resolution_Protocol_-_ARP/</guid>
      <description>Address Resolution Protocol ( ARP ) is a communication protocol used for discovering the link layer address, such as a MAC address , associated with a given network layer address . ARP is defined by RFC 826. The Cumulus Linux ARP implementation differs from standard Debian Linux ARP behavior in a few ways because Cumulus Linux is an operating system for routers/switches rather than servers. This chapter describes the differences in ARP behavior, why the changes were made, where the changes were implemented, and how to change port-specific values.</description>
    </item>
    
    <item>
      <title>Bidirectional Forwarding Detection - BFD</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</guid>
      <description>Bidirectional Forwarding Detection (BFD) provides low overhead and rapid detection of failures in the paths between two network devices. It provides a unified mechanism for link detection over all media and protocol layers. Use BFD to detect failures for IPv4 and IPv6 single or multihop paths between any two network devices, including unidirectional path failure detection.
Cumulus Linux does not support demand mode in BFD.
 Using BFD Multihop Routed Paths BFD multihop sessions are built over arbitrary paths between two systems, which results in some complexity that does not exist for single hop sessions.</description>
    </item>
    
    <item>
      <title>Bidirectional Forwarding Detection - BFD</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</guid>
      <description>Bidirectional Forwarding Detection (BFD) provides low overhead and rapid detection of failures in the paths between two network devices. It provides a unified mechanism for link detection over all media and protocol layers. Use BFD to detect failures for IPv4 and IPv6 single or multihop paths between any two network devices, including unidirectional path failure detection.
Cumulus Linux does not support demand mode in BFD.
 Using BFD Multihop Routed Paths BFD multihop sessions are built over arbitrary paths between two systems, which results in some complexity that does not exist for single hop sessions.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First v3 - OSPFv3 - Protocol</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3_-_Protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3_-_Protocol/</guid>
      <description>OSPFv3 is a revised version of OSPFv2 to support the IPv6 address family. Refer to Open Shortest Path First (OSPF) Protocol for a discussion on the basic concepts, which remain the same between the two versions.
OSPFv3 has changed the formatting in some of the packets and LSAs either as a necessity to support IPv6 or to improve the protocol behavior based on OSPFv2 experience. Most notably, v3 defines a new LSA, called intra-area prefix LSA to separate out the advertisement of stub networks attached to a router from the router LSA.</description>
    </item>
    
    <item>
      <title>Border Gateway Protocol - BGP</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Border_Gateway_Protocol_-_BGP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Border_Gateway_Protocol_-_BGP/</guid>
      <description>BGP is the routing protocol that runs the Internet. It is an increasingly popular protocol for use in the data center as it lends itself well to the rich interconnections in a Clos topology. Specifically, BGP:
 Does not require routing state to be periodically refreshed, unlike OSPF.
 Is less chatty than its link-state siblings. For example, a link or node transition can result in a bestpath change, causing BGP to send updates.</description>
    </item>
    
    <item>
      <title>Equal Cost Multipath Load Sharing - Hardware ECMP</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</guid>
      <description>Cumulus Linux supports hardware-based equal cost multipath (ECMP) load sharing. ECMP is enabled by default in Cumulus Linux. Load sharing occurs automatically for all routes with multiple next hops installed. ECMP load sharing supports both IPv4 and IPv6 routes.
Understanding Equal Cost Routing ECMP operates only on equal cost routes in the Linux routing table.
In this example, the 10.1.1.0/24 route has two possible next hops that have been installed in the routing table:</description>
    </item>
    
    <item>
      <title>Equal Cost Multipath Load Sharing - Hardware ECMP</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</guid>
      <description>Cumulus Linux supports hardware-based equal cost multipath (ECMP) load sharing. ECMP is enabled by default in Cumulus Linux. Load sharing occurs automatically for all routes with multiple next hops installed. ECMP load sharing supports both IPv4 and IPv6 routes.
Understanding Equal Cost Routing ECMP operates only on equal cost routes in the Linux routing table.
In this example, the 10.1.1.0/24 route has two possible next hops that have been installed in the routing table:</description>
    </item>
    
    <item>
      <title>Open Shortest Path First - OSPF</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Open_Shortest_Path_First_-_OSPF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Open_Shortest_Path_First_-_OSPF/</guid>
      <description>OSPF maintains the view of the network topology conceptually as a directed graph. Each router represents a vertex in the graph. Each link between neighboring routers represents a unidirectional edge and each link has an associated weight (called cost) that is either automatically derived from its bandwidth or administratively assigned. Using the weighted topology graph, each router computes a shortest path tree (SPT) with itself as the root, and applies the results to build its forwarding table.</description>
    </item>
    
    <item>
      <title>Open Shortest Path First v3 - OSPFv3</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Open_Shortest_Path_First_v3_-_OSPFv3/</guid>
      <description>OSPFv3 is a revised version of OSPFv2 to support the IPv6 address family. Refer to Open Shortest Path First (OSPF) Protocol for a discussion on the basic concepts, which remain the same between the two versions.
OSPFv3 has changed the formatting in some of the packets and LSAs either as a necessity to support IPv6 or to improve the protocol behavior based on OSPFv2 experience. Most notably, v3 defines a new LSA, called intra-area prefix LSA to separate out the advertisement of stub networks attached to a router from the router LSA.</description>
    </item>
    
    <item>
      <title>Policy-based Routing</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Policy-based_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Policy-based_Routing/</guid>
      <description>Typical routing systems and protocols forward traffic based on the destination address in the packet, which is used to look up an entry in a routing table. However, sometimes the traffic on your network requires a more hands-on approach. You might need to forward a packet based on the source address, the packet size, or other information in the packet header.
Policy-based routing (PBR) lets you make routing decisions based on filters that change the routing behavior of specific traffic so that you can override the routing table and influence where the traffic goes.</description>
    </item>
    
    <item>
      <title>Redistribute Neighbor</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Redistribute_Neighbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Redistribute_Neighbor/</guid>
      <description>Redistribute neighbor provides a mechanism for IP subnets to span racks without forcing the end hosts to run a routing protocol.
The fundamental premise behind redistribute neighbor is to announce individual host /32 routes in the routed fabric. Other hosts on the fabric can then use this new path to access the hosts in the fabric. If multiple equal-cost paths (ECMP) are available, traffic can load balance across the available paths natively.</description>
    </item>
    
    <item>
      <title>Redistribute Neighbor</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Redistribute_Neighbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Redistribute_Neighbor/</guid>
      <description>Redistribute neighbor provides a mechanism for IP subnets to span racks without forcing the end hosts to run a routing protocol.
The fundamental premise behind redistribute neighbor is to announce individual host /32 routes in the routed fabric. Other hosts on the fabric can then use this new path to access the hosts in the fabric. If multiple equal-cost paths (ECMP) are available, traffic can load balance across the available paths natively.</description>
    </item>
    
    <item>
      <title>Bidirectional Forwarding Detection - BFD</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</guid>
      <description>Bidirectional Forwarding Detection (BFD) provides low overhead and rapid detection of failures in the paths between two network devices. It provides a unified mechanism for link detection over all media and protocol layers. Use BFD to detect failures for IPv4 and IPv6 single or multihop paths between any two network devices, including unidirectional path failure detection.
Cumulus Linux does not support demand mode in BFD.
 Using BFD Multihop Routed Paths BFD multihop sessions are built over arbitrary paths between two systems, which results in some complexity that does not exist for single hop sessions.</description>
    </item>
    
    <item>
      <title>Border Gateway Protocol - BGP</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Border_Gateway_Protocol_-_BGP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Border_Gateway_Protocol_-_BGP/</guid>
      <description>BGP is the routing protocol that runs the Internet. It is an increasingly popular protocol for use in the data center as it lends itself well to the rich interconnections in a Clos topology. Specifically, BGP:
 Does not require the routing state to be periodically refreshed, unlike OSPF.
 Is less chatty than its link-state siblings. For example, a link or node transition can result in a bestpath change, causing BGP to send updates.</description>
    </item>
    
    <item>
      <title>Virtual Routing and Forwarding - VRF</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</guid>
      <description>Cumulus Linux provides virtual routing and forwarding (VRF) to allow for the presence of multiple independent routing tables working simultaneously on the same router or switch. This permits multiple network paths without the need for multiple switches. Think of this feature as VLAN for layer 3, but unlike VLANs, there is no field in the IP header carrying it. Other implementations call this feature VRF-Lite.
The primary use cases for VRF in a data center are similar to VLANs at layer 2: using common physical infrastructure to carry multiple isolated traffic streams for multi-tenant environments, where these streams are allowed to cross over only at configured boundary points, typically firewalls or IDS.</description>
    </item>
    
    <item>
      <title>Virtual Routing and Forwarding - VRF</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</guid>
      <description>Cumulus Linux provides virtual routing and forwarding (VRF) to allow for the presence of multiple independent routing tables working simultaneously on the same router or switch. This permits multiple network paths without the need for multiple switches. Think of this feature as VLAN for layer 3, but unlike VLANs, there is no field in the IP header carrying it. Other implementations call this feature VRF-Lite.
The primary use cases for VRF in a data center are similar to VLANs at layer 2: using common physical infrastructure to carry multiple isolated traffic streams for multi-tenant environments, where these streams are allowed to cross over only at configured boundary points, typically firewalls or IDS.</description>
    </item>
    
    <item>
      <title>Equal Cost Multipath Load Sharing - Hardware ECMP</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</guid>
      <description>Cumulus Linux supports hardware-based equal cost multipath (ECMP) load sharing. ECMP is enabled by default in Cumulus Linux. Load sharing occurs automatically for all routes with multiple next hops installed. ECMP load sharing supports both IPv4 and IPv6 routes.
Understanding Equal Cost Routing ECMP operates only on equal cost routes in the Linux routing table.
In this example, the 10.1.1.0/24 route has two possible next hops that have been installed in the routing table:</description>
    </item>
    
    <item>
      <title>Management VRF</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Management_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Management_VRF/</guid>
      <description>Management VRF is a subset of VRF (virtual routing tables and forwarding) and provides a separation between the out-of-band management network and the in-band data plane network. For all VRFs, the main routing table is the default table for all of the data plane switch ports. With management VRF, a second table, mgmt, is used for routing through the Ethernet ports of the switch. The mgmt name is special cased to identify the management VRF from a data plane VRF.</description>
    </item>
    
    <item>
      <title>Management VRF</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Management_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Management_VRF/</guid>
      <description>Management VRF is a subset of VRF (virtual routing tables and forwarding) and provides a separation between the out-of-band management network and the in-band data plane network. For all VRFs, the main routing table is the default table for all of the data plane switch ports. With management VRF, a second table, mgmt, is used for routing through the Ethernet ports of the switch. The mgmt name is special cased to identify the management VRF from a data plane VRF.</description>
    </item>
    
    <item>
      <title>Policy-based Routing</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Policy-based_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Policy-based_Routing/</guid>
      <description>Typical routing systems and protocols forward traffic based on the destination address in the packet, which is used to look up an entry in a routing table. However, sometimes the traffic on your network requires a more hands-on approach. You might need to forward a packet based on the source address, the packet size, or other information in the packet header.
Policy-based routing (PBR) lets you make routing decisions based on filters that change the routing behavior of specific traffic so that you can override the routing table and influence where the traffic goes.</description>
    </item>
    
    <item>
      <title>Bidirectional Forwarding Detection - BFD</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Bidirectional_Forwarding_Detection_-_BFD/</guid>
      <description>Bidirectional Forwarding Detection (BFD) provides low overhead and rapid detection of failures in the paths between two network devices. It provides a unified mechanism for link detection over all media and protocol layers. Use BFD to detect failures for IPv4 and IPv6 single or multihop paths between any two network devices, including unidirectional path failure detection.
Cumulus Linux does not support demand mode in BFD.
 BFD Multihop Routed Paths BFD multihop sessions are built over arbitrary paths between two systems, which results in some complexity that does not exist for single hop sessions.</description>
    </item>
    
    <item>
      <title>Cumulus Networks Services Demos</title>
      <link>http://example.org/version/Cumulus_Linux_301/Network_Solutions/Cumulus_Linux_301/Network_Solutions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Network_Solutions/Cumulus_Linux_301/Network_Solutions/</guid>
      <description>The Cumulus Networks Services team demos provide a virtual environment built using either VirtualBox or libvirt using Vagrant to manage the VMs. This environment utilizes the reference topology shown below. Vagrant and Cumulus VX can be used together to build virtual simulations of production networks to validate configurations, develop automation code and simulate failure scenarios.
Contents Reference Topology The Cumulus Networks reference topology includes cabling (in DOT format for dual use with PTM), MAC addressing, IP addressing, switches and servers.</description>
    </item>
    
    <item>
      <title>Protocol Independent Multicast - PIM</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Protocol_Independent_Multicast_-_PIM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Protocol_Independent_Multicast_-_PIM/</guid>
      <description>Protocol Independent Multicast (PIM) is a multicast control plane protocol, that advertises multicast sources and receivers over a routed layer 3 network. Layer 3 multicast relies on PIM to advertise information about multicast capable routers and the location of multicast senders and receivers. For this reason, multicast cannot be sent through a routed network without PIM.
PIM has two modes of operation: Sparse Mode (PIM-SM) and Dense Mode (PIM-DM).</description>
    </item>
    
    <item>
      <title>Protocol Independent Multicast - PIM</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Protocol_Independent_Multicast_-_PIM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Protocol_Independent_Multicast_-_PIM/</guid>
      <description>Protocol Independent Multicast (PIM) is a multicast control plane protocol, that advertises multicast sources and receivers over a routed layer 3 network. Layer 3 multicast relies on PIM to advertise information about multicast capable routers and the location of multicast senders and receivers. For this reason, multicast cannot be sent through a routed network without PIM.
PIM has two modes of operation: Sparse Mode (PIM-SM) and Dense Mode (PIM-DM).</description>
    </item>
    
    <item>
      <title>Redistribute Neighbor</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Redistribute_Neighbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Redistribute_Neighbor/</guid>
      <description>Redistribute neighbor provides a mechanism for IP subnets to span racks without forcing the end hosts to run a routing protocol.
The fundamental premise behind redistribute neighbor is to announce individual host /32 routes in the routed fabric. Other hosts on the fabric can then use this new path to access the hosts in the fabric. If multiple equal-cost paths (ECMP) are available, traffic can load balance across the available paths natively.</description>
    </item>
    
    <item>
      <title>Docker on Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_301/Network_Solutions/Cumulus_Linux_301/Network_Solutions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Network_Solutions/Cumulus_Linux_301/Network_Solutions/</guid>
      <description>Cumulus Linux 3.0 is based on Linux kernel 4.1, which supports the Docker engine. This means you can install Docker directly on a Cumulus Linux switch and you can run Docker containers natively on the switch.
 cumulus@switch:~$ uname -r 4.1.0-cl-1-amd64  Contents Installing Docker Before installing Docker, add the Debian Jessie apt repository to Cumulus Linux:
 cumulus@switch:~$ echo &amp;quot;deb http://ftp.us.debian.org/debian/ jessie main contrib non-free&amp;quot; | sudo tee -a /etc/apt/sources.</description>
    </item>
    
    <item>
      <title>Equal Cost Multipath Load Sharing - Hardware ECMP</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Equal_Cost_Multipath_Load_Sharing_-_Hardware_ECMP/</guid>
      <description>Cumulus Linux supports hardware-based equal cost multipath (ECMP) load sharing. ECMP is enabled by default in Cumulus Linux. Load sharing occurs automatically for all routes with multiple next hops installed. ECMP load sharing supports both IPv4 and IPv6 routes.
Equal Cost Routing ECMP operates only on equal cost routes in the Linux routing table.
In this example, the 10.1.1.0/24 route has two possible next hops that have been installed in the routing table:</description>
    </item>
    
    <item>
      <title>Segment Routing</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Segment_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Segment_Routing/</guid>
      <description>Cumulus Linux supports segment routing, otherwise known as source routing, as it provides the ability for a source node to specify the path a packet should take â€” in other words, traffic engineering. In some more advanced cases, it could be used to have offline multiprotocol label switching (MPLS) controllers program labels into the network for traffic engineering.
Cumulus Linux provides full label-based forwarding, relying on BGP for label exchange.</description>
    </item>
    
    <item>
      <title>Segment Routing</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Segment_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Segment_Routing/</guid>
      <description>Cumulus Linux supports segment routing, otherwise known as source routing, as it provides the ability for a source node to specify the path a packet should take â€” in other words, traffic engineering. In some more advanced cases, it could be used to have offline multiprotocol label switching (MPLS) controllers program labels into the network for traffic engineering.
Cumulus Linux provides full label-based forwarding, relying on BGP for label exchange.</description>
    </item>
    
    <item>
      <title>Virtual Routing and Forwarding - VRF</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</guid>
      <description>Cumulus Linux provides virtual routing and forwarding (VRF) to allow for the presence of multiple independent routing tables working simultaneously on the same router or switch. This permits multiple network paths without the need for multiple switches. Think of this feature as VLAN for layer 3, but unlike VLANs, there is no field in the IP header carrying it. Other implementations call this feature VRF-Lite.
The primary use cases for VRF in a data center are similar to VLANs at layer 2: using common physical infrastructure to carry multiple isolated traffic streams for multi-tenant environments, where these streams are allowed to cross over only at configured boundary points, typically firewalls or IDS.</description>
    </item>
    
    <item>
      <title>Management VRF</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Management_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Management_VRF/</guid>
      <description>Management VRF is a subset of VRF (virtual routing tables and forwarding) and provides a separation between the out-of-band management network and the in-band data plane network. For all VRFs, the main routing table is the default table for all of the data plane switch ports. With management VRF, a second table, mgmt, is used for routing through the Ethernet ports of the switch. The mgmt name is special cased to identify the management VRF from a data plane VRF.</description>
    </item>
    
    <item>
      <title>Redistribute Neighbor</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Redistribute_Neighbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Redistribute_Neighbor/</guid>
      <description>Redistribute neighbor provides a mechanism for IP subnets to span racks without forcing the end hosts to run a routing protocol.
The fundamental premise behind redistribute neighbor is to announce individual host /32 routes in the routed fabric. Other hosts on the fabric can then use this new path to access the hosts in the fabric. If multiple equal-cost paths (ECMP) are available, traffic can load balance across the available paths natively.</description>
    </item>
    
    <item>
      <title>GRE Tunneling</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/GRE_Tunneling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/GRE_Tunneling/</guid>
      <description>GRE Tunneling is an early access feature in Cumulus Linux 3.6.
 Generic Routing Encapsulation (GRE) is a tunneling protocol that encapsulates network layer protocols inside virtual point-to-point links over an Internet Protocol network. The two endpoints are identified by the tunnel source and tunnel destination addresses at each endpoint.
GRE packets travel directly between the two endpoints through a virtual tunnel. As a packet comes across other routers, there is no interaction with its payload; the routers only parse the outer IP packet.</description>
    </item>
    
    <item>
      <title>Virtual Routing and Forwarding - VRF</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Virtual_Routing_and_Forwarding_-_VRF/</guid>
      <description>Cumulus Linux provides virtual routing and forwarding (VRF) to allow for the presence of multiple independent routing tables working simultaneously on the same router or switch. This permits multiple network paths without the need for multiple switches. Think of this feature as VLAN for layer 3, but unlike VLANs, there is no field in the IP header carrying it. Other implementations call this feature VRF-Lite.
The primary use cases for VRF in a data center are similar to VLANs at layer 2: using common physical infrastructure to carry multiple isolated traffic streams for multi-tenant environments, where these streams are allowed to cross over only at configured boundary points, typically firewalls or IDS.</description>
    </item>
    
    <item>
      <title>Management VRF</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Management_VRF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Management_VRF/</guid>
      <description>Management VRF is a subset of VRF (virtual routing tables and forwarding) and provides a separation between the out-of-band management network and the in-band data plane network. For all VRFs, the main routing table is the default table for all of the data plane switch ports. With management VRF, a second table, mgmt, is used for routing through the Ethernet ports of the switch. The mgmt name is special cased to identify the management VRF from a data plane VRF.</description>
    </item>
    
    <item>
      <title>Protocol Independent Multicast - PIM</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Protocol_Independent_Multicast_-_PIM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Protocol_Independent_Multicast_-_PIM/</guid>
      <description>Protocol Independent Multicast (PIM) is a multicast control plane protocol that advertises multicast sources and receivers over a routed layer 3 network. Layer 3 multicast relies on PIM to advertise information about multicast capable routers, and the location of multicast senders and receivers. For this reason, multicast cannot be sent through a routed network without PIM.
PIM has two modes of operation: Sparse Mode (PIM-SM) and Dense Mode (PIM-DM).</description>
    </item>
    
    <item>
      <title>GRE Tunneling</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/GRE_Tunneling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/GRE_Tunneling/</guid>
      <description>GRE Tunneling is an early access feature.
 Generic Routing Encapsulation (GRE) is a tunneling protocol that encapsulates network layer protocols inside virtual point-to-point links over an Internet Protocol network. The two endpoints are identified by the tunnel source and tunnel destination addresses at each endpoint.
GRE packets travel directly between the two endpoints through a virtual tunnel. As a packet comes across other routers, there is no interaction with its payload; the routers only parse the outer IP packet.</description>
    </item>
    
    <item>
      <title>Segment Routing</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Segment_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Segment_Routing/</guid>
      <description>Cumulus Linux supports segment routing, also known as source routing, which provides the ability for a source node to specify the path a packet should take (traffic engineering). In some more advanced cases, you can use segment routing to have offline multiprotocol label switching (MPLS) controllers program labels into the network for traffic engineering.
Cumulus Linux provides full label-based forwarding, relying on BGP for label exchange. However, Cumulus Linux does not provide LDP interoperability for MPLS and it does not support VRFs for tenant isolation.</description>
    </item>
    
    <item>
      <title>Protocol Independent Multicast - PIM</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Protocol_Independent_Multicast_-_PIM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Protocol_Independent_Multicast_-_PIM/</guid>
      <description>Protocol Independent Multicast (PIM) is a multicast control plane protocol that advertises multicast sources and receivers over a routed layer 3 network. Layer 3 multicast relies on PIM to advertise information about multicast capable routers, and the location of multicast senders and receivers. For this reason, multicast cannot be sent through a routed network without PIM.
PIM has two modes of operation: Sparse Mode (PIM-SM) and Dense Mode (PIM-DM).</description>
    </item>
    
    <item>
      <title>Installing a New Cumulus Linux Image</title>
      <link>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/</guid>
      <description>Before you install Cumulus Linux, the switch can be in two different states:
 The switch has no image on it (so the switch is only running ONIE) or you desire or require a clean installation. In this case, you can install Cumulus Linux in one of the following ways, using:
 DHCP/a Web server with DHCP options
 DHCP/a Web server without DHCP options
 A Web server with no DHCP</description>
    </item>
    
    <item>
      <title>Segment Routing</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Segment_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Segment_Routing/</guid>
      <description>Segment routing is an early access feature in Cumulus Linux and is supported only on Mellanox switches.
 Cumulus Linux supports segment routing, also known as source routing, which provides the ability for a source node to specify the path a packet should take (traffic engineering). In some more advanced cases, you can use segment routing to have offline multiprotocol label switching (MPLS) controllers program labels into the network for traffic engineering.</description>
    </item>
    
    <item>
      <title>Single User Mode - Boot Recovery</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</guid>
      <description>Use single user mode to assist in troubleshooting system boot issues or for password recovery. To enter single user mode, follow the steps below.
 Boot the switch, as soon as you see the GRUB menu.
 GNU GRUB version 2.02~beta2-22+deb8u1 +----------------------------------------------------------------------------+ |*Cumulus Linux GNU/Linux | | Advanced options for Cumulus Linux GNU/Linux | | ONIE | | | +----------------------------------------------------------------------------+  Use the ^ and v arrow keys to select Advanced options for Cumulus Linux GNU/Linux.</description>
    </item>
    
    <item>
      <title>Single User Mode - Boot Recovery</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</guid>
      <description>Use single user mode to assist in troubleshooting system boot issues or for password recovery. To enter single user mode, follow the steps below.
 Boot the switch, as soon as you see the GRUB menu.
 GNU GRUB version 2.02~beta2-22+deb8u1 +----------------------------------------------------------------------------+ |*Cumulus Linux GNU/Linux | | Advanced options for Cumulus Linux GNU/Linux | | ONIE | | | +----------------------------------------------------------------------------+  Use the ^ and v arrow keys to select Advanced options for Cumulus Linux GNU/Linux.</description>
    </item>
    
    <item>
      <title>Resource Diagnostics Using cl-resource-query</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</guid>
      <description>You can use cl-resource-query to retrieve information about host entries, MAC entries, L2 and L3 routes, and ECMPs (equal-cost multi-path routes, see Load Balancing) that are in use. This is especially useful because Cumulus Linux syncs routes between the kernel and the switching silicon. If the required resource pools in hardware fill up, new kernel routes can cause existing routes to move from being fully allocated to being partially allocated.</description>
    </item>
    
    <item>
      <title>Resource Diagnostics Using cl-resource-query</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</guid>
      <description>You can use cl-resource-query to retrieve information about host entries, MAC entries, L2 and L3 routes, and ECMPs (equal-cost multi-path routes, see Load Balancing) that are in use. This is especially useful because Cumulus Linux syncs routes between the kernel and the switching silicon. If the required resource pools in hardware fill up, new kernel routes can cause existing routes to move from being fully allocated to being partially allocated.</description>
    </item>
    
    <item>
      <title>Upgrading Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/Cumulus_Linux_301/Installation_Upgrading_and_Package_Management/Managing_Cumulus_Linux_Disk_Images/</guid>
      <description>Cumulus Networks software melds the Linux host world with the networking devices world. Each world comes with its own paradigm on how to upgrade software. Before we discuss the various ways to upgrade Cumulus Linux switches, let&amp;rsquo;s review the general considerations and strategies used to upgrade network devices and Linux hosts.
Upgrades: Comparing the Network Device Worldview vs. the Linux Host Worldview Manual vs. Automated Configuration Historically, network devices were configured in place, and most network devices required customized configurations, which led predominantly to configuring the hardware manually.</description>
    </item>
    
    <item>
      <title>Monitoring Virtual Device Counters</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</guid>
      <description>Cumulus Linux gathers statistics for VXLANs and VLANs using virtual device counters. These counters are supported on Tomahawk, Trident II+ and Trident II-based platforms only; see the Cumulus Networks HCL for a list of supported platforms.
You can retrieve the data from these counters using tools like ip -s link show, ifconfig, /proc/net/dev, or netstat -i.
Sample VXLAN Statistics VXLAN statistics are available as follows:
 Aggregate statistics are available per VNI; this includes access and network statistics.</description>
    </item>
    
    <item>
      <title>Monitoring Virtual Device Counters</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</guid>
      <description>Cumulus Linux gathers statistics for VXLANs and VLANs using virtual device counters. These counters are supported on Tomahawk, Trident II+ and Trident II-based platforms only; see the Cumulus Networks HCL for a list of supported platforms.
You can retrieve the data from these counters using tools like ip -s link show, ifconfig, /proc/net/dev, or netstat -i.
Sample VXLAN Statistics VXLAN statistics are available as follows:
 Aggregate statistics are available per VNI; this includes access and network statistics.</description>
    </item>
    
    <item>
      <title>Buffer Monitoring</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Buffer_Monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Buffer_Monitoring/</guid>
      <description>Monitoring packet buffers and their utilization is vital for proper traffic management on a network. It is quite useful for:
 Identifying microbursts that result in longer packet latency
 Giving early warning signs of packet buffer congestion that could lead to packet drops
 Quickly identifying a network problem with a particular switch, port or traffic class
  You can use buffer utilization monitoring to quickly filter out non-problematic switches so you can focus on the ones causing trouble on the network.</description>
    </item>
    
    <item>
      <title>Buffer Monitoring</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Buffer_Monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Buffer_Monitoring/</guid>
      <description>Monitoring packet buffers and their utilization is vital for proper traffic management on a network. It is quite useful for:
 Identifying microbursts that result in longer packet latency
 Giving early warning signs of packet buffer congestion that could lead to packet drops
 Quickly identifying a network problem with a particular switch, port or traffic class
  You can use buffer utilization monitoring to quickly filter out non-problematic switches so you can focus on the ones causing trouble on the network.</description>
    </item>
    
    <item>
      <title>Single User Mode - Boot Recovery</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</guid>
      <description>Use single user mode to assist in troubleshooting system boot issues or for password recovery. To enter single user mode, follow the steps below.
 Boot the switch, as soon as you see the GRUB menu.
 GNU GRUB version 2.02~beta2-22+deb8u1 +----------------------------------------------------------------------------+ |*Cumulus Linux GNU/Linux | | Advanced options for Cumulus Linux GNU/Linux | | ONIE | | | +----------------------------------------------------------------------------+  Use the ^ and v arrow keys to select Advanced options for Cumulus Linux GNU/Linux.</description>
    </item>
    
    <item>
      <title>Resource Diagnostics Using cl-resource-query</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</guid>
      <description>You can use the cl-resource-query command to retrieve information about host entries, MAC entries, layer 2 and layer 3 routes, and ECMP routes that are in use. Because Cumulus Linux synchronizes routes between the kernel and the switching silicon, if the required resource pools in hardware fill up, new kernel routes can cause existing routes to move from being fully allocated to being partially allocated. To avoid this, monitor the routes in the hardware to keep them below the ASIC limits.</description>
    </item>
    
    <item>
      <title>Single User Mode - Boot Recovery</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Single_User_Mode_-_Boot_Recovery/</guid>
      <description>Use single user mode to assist in troubleshooting system boot issues or for password recovery. To enter single user mode, follow the steps below.
 Boot the switch as soon as you see the GRUB menu.
 GNU GRUB version 2.02~beta2-22+deb8u1 +----------------------------------------------------------------------------+ |*Cumulus Linux GNU/Linux | | Advanced options for Cumulus Linux GNU/Linux | | ONIE | | | +----------------------------------------------------------------------------+  Use the ^ and v arrow keys to select Advanced options for Cumulus Linux GNU/Linux.</description>
    </item>
    
    <item>
      <title>Monitoring Virtual Device Counters</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</guid>
      <description>Cumulus Linux gathers statistics for VXLANs and VLANs using virtual device counters. These counters are supported on Tomahawk, Trident II+ and Trident II-based platforms only; see the Cumulus Networks HCL for a list of supported platforms.
You can retrieve the data from these counters using tools like ip -s link show, ifconfig, /proc/net/dev, or netstat -i.
Sample VXLAN Statistics VXLAN statistics are available as follows:
 Aggregate statistics are available per VNI; this includes access and network statistics.</description>
    </item>
    
    <item>
      <title>Resource Diagnostics Using cl-resource-query</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Resource_Diagnostics_Using_cl-resource-query/</guid>
      <description>You can use the cl-resource-query command to retrieve information about host entries, MAC entries, layer 2 and layer 3 routes, and ECMP routes that are in use. Because Cumulus Linux synchronizes routes between the kernel and the switching silicon, if the required resource pools in hardware fill up, new kernel routes can cause existing routes to move from being fully allocated to being partially allocated. To avoid this, monitor the routes in the hardware to keep them below the ASIC limits.</description>
    </item>
    
    <item>
      <title>SSH for Remote Access</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</guid>
      <description>You use SSH to securely access a Cumulus Linux switch remotely.
By default, you cannot use the root account to SSH to a Cumulus Linux switch unless you generate an SSH key or set a password for the account.
 Access Using Passkey (Basic Setup) Cumulus Linux uses the openSSH package to provide SSH functionality. The standard mechanisms of generating passwordless access just applies. The example below has the cumulus user on a machine called management-station connecting to a switch called cumulus-switch1.</description>
    </item>
    
    <item>
      <title>ASIC Monitoring</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/ASIC_Monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/ASIC_Monitoring/</guid>
      <description>Cumulus Linux provides an ASIC monitoring tool that collects and distributes data about the state of the ASIC. The monitoring tool polls for data at specific intervals and takes certain actions so that you can quickly identify and respond to problems, such as:
 Microbursts that result in longer packet latency
 Packet buffer congestion that might lead to packet drops
 Network problems with a particular switch, port, or traffic class</description>
    </item>
    
    <item>
      <title>User Accounts</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</guid>
      <description>By default, Cumulus Linux has two user accounts: cumulus and root.
The cumulus account:
 Default password is *CumulusLinux\!*  Is a user account in the sudo group with sudo privileges
 User can log in to the system via all the usual channels like console and SSH
  The root account:
 Default password is disabled by default
 Has the standard Linux root user access to everything on the switch</description>
    </item>
    
    <item>
      <title>Monitoring Best Practices</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</guid>
      <description>The following monitoring processes are considered best practices for reviewing and troubleshooting potential issues with Cumulus Linux environments. In addition, several of the more common issues have been listed, with potential solutions included.
Overview This document describes:
 Metrics that you can poll from Cumulus Linux and use in trend analysis
 Critical log messages that you can monitor for triggered alerts
  Trend Analysis Using Metrics A metric is a quantifiable measure that is used to track and assess the status of a specific infrastructure component.</description>
    </item>
    
    <item>
      <title>Monitoring Best Practices</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</guid>
      <description>The following monitoring processes are considered best practices for reviewing and troubleshooting potential issues with Cumulus Linux environments. In addition, several of the more common issues have been listed, with potential solutions included.
Overview This document describes:
 Metrics that you can poll from Cumulus Linux and use in trend analysis
 Critical log messages that you can monitor for triggered alerts
  Trend Analysis Using Metrics A metric is a quantifiable measure that is used to track and assess the status of a specific infrastructure component.</description>
    </item>
    
    <item>
      <title>Monitoring Virtual Device Counters</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Monitoring_Virtual_Device_Counters/</guid>
      <description>Cumulus Linux gathers statistics for VXLANs and VLANs using virtual device counters. These counters are supported on Tomahawk, Trident II+ and Trident II-based platforms only; see the Cumulus Networks HCL for a list of supported platforms.
You can retrieve the data from these counters using tools like ip -s link show, ifconfig, /proc/net/dev, or netstat -i.
Sample VXLAN Statistics VXLAN statistics are available as follows:
 Aggregate statistics are available per VNI; this includes access and network statistics.</description>
    </item>
    
    <item>
      <title>Using sudo to Delegate Privileges</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</guid>
      <description>By default, Cumulus Linux has two user accounts: root and cumulus. The cumulus account is a normal user and is in the group sudo.
You can add more user accounts as needed. Like the cumulus account, these accounts must use sudo to execute privileged commands.
Commands  sudo
 visudo
  Using sudo sudo allows you to execute a command as superuser or another user as specified by the security policy.</description>
    </item>
    
    <item>
      <title>ASIC Monitoring</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/ASIC_Monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/ASIC_Monitoring/</guid>
      <description>Cumulus Linux provides an ASIC monitoring tool that collects and distributes data about the state of the ASIC. The monitoring tool polls for data at specific intervals and takes certain actions so that you can quickly identify and respond to problems, such as:
 Microbursts that result in longer packet latency
 Packet buffer congestion that might lead to packet drops
 Network problems with a particular switch, port, or traffic class</description>
    </item>
    
    <item>
      <title>LDAP Authentication and Authorization</title>
      <link>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/Cumulus_Linux_301/System_Management/Authentication_Authorization_and_Accounting/</guid>
      <description>Cumulus Linux uses Pluggable Authentication Modules (PAM) and Name Service Switch (NSS) for user authentication.
NSS specifies the order of information sources used to resolve names for each service. Using this with authentication and authorization, it provides the order and location used for user lookup and group mapping on the system. PAM handles the interaction between the user and the system, providing login handling, session setup, authentication of users and authorization of a user actions.</description>
    </item>
    
    <item>
      <title>Monitoring Best Practices</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</guid>
      <description>The following monitoring processes are considered best practices for reviewing and troubleshooting potential issues with Cumulus Linux environments. In addition, several of the more common issues have been listed, with potential solutions included.
Overview This document describes:
 Metrics that you can poll from Cumulus Linux and use in trend analysis
 Critical log messages that you can monitor for triggered alerts
  Trend Analysis Using Metrics A metric is a quantifiable measure that is used to track and assess the status of a specific infrastructure component.</description>
    </item>
    
    <item>
      <title>switchd Log Message Reference</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/switchd_Log_Message_Reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/switchd_Log_Message_Reference/</guid>
      <description>The following table lists the log messages generated by switchd, organized by severity, then message text. These messages appear in /var/log/switchd.log.
    Severity
 Message Text
 Explanation
 Recommended Action
    CRITICAL
 _port_group_config_values_get: hal_list_get failed on [str]
 List create failed.
 File a ticket with Cumulus Support.
  CRITICAL
 _range_limits_get: start linux interface name buffer is NULL
 Invalid parameter.</description>
    </item>
    
    <item>
      <title>Data Center Host to ToR Architecture</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</guid>
      <description>This chapter discusses the various architectures and strategies available from the top of rack (ToR) switches all the way down to the server hosts.
Layer 3 Architecture Single-attached Hosts     Summary
 More Information
    The server (physical host) has only has one link to one ToR switch.
Configurations
leaf01 Config
/etc/network/interfaces
 auto swp1 iface swp1 address 172.16.1.1/30  /etc/frr/frr.conf
 router ospf router-id 10.</description>
    </item>
    
    <item>
      <title>Data Center Host to ToR Architecture</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</guid>
      <description>This chapter discusses the various architectures and strategies available from the top of rack (ToR) switches all the way down to the server hosts.
Layer 2 - Architecture Traditional Spanning Tree - Single Attached  
    Summary
 More Information
    Bond/Etherchannel is not configured on host to multiple switches (bonds can still occur but only to one switch at a time), so leaf01 and leaf02 see two different MAC addresses.</description>
    </item>
    
    <item>
      <title>FRRouting Log Message Reference</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/FRRouting_Log_Message_Reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/FRRouting_Log_Message_Reference/</guid>
      <description>The following table lists the HIGH severity ERROR log messages generated by FRRouting. These messages appear in /var/log/frr/frr.log.
   Category Severity Message # Message Text Explanation Recommended Action     Babel HIGH 16777217 BABEL Memory Errors Babel has failed to allocate memory. The system is about to run out of memory. Find the process that is causing memory shortages and remediate that process. Restart FRR.   Babel HIGH 16777218 BABEL Packet Error Babel has detected a packet encode/decode problem.</description>
    </item>
    
    <item>
      <title>Monitoring Best Practices</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Monitoring_Best_Practices/</guid>
      <description>The following monitoring processes are considered best practices for reviewing and troubleshooting potential issues with Cumulus Linux environments. In addition, several of the more common issues have been listed, with potential solutions included.
Overview This document describes:
 Metrics that you can poll from Cumulus Linux and use in trend analysis
 Critical log messages that you can monitor for triggered alerts
  Trend Analysis Using Metrics A metric is a quantifiable measure that is used to track and assess the status of a specific infrastructure component.</description>
    </item>
    
    <item>
      <title>Cumulus Networks Services Demos</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Cumulus_Networks_Services_Demos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Cumulus_Networks_Services_Demos/</guid>
      <description>The Cumulus Networks Services team demos provide a virtual environment built using either VirtualBox or libvirt using Vagrant to manage the VMs. This environment utilizes the reference topology shown below. Vagrant and Cumulus VX can be used together to build virtual simulations of production networks to validate configurations, develop automation code and simulate failure scenarios.
Reference Topology The Cumulus Networks reference topology includes cabling (in DOT format for dual use with PTM), MAC addressing, IP addressing, switches and servers.</description>
    </item>
    
    <item>
      <title>Cumulus Networks Services Demos</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Solutions/Cumulus_Networks_Services_Demos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Solutions/Cumulus_Networks_Services_Demos/</guid>
      <description>The Cumulus Networks Services team demos provide a virtual environment built using either VirtualBox or libvirt using Vagrant to manage the VMs. This environment utilizes the reference topology shown below. Vagrant and Cumulus VX can be used together to build virtual simulations of production networks to validate configurations, develop automation code and simulate failure scenarios.
Reference Topology The Cumulus Networks reference topology includes cabling (in DOT format for dual use with PTM), MAC addressing, IP addressing, switches and servers.</description>
    </item>
    
    <item>
      <title>VLAN Tagging</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/</guid>
      <description>This article shows two examples of VLAN tagging, one basic and one more advanced. They both demonstrate the streamlined interface configuration from ifupdown2. For more information, see Configuring and Managing Network Interfaces.
VLAN Tagging, a Basic Example A simple configuration demonstrating VLAN tagging involves two hosts connected to a switch.
{{&amp;lt; imgOld 0 &amp;gt;}}
 host1 connects to swp1 with both untagged frames and with 802.1Q frames tagged for vlan100.</description>
    </item>
    
    <item>
      <title>switchd Log Message Reference</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/switchd_Log_Message_Reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/switchd_Log_Message_Reference/</guid>
      <description>The following table lists the log messages generated by switchd, organized by severity, then message text. These messages appear in /var/log/switchd.log.
    Severity
 Message Text
 Explanation
 Recommended Action
    CRITICAL
 _port_group_config_values_get: hal_list_get failed on [str]
 List create failed.
 File a ticket with Cumulus Support.
  CRITICAL
 _range_limits_get: start linux interface name buffer is NULL
 Invalid parameter.</description>
    </item>
    
    <item>
      <title>Docker on Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Docker_on_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Docker_on_Cumulus_Linux/</guid>
      <description>Cumulus Linux 3.4 is based on Linux kernel 4.1, which supports the Docker engine. Docker can be installed directly on a Cumulus Linux switch, and Docker containers can be run natively on the switch. This section covers the installation and set up instructions for Docker.
Setting up Docker on Cumulus Linux Configure the Repositories  Add the following line to the end of /etc/apt/sources.list.d/jessie.list in a text editor, and save the file:</description>
    </item>
    
    <item>
      <title>Docker on Cumulus Linux</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Solutions/Docker_on_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Solutions/Docker_on_Cumulus_Linux/</guid>
      <description>Cumulus Linux 3.4 is based on Linux kernel 4.1, which supports the Docker engine. Docker can be installed directly on a Cumulus Linux switch, and Docker containers can be run natively on the switch. This section covers the installation and set up instructions for Docker.
Setting up Docker on Cumulus Linux Configure the Repositories  Add the following line to the end of /etc/apt/sources.list.d/jessie.list in a text editor, and save the file:</description>
    </item>
    
    <item>
      <title>FRRouting Log Message Reference</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/FRRouting_Log_Message_Reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/FRRouting_Log_Message_Reference/</guid>
      <description>The following table lists the HIGH severity ERROR log messages generated by FRRouting. These messages appear in /var/log/frr/frr.log.
   Category Severity Message # Message Text Explanation Recommended Action     Babel HIGH 16777217 BABEL Memory Errors Babel has failed to allocate memory. The system is about to run out of memory. Find the process that is causing memory shortages and remediate that process. Restart FRR.   Babel HIGH 16777218 BABEL Packet Error Babel has detected a packet encode/decode problem.</description>
    </item>
    
    <item>
      <title>VLAN-aware Bridge Mode for Large-scale Layer 2 Environments</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Ethernet_Bridging_-_VLANs/</guid>
      <description>Cumulus Linux bridge driver supports two configuration modes, one that is VLAN-aware, and one that follows a more traditional Linux bridge model.
For traditional Linux bridges, the kernel supports VLANs in the form of VLAN subinterfaces. Enabling bridging on multiple VLANs means configuring a bridge for each VLAN and, for each member port on a bridge, creating one or more VLAN subinterfaces out of that port. This mode poses scalability challenges in terms of configuration size as well as boot time and run time state management, when the number of ports times the number of VLANs becomes large.</description>
    </item>
    
    <item>
      <title>OpenStack Neutron ML2 and Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</guid>
      <description>The Modular Layer 2 (ML2) plugin is a framework that allows OpenStack Networking to utilize a variety of non-vendor-specific layer 2 networking technologies. The ML2 framework simplifies adding support for new layer 2 networking technologies, requiring much less initial and ongoing effort â€” specifically, it enables dynamic provisioning of VLAN/VXLAN on switches in OpenStack environment instead of manually provisioning L2 connectivity for each VM.
The plugin supports configuration caching. The cached configuration is replayed back to the Cumulus Linux switch from Cumulus ML2 mechanism driver when a switch or process restart is detected.</description>
    </item>
    
    <item>
      <title>OpenStack Neutron ML2 and Cumulus Linux</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</guid>
      <description>The Modular Layer 2 (ML2) plugin is a framework that allows OpenStack Networking to utilize a variety of non-vendor-specific layer 2 networking technologies. The ML2 framework simplifies adding support for new layer 2 networking technologies, requiring much less initial and ongoing effort â€” specifically, it enables dynamic provisioning of VLAN/VXLAN on switches in OpenStack environment instead of manually provisioning L2 connectivity for each VM.
The plugin supports configuration caching. The cached configuration is replayed back to the Cumulus Linux switch from Cumulus ML2 mechanism driver when a switch or process restart is detected.</description>
    </item>
    
    <item>
      <title>Anycast Design Guide</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Anycast_Design_Guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Solutions/Anycast_Design_Guide/</guid>
      <description>Cumulus Networks&amp;rsquo; Routing on the Host provides the ability to run OSPF or BGP directly on server hosts. This can enable a network architecture known as anycast, where many servers can provide the same service without needing layer 2 extensions or load balancer appliances.
Anycast is not a new protocol or protocol implementation and does not require any additional network configuration. Anycast leverages the equal cost multipath (ECMP) capabilities inherent in layer 3 networks to provide stateless load sharing services.</description>
    </item>
    
    <item>
      <title>Anycast Design Guide</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Solutions/Anycast_Design_Guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Solutions/Anycast_Design_Guide/</guid>
      <description>Cumulus Networks&amp;rsquo; Routing on the Host provides the ability to run OSPF or BGP directly on server hosts. This can enable a network architecture known as anycast, where many servers can provide the same service without needing layer 2 extensions or load balancer appliances.
Anycast is not a new protocol or protocol implementation and does not require any additional network configuration. Anycast leverages the equal cost multipath (ECMP) capabilities inherent in layer 3 networks to provide stateless load sharing services.</description>
    </item>
    
    <item>
      <title>RDMA over Converged Ethernet - RoCE</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</guid>
      <description>RDMA over Converged Ethernet (RoCE) provides the ability to write to compute or storage elements using remote direct memory access (RDMA) over an Ethernet network instead of using host CPUs. RoCE relies on congestion control and lossless Ethernet to operate. Cumulus Linux supports features that can enable lossless Ethernet for RoCE environments. Note that while Cumulus Linux can support RoCE environments, the hosts send and receive the RoCE packets.</description>
    </item>
    
    <item>
      <title>RDMA over Converged Ethernet - RoCE</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</guid>
      <description>RDMA over Converged Ethernet (RoCE) provides the ability to write to compute or storage elements using remote direct memory access (RDMA) over an Ethernet network instead of using host CPUs. RoCE relies on congestion control and lossless Ethernet to operate. Cumulus Linux supports features that can enable lossless Ethernet for RoCE environments. Note that while Cumulus Linux can support RoCE environments, the hosts send and receive the RoCE packets.</description>
    </item>
    
    <item>
      <title>Data Center Host to ToR Architecture</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</guid>
      <description>This chapter discusses the various architectures and strategies available from the top of rack (ToR) switches all the way down to the server hosts.
Layer 3 Architecture Single-attached Hosts     Summary
 More Information
    The server (physical host) has only has one link to one ToR switch.
Configurations
leaf01 Config
/etc/network/interfaces
 auto swp1 iface swp1 address 172.16.1.1/30  /etc/frr/frr.conf
 router ospf router-id 10.</description>
    </item>
    
    <item>
      <title>Cumulus Networks Services Demos</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Cumulus_Networks_Services_Demos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Cumulus_Networks_Services_Demos/</guid>
      <description>The Cumulus Networks Services team demos provide a virtual environment built using either VirtualBox or libvirt using Vagrant to manage the VMs. This environment utilizes the reference topology shown below. Vagrant and Cumulus VX can be used together to build virtual simulations of production networks to validate configurations, develop automation code and simulate failure scenarios.
Reference Topology The Cumulus Networks reference topology includes cabling (in DOT format for dual use with PTM), MAC addressing, IP addressing, switches and servers.</description>
    </item>
    
    <item>
      <title>Data Center Host to ToR Architecture</title>
      <link>http://example.org/Cumulus_Linux/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Solutions/Data_Center_Host_to_ToR_Architecture/</guid>
      <description>This chapter discusses the various architectures and strategies available from the top of rack (ToR) switches all the way down to the server hosts.
Layer 3 Architecture Single-attached Hosts     Summary
 More Information
    The server (physical host) has only has one link to one ToR switch.
Configurations
leaf01 Config
/etc/network/interfaces
 auto swp1 iface swp1 address 172.16.1.1/30  /etc/frr/frr.conf
 router ospf router-id 10.</description>
    </item>
    
    <item>
      <title>Docker on Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Docker_on_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Docker_on_Cumulus_Linux/</guid>
      <description>Cumulus Linux 3.4 is based on Linux kernel 4.1, which supports the Docker engine. Docker can be installed directly on a Cumulus Linux switch, and Docker containers can be run natively on the switch. This section covers the installation and set up instructions for Docker.
Setting up Docker on Cumulus Linux Configure the Repositories  Add the following line to the end of /etc/apt/sources.list.d/jessie.list in a text editor, and save the file:</description>
    </item>
    
    <item>
      <title>Integrating with VMware NSX</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX to act as VTEP gateways. The VMware NSX controller provides consistent provisioning across virtual and physical server infrastructures.
{{&amp;lt; imgOld 0 &amp;gt;}}
Getting Started Before you integrate VXLANs with NSX, make sure you have the following components:
 A switch (L2 gateway) with a Tomahawk, Trident II+ or Trident II chipset running Cumulus Linux 2.0 or later;
 OVSDB server (ovsdb-server), included in Cumulus Linux 2.</description>
    </item>
    
    <item>
      <title>Cumulus Networks Services Demos</title>
      <link>http://example.org/Cumulus_Linux/Network_Solutions/Cumulus_Networks_Services_Demos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Solutions/Cumulus_Networks_Services_Demos/</guid>
      <description>The Cumulus Networks Services team demos provide a virtual environment built using either VirtualBox or libvirt using Vagrant to manage the VMs. This environment utilizes the reference topology shown below. Vagrant and Cumulus VX can be used together to build virtual simulations of production networks to validate configurations, develop automation code and simulate failure scenarios.
Reference Topology The Cumulus Networks reference topology includes cabling (in DOT format for dual use with PTM), MAC addressing, IP addressing, switches and servers.</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with Midokura MidoNet and OpenStack</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/</guid>
      <description>Cumulus Linux seamlessly integrates with the MidoNet OpenStack infrastructure, where the switches provide the VTEP gateway for terminating VXLAN tunnels from within MidoNet. MidoNet connects to the OVSDB server running on the Cumulus Linux switch, and exchanges information about the VTEPs and MAC addresses associated with the OpenStack Neutron networks. This provides seamless Ethernet connectivity between virtual and physical server infrastructures.
{{&amp;lt; imgOld 0 &amp;gt;}}
Contents Troubleshooting MidoNet and Cumulus VTEPs As with any complex system, there is a control plane and data plane.</description>
    </item>
    
    <item>
      <title>OpenStack Neutron ML2 and Cumulus Linux</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</guid>
      <description>The Modular Layer 2 (ML2) plugin is a framework that allows OpenStack Networking to utilize a variety of non-vendor-specific layer 2 networking technologies. The ML2 framework simplifies adding support for new layer 2 networking technologies, requiring much less initial and ongoing effort â€” specifically, it enables dynamic provisioning of VLAN/VXLAN on switches in OpenStack environment instead of manually provisioning L2 connectivity for each VM.
The plugin supports configuration caching. The cached configuration is replayed back to the Cumulus Linux switch from Cumulus ML2 mechanism driver when a switch or process restart is detected.</description>
    </item>
    
    <item>
      <title>Anycast Design Guide</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Anycast_Design_Guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Solutions/Anycast_Design_Guide/</guid>
      <description>Cumulus Networks&amp;rsquo; Routing on the Host provides the ability to run OSPF or BGP directly on server hosts. This can enable a network architecture known as anycast, where many servers can provide the same service without needing layer 2 extensions or load balancer appliances.
Anycast is not a new protocol or protocol implementation and does not require any additional network configuration. Anycast leverages the equal cost multipath (ECMP) capabilities inherent in layer 3 networks to provide stateless load sharing services.</description>
    </item>
    
    <item>
      <title>Docker on Cumulus Linux</title>
      <link>http://example.org/Cumulus_Linux/Network_Solutions/Docker_on_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Solutions/Docker_on_Cumulus_Linux/</guid>
      <description>Cumulus Linux is based on Linux kernel 4.1, which supports the Docker engine. Docker can be installed directly on a Cumulus Linux switch, and Docker containers can be run natively on the switch. This section covers the installation and set up instructions for Docker.
Set up Docker on Cumulus Linux Configure the Repositories  Add the following line to the end of /etc/apt/sources.list.d/jessie.list in a text editor, and save the file:</description>
    </item>
    
    <item>
      <title>Network Command Line Utility</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Network_Command_Line_Utility_-_NCLU/Network_Command_Line_Utility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Network_Command_Line_Utility_-_NCLU/Network_Command_Line_Utility/</guid>
      <description>The license could not be verified: License Certificate has expired!</description>
    </item>
    
    <item>
      <title>Network Command Line Utility</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Network_Command_Line_Utility_-_NCLU/Network_Command_Line_Utility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Network_Command_Line_Utility_-_NCLU/Network_Command_Line_Utility/</guid>
      <description>The license could not be verified: License Certificate has expired!
  </description>
    </item>
    
    <item>
      <title>OpenStack Neutron ML2 and Cumulus Linux</title>
      <link>http://example.org/Cumulus_Linux/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Solutions/OpenStack_Neutron_ML2_and_Cumulus_Linux/</guid>
      <description>The Modular Layer 2 (ML2) plugin is a framework that allows OpenStack Networking to utilize a variety of non-vendor-specific layer 2 networking technologies. The ML2 framework simplifies adding support for new layer 2 networking technologies, requiring much less initial and ongoing effort â€” specifically, it enables dynamic provisioning of VLAN/VXLAN on switches in OpenStack environment instead of manually provisioning L2 connectivity for each VM.
The plugin supports configuration caching. The cached configuration is replayed back to the Cumulus Linux switch from Cumulus ML2 mechanism driver when a switch or process restart is detected.</description>
    </item>
    
    <item>
      <title>RDMA over Converged Ethernet - RoCE</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</guid>
      <description>RDMA over Converged Ethernet (RoCE) provides the ability to write to compute or storage elements using remote direct memory access (RDMA) over an Ethernet network instead of using host CPUs. RoCE relies on congestion control and lossless Ethernet to operate. Cumulus Linux supports features that can enable lossless Ethernet for RoCE environments. Note that while Cumulus Linux can support RoCE environments, the hosts send and receive the RoCE packets.</description>
    </item>
    
    <item>
      <title>Static MAC Bindings with VXLAN</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/</guid>
      <description>Cumulus Linux includes native Linux VXLAN kernel support.
Requirements A VXLAN configuration requires a switch with a Tomahawk, Trident II+ or Trident II chipset running Cumulus Linux 2.0 or later.
For a basic VXLAN configuration, you should ensure that:
 The VXLAN has a network identifier (VNI); do not use 0 or 16777215 as the VNI ID, as they are reserved values under Cumulus Linux.
 The VXLAN link and local interfaces are added to bridge to create the association between port, VLAN and VXLAN instance.</description>
    </item>
    
    <item>
      <title>Anycast Design Guide</title>
      <link>http://example.org/Cumulus_Linux/Network_Solutions/Anycast_Design_Guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Solutions/Anycast_Design_Guide/</guid>
      <description>Cumulus Networks&amp;rsquo; Routing on the Host provides the ability to run OSPF or BGP directly on server hosts. This can enable a network architecture known as anycast, where many servers can provide the same service without needing layer 2 extensions or load balancer appliances.
Anycast is not a new protocol or protocol implementation and does not require any additional network configuration. Anycast leverages the equal cost multipath (ECMP) capabilities inherent in layer 3 networks to provide stateless load sharing services.</description>
    </item>
    
    <item>
      <title>RDMA over Converged Ethernet - RoCE</title>
      <link>http://example.org/Cumulus_Linux/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Solutions/RDMA_over_Converged_Ethernet_-_RoCE/</guid>
      <description>RDMA over Converged Ethernet (RoCE) provides the ability to write to compute or storage elements using remote direct memory access (RDMA) over an Ethernet network instead of using host CPUs. RoCE relies on congestion control and lossless Ethernet to operate. Cumulus Linux supports features that can enable lossless Ethernet for RoCE environments. Note that while Cumulus Linux can support RoCE environments, the hosts send and receive the RoCE packets.</description>
    </item>
    
    <item>
      <title>Cumulus Hyperconverged Solution with Nutanix</title>
      <link>http://example.org/Cumulus_Linux/Network_Solutions/Cumulus_Hyperconverged_Solution_with_Nutanix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Solutions/Cumulus_Hyperconverged_Solution_with_Nutanix/</guid>
      <description>The Cumulus Hyperconverged Solution (HCS) in Cumulus Linux supports automated integration with the Nutanix Prism Management solution and the Nutanix AHV hypervisor. Cumulus HCS automatically configures ports attached to Nutanix nodes, provisions networking and manages VLANs with Nutanix Prism and Nutanix AHV.
In addition, you can augment the deployment with:
 Cumulus on a Stick for zero touch provisioning Nutanix and Cumulus HCS without any user interaction or additional equipment.</description>
    </item>
    
    <item>
      <title>Cumulus Linux Quagga Commands</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Configuring_Quagga/Cumulus_Linux_301/Layer_3_Features/Configuring_Quagga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_3_Features/Configuring_Quagga/Cumulus_Linux_301/Layer_3_Features/Configuring_Quagga/</guid>
      <description>Using the vtysh modal CLI is the primary way to configure Quagga in Cumulus Linux. However, an alternative exists in the form of a non-modal CLI containing a suite of Cumulus Linux-specific commands, structured similar to the Linux ip command. The available commands are as follows:
    Command
 Description
    cl-bgp
 BGP commands. See man cl-bgp for details.
  cl-ospf</description>
    </item>
    
    <item>
      <title>Network Command Line Utility</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Network_Command_Line_Utility_-_NCLU/Network_Command_Line_Utility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Network_Command_Line_Utility_-_NCLU/Network_Command_Line_Utility/</guid>
      <description>The license could not be verified: License Certificate has expired!</description>
    </item>
    
    <item>
      <title>SSH for Remote Access</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</guid>
      <description>Authentication keys can be generated for securely accessing a Cumulus Linux switch with the ssh-keygen component of the Secure Shell (SSH) protocol. Cumulus Linux uses the OpenSSH package to provide this functionality. The section below covers how to generate a SSH key pair.
Generate an SSH Key Pair  Run the ssh-keygen command, and follow the prompts, to generate the key pair:
To configure a completely passwordless system, do not enter a passphrase when prompted in the following step.</description>
    </item>
    
    <item>
      <title>SSH for Remote Access</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</guid>
      <description>Authentication keys can be generated for securely accessing a Cumulus Linux switch with the ssh-keygen component of the Secure Shell (SSH) protocol. Cumulus Linux uses the OpenSSH package to provide this functionality. The section below covers how to generate a SSH key pair.
Generate an SSH Key Pair  Run the ssh-keygen command, and follow the prompts, to generate the key pair:
To configure a completely passwordless system, do not enter a passphrase when prompted in the following step.</description>
    </item>
    
    <item>
      <title>User Accounts</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</guid>
      <description>By default, Cumulus Linux has two user accounts: cumulus and root.
The cumulus account:
 Default password is *CumulusLinux\!*  Is a user account in the sudo group with sudo privileges
 User can log in to the system via all the usual channels like console and SSH
 Along with the cumulus group, has both show and edit rights for NCLU
  The root account:
 Default password is disabled by default</description>
    </item>
    
    <item>
      <title>User Accounts</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</guid>
      <description>By default, Cumulus Linux has two user accounts: cumulus and root.
The cumulus account:
 Default password is *CumulusLinux\!*  Is a user account in the sudo group with sudo privileges
 User can log in to the system via all the usual channels like console and SSH
 Along with the cumulus group, has both show and edit rights for NCLU
  The root account:
 Default password is disabled by default</description>
    </item>
    
    <item>
      <title>Using sudo to Delegate Privileges</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</guid>
      <description>By default, Cumulus Linux has two user accounts: root and cumulus. The cumulus account is a normal user and is in the group sudo.
You can add more user accounts as needed. Like the cumulus account, these accounts must use sudo to execute privileged commands.
Using sudo sudo allows you to execute a command as superuser or another user as specified by the security policy. See man sudo(8) for details.</description>
    </item>
    
    <item>
      <title>Using sudo to Delegate Privileges</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</guid>
      <description>By default, Cumulus Linux has two user accounts: root and cumulus. The cumulus account is a normal user and is in the group sudo.
You can add more user accounts as needed. Like the cumulus account, these accounts must use sudo to execute privileged commands.
Using sudo sudo allows you to execute a command as superuser or another user as specified by the security policy. See man sudo(8) for details.</description>
    </item>
    
    <item>
      <title>LDAP Authentication and Authorization</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</guid>
      <description>Cumulus Linux uses Pluggable Authentication Modules (PAM) and Name Service Switch (NSS) for user authentication.
NSS specifies the order of information sources used to resolve names for each service. Using this with authentication and authorization, it provides the order and location used for user lookup and group mapping on the system. PAM handles the interaction between the user and the system, providing login handling, session setup, authentication of users and authorization of a user actions.</description>
    </item>
    
    <item>
      <title>LDAP Authentication and Authorization</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</guid>
      <description>Cumulus Linux uses Pluggable Authentication Modules (PAM) and Name Service Switch (NSS) for user authentication.
NSS specifies the order of information sources used to resolve names for each service. Using this with authentication and authorization, it provides the order and location used for user lookup and group mapping on the system. PAM handles the interaction between the user and the system, providing login handling, session setup, authentication of users and authorization of a user actions.</description>
    </item>
    
    <item>
      <title>SSH for Remote Access</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</guid>
      <description>You can generate authentication keys to access a Cumulus Linux switch securely with the ssh-keygen component of the Secure Shell (SSH) protocol. Cumulus Linux uses the OpenSSH package to provide this functionality. This section describes how to generate an SSH key pair.
Generate an SSH Key Pair  To generate the SSH key pair, run the ssh-keygen command and follow the prompts:
To configure a completely passwordless system, do not enter a passphrase when prompted in the following step.</description>
    </item>
    
    <item>
      <title>TACACS Plus</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</guid>
      <description>Cumulus Linux implements TACACS+ client AAA (Accounting, Authentication, and Authorization) in a transparent way with minimal configuration. The client implements the TACACS+ protocol as described in this IETF document. There is no need to create accounts or directories on the switch. Accounting records are sent to all configuredTACACS+ servers by default. Use of per-command authorization requires additional setup on the switch.
Supported Features  Authentication via PAM; includes login, ssh, sudo and su</description>
    </item>
    
    <item>
      <title>TACACS Plus</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</guid>
      <description>Cumulus Linux implements TACACS+ client AAA (Accounting, Authentication, and Authorization) in a transparent way with minimal configuration. The client implements the TACACS+ protocol as described in this IETF document. There is no need to create accounts or directories on the switch. Accounting records are sent to all configuredTACACS+ servers by default. Use of per-command authorization requires additional setup on the switch.
Supported Features  Authentication via PAM; includes login, ssh, sudo and su</description>
    </item>
    
    <item>
      <title>User Accounts</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</guid>
      <description>By default, Cumulus Linux has two user accounts: cumulus and root.
The cumulus account:
 Uses the default password *CumulusLinux\!*  Is a user account in the sudo group with sudo privileges.
 Can log in to the system through all the usual channels, such as console and SSH.
 Along with the cumulus group, has both show and edit rights for NCLU.
  The root account:
 Has the default password disabled by default.</description>
    </item>
    
    <item>
      <title>RADIUS AAA</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</guid>
      <description>Cumulus Networks offers add-on packages that provide the ability for RADIUS users to log in to Cumulus Linux switches in a transparent way with minimal configuration. There is no need to create accounts or directories on the switch. Authentication is handled via PAM, and includes login, ssh, sudo and su.
Installing and Configuring the RADIUS Packages The plugin is installed from two RADIUS packages, which are not in the base Cumulus Linux image.</description>
    </item>
    
    <item>
      <title>RADIUS AAA</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</guid>
      <description>Cumulus Networks offers add-on packages that provide the ability for RADIUS users to log in to Cumulus Linux switches in a transparent way with minimal configuration. There is no need to create accounts or directories on the switch. Authentication is handled via PAM, and includes login, ssh, sudo and su.
Installing and Configuring the RADIUS Packages The plugin is installed from two RADIUS packages, which are not in the base Cumulus Linux image.</description>
    </item>
    
    <item>
      <title>Using sudo to Delegate Privileges</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</guid>
      <description>By default, Cumulus Linux has two user accounts: root and cumulus. The cumulus account is a normal user and is in the group sudo.
You can add more user accounts as needed. Like the cumulus account, these accounts must use sudo to execute privileged commands.
sudo Basics sudo allows you to execute a command as superuser or another user as specified by the security policy. See man sudo(8) for details.</description>
    </item>
    
    <item>
      <title>LDAP Authentication and Authorization</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</guid>
      <description>Cumulus Linux uses Pluggable Authentication Modules (PAM) and Name Service Switch (NSS) for user authentication.
NSS specifies the order of information sources used to resolve names for each service. Using this with authentication and authorization, it provides the order and location used for user lookup and group mapping on the system. PAM handles the interaction between the user and the system, providing login handling, session setup, authentication of users, and authorization of user actions.</description>
    </item>
    
    <item>
      <title>SSH for Remote Access</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/SSH_for_Remote_Access/</guid>
      <description>You can generate authentication keys to access a Cumulus Linux switch securely with the ssh-keygen component of the Secure Shell (SSH) protocol. Cumulus Linux uses the OpenSSH package to provide this functionality. This section describes how to generate an SSH key pair.
Generating an SSH Key Pair  To generate the SSH key pair, run the ssh-keygen command and follow the prompts:
To configure a completely passwordless system, do not enter a passphrase when prompted in the following step.</description>
    </item>
    
    <item>
      <title>Troubleshooting Log Files</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/</guid>
      <description>The only real unique entity for logging on Cumulus Linux compared to any other Linux distribution is switchd.log, which logs the HAL (hardware abstraction layer) from hardware like the Broadcom or Mellanox ASIC.
This guide on NixCraft is amazing for understanding how /var/log works. The green highlighted rows below are the most important logs and usually looked at first when debugging.
  Log
 Description
    /var/log/alternatives.</description>
    </item>
    
    <item>
      <title>TACACS Plus</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</guid>
      <description>Cumulus Linux implements TACACS+ client AAA (Accounting, Authentication, and Authorization) in a transparent way with minimal configuration. The client implements the TACACS+ protocol as described in this IETF document. There is no need to create accounts or directories on the switch. Accounting records are sent to all configured TACACS+ servers by default. Use of per-command authorization requires additional setup on the switch.
Supported Features  Authentication using PAM; includes login, ssh, sudo and su</description>
    </item>
    
    <item>
      <title>Troubleshooting the etc Directory</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/</guid>
      <description>The cl-support script replicates the /etc directory.
Files that cl-support deliberately excludes are:
   File Description     /etc/nologin nologinprevents unprivileged users from logging into the system.   /etc/alternatives update-alternatives creates, removes, maintains and displays information about the symbolic links comprising the Debian alternatives system.    This is the alphabetical of the output from running ls -l on the /etc directory structure created by cl-support.</description>
    </item>
    
    <item>
      <title>User Accounts</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/User_Accounts/</guid>
      <description>By default, Cumulus Linux has two user accounts: cumulus and root.
The cumulus account:
 Uses the default password *CumulusLinux\!*  Is a user account in the sudo group with sudo privileges.
 Can log in to the system through all the usual channels, such as console and SSH.
 Along with the cumulus group, has both show and edit rights for NCLU.
  The root account:
 Has the default password disabled by default.</description>
    </item>
    
    <item>
      <title>RADIUS AAA</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</guid>
      <description>Cumulus Networks offers add-on packages that enable RADIUS users to log in to Cumulus Linux switches in a transparent way with minimal configuration. There is no need to create accounts or directories on the switch. Authentication is handled with PAM and includes login, ssh, sudo and su.
Install the RADIUS Packages The RADIUS packages are not included in the base Cumulus Linux image; there is no RADIUS metapackage.
To install the RADIUS packages:</description>
    </item>
    
    <item>
      <title>Troubleshooting the support Directory</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Understanding_and_Decoding_the_cl-support_Output_File/</guid>
      <description>The support directory is unique in the fact that it is not a copy of the switch&amp;rsquo;s filesystem. Actually, it is the output from various commands. For example:
   File Equivalent Command Description     support/ip.addr cumulus@switch:~$ ip addr show This shows you all the interfaces (including swp front panel ports), IP address information, admin state and physical state.    </description>
    </item>
    
    <item>
      <title>Using sudo to Delegate Privileges</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/Using_sudo_to_Delegate_Privileges/</guid>
      <description>By default, Cumulus Linux has two user accounts: root and cumulus. The cumulus account is a normal user and is in the group sudo.
You can add more user accounts as needed. Like the cumulus account, these accounts must use sudo to execute privileged commands.
Using sudo sudo allows you to execute a command as superuser or another user as specified by the security policy. See man sudo(8) for details.</description>
    </item>
    
    <item>
      <title>LDAP Authentication and Authorization</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/LDAP_Authentication_and_Authorization/</guid>
      <description>Cumulus Linux uses Pluggable Authentication Modules (PAM) and Name Service Switch (NSS) for user authentication.
NSS specifies the order of information sources used to resolve names for each service. Using this with authentication and authorization, it provides the order and location used for user lookup and group mapping on the system. PAM handles the interaction between the user and the system, providing login handling, session setup, authentication of users, and authorization of user actions.</description>
    </item>
    
    <item>
      <title>TACACS Plus</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/TACACS_Plus/</guid>
      <description>Cumulus Linux implements TACACS+ client AAA (Accounting, Authentication, and Authorization) in a transparent way with minimal configuration. The client implements the TACACS+ protocol as described in this IETF document. There is no need to create accounts or directories on the switch. Accounting records are sent to all configured TACACS+ servers by default. Use of per-command authorization requires additional setup on the switch.
Supported Features  Authentication using PAM; includes login, ssh, sudo and su</description>
    </item>
    
    <item>
      <title>Default Cumulus Linux ACL Configuration</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</guid>
      <description>The Cumulus Linux default ACL configuration is split into three parts, as outlined in the netfilter ACL documentation: IP tables, IPv6 tables, and EB tables. The sections below cover the default configurations for each part, while the default file can be seen by clicking the Default ACL Configuration link:
Default ACL Configuration
 cumulus@switch:~$ sudo cl-acltool -L all ------------------------------- Listing rules of type iptables: ------------------------------- TABLE filter : Chain INPUT (policy ACCEPT 167 packets, 16481 bytes) pkts bytes target prot opt in out source destination 0 0 DROP all -- swp+ any 240.</description>
    </item>
    
    <item>
      <title>Default Cumulus Linux ACL Configuration</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</guid>
      <description>The Cumulus Linux default ACL configuration is split into three parts, as outlined in the netfilter ACL documentation: IP tables, IPv6 tables, and EB tables. The sections below cover the default configurations for each part, while the default file can be seen by clicking the Default ACL Configuration link:
Default ACL Configuration 
 cumulus@switch:~$ sudo cl-acltool -L all ------------------------------- Listing rules of type iptables: ------------------------------- TABLE filter : Chain INPUT (policy ACCEPT 167 packets, 16481 bytes) pkts bytes target prot opt in out source destination 0 0 DROP all -- swp+ any 240.</description>
    </item>
    
    <item>
      <title>RADIUS AAA</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Authentication_Authorization_and_Accounting/RADIUS_AAA/</guid>
      <description>Cumulus Networks offers add-on packages that enable RADIUS users to log in to Cumulus Linux switches in a transparent way with minimal configuration. There is no need to create accounts or directories on the switch. Authentication is handled with PAM and includes login, ssh, sudo and su.
Installing the RADIUS Packages The RADIUS packages are not included in the base Cumulus Linux image; there is no RADIUS metapackage.
To install the RADIUS packages:</description>
    </item>
    
    <item>
      <title>Filtering Learned MAC Addresses</title>
      <link>http://example.org/version/Cumulus_Linux_35/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</guid>
      <description>On Broadcom switches, a MAC address is learned on a bridge regardless of whether or not a received packet is dropped by an ACL. This is due to how the hardware learns MAC addresses and occurs before the ACL lookup. This can be a security or resource problem as the MAC address table has the potential to get filled with bogus MAC addresses, so a malfunctioning host, network error, loop or malicious attack on a shared L2 platform can create an outage for other hosts if the same MAC address is learned on another port.</description>
    </item>
    
    <item>
      <title>Filtering Learned MAC Addresses</title>
      <link>http://example.org/version2/cumulus-linux-35/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</guid>
      <description>On Broadcom switches, a MAC address is learned on a bridge regardless of whether or not a received packet is dropped by an ACL. This is due to how the hardware learns MAC addresses and occurs before the ACL lookup. This can be a security or resource problem as the MAC address table has the potential to get filled with bogus MAC addresses, so a malfunctioning host, network error, loop or malicious attack on a shared L2 platform can create an outage for other hosts if the same MAC address is learned on another port.</description>
    </item>
    
    <item>
      <title>Default Cumulus Linux ACL Configuration</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</guid>
      <description>The Cumulus Linux default ACL configuration is split into three parts, as outlined in the netfilter ACL documentation: IP tables, IPv6 tables, and EB tables. The sections below describe the default configurations for each part. You can see the default file by clicking the Default ACL Configuration link:
Default ACL Configuration
 cumulus@switch:~$ sudo cl-acltool -L all ------------------------------- Listing rules of type iptables: ------------------------------- TABLE filter : Chain INPUT (policy ACCEPT 167 packets, 16481 bytes) pkts bytes target prot opt in out source destination 0 0 DROP all -- swp+ any 240.</description>
    </item>
    
    <item>
      <title>Monitoring Interfaces and Transceivers Using ethtool</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/</guid>
      <description>The ethtool command enables you to query or control the network driver and hardware settings. It takes the device name (like swp1) as an argument. When the device name is the only argument to ethtool, it prints the current settings of the network device. See man ethtool(8) for details. Not all options are currently supported on switch port interfaces.
Commands  cl-netstat
 ethtool
  Monitoring Interface Status Using ethtool To check the status of an interface using ethtool:</description>
    </item>
    
    <item>
      <title>Filtering Learned MAC Addresses</title>
      <link>http://example.org/Cumulus_Linux/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</guid>
      <description>On Broadcom switches, a MAC address is learned on a bridge regardless of whether or not a received packet is dropped by an ACL. This is due to how the hardware learns MAC addresses and occurs before the ACL lookup. This can be a security or resource problem as the MAC address table has the potential to get filled with bogus MAC addresses; a malfunctioning host, network error, loop, or malicious attack on a shared layer 2 platform can create an outage for other hosts if the same MAC address is learned on another port.</description>
    </item>
    
    <item>
      <title>Default Cumulus Linux ACL Configuration</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Netfilter_-_ACLs/Default_Cumulus_Linux_ACL_Configuration/</guid>
      <description>The Cumulus Linux default ACL configuration is split into three parts, as outlined in the netfilter ACL documentation: IP tables, IPv6 tables, and EB tables. The sections below cover the default configurations for each part, while the default file can be seen by clicking the Default ACL Configuration link:
Default ACL Configuration
 cumulus@switch:~$ sudo cl-acltool -L all ------------------------------- Listing rules of type iptables: ------------------------------- TABLE filter : Chain INPUT (policy ACCEPT 167 packets, 16481 bytes) pkts bytes target prot opt in out source destination 0 0 DROP all -- swp+ any 240.</description>
    </item>
    
    <item>
      <title>Configuring Hardware-enabled DDOS Protection</title>
      <link>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Buffer_and_Queue_Management/Configuring_Hardware-enabled_DDOS_Protection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Interface_Configuration_and_Management/Buffer_and_Queue_Management/Configuring_Hardware-enabled_DDOS_Protection/</guid>
      <description>The DDOS protection mechanism protects data plane, control plane and management plane traffic in the switch. It drops any packets that match one or more of the following criteria while incurring no performance impact:
 Source IP address matches the destination address for IPv4 and IPv6 packets
 Source MAC address matches the destination MAC address
 Unfragmented or first fragment SYN packets with a source port of 0-1023</description>
    </item>
    
    <item>
      <title>Configuring Hardware-enabled DDOS Protection</title>
      <link>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Buffer_and_Queue_Management/Configuring_Hardware-enabled_DDOS_Protection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Interface_Configuration_and_Management/Buffer_and_Queue_Management/Configuring_Hardware-enabled_DDOS_Protection/</guid>
      <description>The DDOS protection mechanism protects data plane, control plane and management plane traffic in the switch. It drops any packets that match one or more of the following criteria while incurring no performance impact:
 Source IP address matches the destination address for IPv4 and IPv6 packets
 Source MAC address matches the destination MAC address
 Unfragmented or first fragment SYN packets with a source port of 0-1023</description>
    </item>
    
    <item>
      <title>Filtering Learned MAC Addresses</title>
      <link>http://example.org/version/Cumulus_Linux_36/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/System_Configuration/Netfilter_-_ACLs/Filtering_Learned_MAC_Addresses/</guid>
      <description>On Broadcom switches, a MAC address is learned on a bridge regardless of whether or not a received packet is dropped by an ACL. This is due to how the hardware learns MAC addresses and occurs before the ACL lookup. This can be a security or resource problem as the MAC address table has the potential to get filled with bogus MAC addresses, so a malfunctioning host, network error, loop or malicious attack on a shared L2 platform can create an outage for other hosts if the same MAC address is learned on another port.</description>
    </item>
    
    <item>
      <title>Using netshow to Troubleshoot Your Network Configuration</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/</guid>
      <description>netshow is a tool in Cumulus Linux that quickly returns a lot of information about your network configuration. It&amp;rsquo;s a tool designed by network operators for network troubleshooters since existing command line tools have too many options. netshow addresses this by leveraging the network troubleshooting experience from a wide group of troubleshooters and boiling it down to just a few important options. netshow quickly aggregates basic network information on Linux devices with numerous interfaces.</description>
    </item>
    
    <item>
      <title>Monitoring System Statistics and Network Traffic with sFlow</title>
      <link>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/Cumulus_Linux_301/Monitoring_and_Troubleshooting/Network_Troubleshooting/</guid>
      <description>sFlow is a monitoring protocol that samples network packets, application operations, and system counters. sFlow collects both interface counters and sampled 5-tuple packet information, enabling you to monitor your network traffic as well as your switch state and performance metrics. An outside server, known as an sFlow collector, is required to collect and analyze this data.
hsflowd is the daemon that samples and sends sFlow data to configured collectors. hsflowd is not included in the base Cumulus Linux installation.</description>
    </item>
    
    <item>
      <title>Switch Port Attributes</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Interface_Configuration_and_Management/Switch_Port_Attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Interface_Configuration_and_Management/Switch_Port_Attributes/</guid>
      <description>Cumulus Linux exposes network interfaces for several types of physical and logical devices:
 lo, network loopback device
 ethN, switch management port(s), for out of band management only
 swpN, switch front panel ports
 (optional) brN, bridges (IEEE 802.1Q VLANs)
 (optional) bondN, bonds (IEEE 802.3ad link aggregation trunks, or port channels)
  Each physical network interface has a number of configurable settings:
 Auto-negotiation
 Duplex</description>
    </item>
    
    <item>
      <title>ifplugd</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Interface_Configuration_and_Management/ifplugd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Interface_Configuration_and_Management/ifplugd/</guid>
      <description>ifplugd is an Ethernet link-state monitoring daemon, that can execute user-specified scripts to configure an Ethernet device when a cable is plugged in, or automatically unconfigure it when a cable is removed.
Follow the steps below to install and configure the ifplugd daemon.
Install ifplugd  Update the switch before installing the daemon:
 cumulus@switch:~$ sudo -E apt-get update  Install the ifplugd package:
 cumulus@switch:~$ sudo -E apt-get install ifplugd   Configure ifplugd Once ifplugd is installed, two configuration files must be edited to set up ifplugd:</description>
    </item>
    
    <item>
      <title>Switch Port Attributes</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Interface_Configuration_and_Management/Switch_Port_Attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Interface_Configuration_and_Management/Switch_Port_Attributes/</guid>
      <description>This chapter discusses the various network interfaces on a switch running Cumulus Linux, how to configure various interface-level settings (if needed) and some troubleshooting commands.
Interface Types Cumulus Linux exposes network interfaces for several types of physical and logical devices:
 lo, network loopback device
 ethN, switch management port(s), for out of band management only
 swpN, switch front panel ports
 (optional) brN, bridges (IEEE 802.1Q VLANs)</description>
    </item>
    
    <item>
      <title>Voice VLAN</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</guid>
      <description>In Cumulus Linux, a voice VLAN is a VLAN dedicated to voice traffic on a switch port. However, the term can mean different things to different vendors.
Voice VLAN is part of a trunk port with 2 VLANs that comprises either:
 Native VLAN, which carries both data and voice traffic, or
 Voice VLAN, which carries the voice traffic, and a data or native VLAN, which carries the data traffic in a trunk port.</description>
    </item>
    
    <item>
      <title>Voice VLAN</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</guid>
      <description>In Cumulus Linux, a voice VLAN is a VLAN dedicated to voice traffic on a switch port. However, the term can mean different things to different vendors.
Voice VLAN is part of a trunk port with 2 VLANs that comprises either:
 Native VLAN, which carries both data and voice traffic, or
 Voice VLAN, which carries the voice traffic, and a data or native VLAN, which carries the data traffic in a trunk port.</description>
    </item>
    
    <item>
      <title>LNV VXLAN Active-Active Mode</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/</guid>
      <description>LNV active-active mode allows a pair of MLAG switches to act as a single VTEP, providing active-active VXLAN termination for bare metal as well as virtualized workloads.
Contents Terminology and Definitions     Term
 Definition
    vxrd
 VXLAN registration daemon. Runs on the switch that is mapping VLANs to VXLANs. The vxrd daemon needs to be configured to register to a service node.</description>
    </item>
    
    <item>
      <title>Hardware-enabled DDOS Protection</title>
      <link>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Buffer_and_Queue_Management/Hardware-enabled_DDOS_Protection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_1_and_Switch_Ports/Buffer_and_Queue_Management/Hardware-enabled_DDOS_Protection/</guid>
      <description>It is crucial to also protect a switchâ€™s control plane to ensure the proper control plane applications have access to the switchâ€™s CPU. Failure to do so could increase vulnerabilities to a Denial of Service (DOS) attack. Cumulus Linux provides control plane protection by default. It also offers a DDOS protection mechanism, which protects data plane, control plane and management plane traffic in the switch. It drops any packets that match one or more of the following criteria while incurring no performance impact:</description>
    </item>
    
    <item>
      <title>LNV Full Example</title>
      <link>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/Cumulus_Linux_301/Layer_1_and_Layer_2_Features/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV/</guid>
      <description>Lightweight Network Virtualization (LNV) is a technique for deploying VXLANs without a central controller on bare metal switches. This a full example complete with diagram. Please reference the Lightweight Network Virtualization chapter for more detailed information. This full example uses the recommended way of deploying LNV, which is to use Anycast to load balance the service nodes.
LNV is a lightweight controller option. Please contact Cumulus Networks with your scale requirements and we can make sure this is the right fit for you.</description>
    </item>
    
    <item>
      <title>Configuring Hardware-enabled DDOS Protection</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Buffer_and_Queue_Management/Configuring_Hardware-enabled_DDOS_Protection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_1_and_Switch_Ports/Buffer_and_Queue_Management/Configuring_Hardware-enabled_DDOS_Protection/</guid>
      <description>The DDOS protection mechanism protects data plane, control plane and management plane traffic in the switch. It drops any packets that match one or more of the following criteria while incurring no performance impact:
 Source IP address matches the destination address for IPv4 and IPv6 packets
 Source MAC address matches the destination MAC address
 Unfragmented or first fragment SYN packets with a source port of 0-1023</description>
    </item>
    
    <item>
      <title>VLAN-aware Bridge Mode for Large-scale Layer 2 Environments</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode_for_Large-scale_Layer_2_Environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode_for_Large-scale_Layer_2_Environments/</guid>
      <description>The Cumulus Linux bridge driver supports two configuration modes, one that is VLAN-aware, and one that follows a more traditional Linux bridge model.
For traditional Linux bridges, the kernel supports VLANs in the form of VLAN subinterfaces. Enabling bridging on multiple VLANs means configuring a bridge for each VLAN and, for each member port on a bridge, creating one or more VLAN subinterfaces out of that port. This mode poses scalability challenges in terms of configuration size as well as boot time and run time state management, when the number of ports times the number of VLANs becomes large.</description>
    </item>
    
    <item>
      <title>VLAN-aware Bridge Mode for Large-scale Layer 2 Environments</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode_for_Large-scale_Layer_2_Environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode_for_Large-scale_Layer_2_Environments/</guid>
      <description>The Cumulus Linux bridge driver supports two configuration modes, one that is VLAN-aware, and one that follows a more traditional Linux bridge model.
For traditional Linux bridges, the kernel supports VLANs in the form of VLAN subinterfaces. Enabling bridging on multiple VLANs means configuring a bridge for each VLAN and, for each member port on a bridge, creating one or more VLAN subinterfaces out of that port. This mode poses scalability challenges in terms of configuration size as well as boot time and run time state management, when the number of ports times the number of VLANs becomes large.</description>
    </item>
    
    <item>
      <title>Traditional Mode Bridges</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/Traditional_Mode_Bridges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/Traditional_Mode_Bridges/</guid>
      <description>Cumulus Networks recommends you use a VLAN-aware bridge on your switch. You use traditional mode bridges only if you need to run more than one bridge on the switch or if you need to use PVSTP+.
Creating a Traditional Mode Bridge You configure traditional mode bridges in /etc/network/interfaces file. To create a traditional mode bridge:
 Open the /etc/network/interfaces file in a text editor.
 Add a new stanza to create the bridge, and save the file.</description>
    </item>
    
    <item>
      <title>Traditional Mode Bridges</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/Traditional_Mode_Bridges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/Traditional_Mode_Bridges/</guid>
      <description>Cumulus Networks recommends you use a VLAN-aware bridge on your switch. You use traditional mode bridges only if you need to run more than one bridge on the switch or if you need to use PVSTP+.
Creating a Traditional Mode Bridge You configure traditional mode bridges in /etc/network/interfaces file. To create a traditional mode bridge:
 Open the /etc/network/interfaces file in a text editor.
 Add a new stanza to create the bridge, and save the file.</description>
    </item>
    
    <item>
      <title>VLAN Tagging</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</guid>
      <description>This article shows two examples of VLAN tagging, one basic and one more advanced. They both demonstrate the streamlined interface configuration from ifupdown2.
VLAN Tagging, a Basic Example A simple configuration demonstrating VLAN tagging involves two hosts connected to a switch.
 host1 connects to swp1 with both untagged frames and with 802.1Q frames tagged for vlan100.
 host2 connects to swp2 with 802.1Q frames tagged for vlan120 and vlan130.</description>
    </item>
    
    <item>
      <title>VLAN Tagging</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</guid>
      <description>This article shows two examples of VLAN tagging, one basic and one more advanced. They both demonstrate the streamlined interface configuration from ifupdown2.
VLAN Tagging, a Basic Example A simple configuration demonstrating VLAN tagging involves two hosts connected to a switch.
 host1 connects to swp1 with both untagged frames and with 802.1Q frames tagged for vlan100.
 host2 connects to swp2 with 802.1Q frames tagged for vlan120 and vlan130.</description>
    </item>
    
    <item>
      <title>Voice VLAN</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</guid>
      <description>In Cumulus Linux, a voice VLAN is a VLAN dedicated to voice traffic on a switch port. However, the term can mean different things to different vendors.
Voice VLAN is part of a trunk port with 2 VLANs that comprises either:
 Native VLAN, which carries both data and voice traffic, or
 Voice VLAN, which carries the voice traffic, and a data or native VLAN, which carries the data traffic in a trunk port.</description>
    </item>
    
    <item>
      <title>Voice VLAN</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Link_Layer_Discovery_Protocol/Voice_VLAN/</guid>
      <description>In Cumulus Linux, a voice VLAN is a VLAN dedicated to voice traffic on a switch port. However, the term can mean different things to different vendors.
Voice VLAN is part of a trunk port with 2 VLANs that comprises either:
 Native VLAN, which carries both data and voice traffic, or
 Voice VLAN, which carries the voice traffic, and a data or native VLAN, which carries the data traffic in a trunk port.</description>
    </item>
    
    <item>
      <title>ifplugd</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Virtual_Router_Redundancy_-_VRR/ifplugd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_1_and_2/Virtual_Router_Redundancy_-_VRR/ifplugd/</guid>
      <description>ifplugd is an Ethernet link-state monitoring daemon, that can execute user-specified scripts to configure an Ethernet device when a cable is plugged in, or automatically unconfigure it when a cable is removed.
Follow the steps below to install and configure the ifplugd daemon.
Install ifplugd  Update the switch before installing the daemon:
 cumulus@switch:~$ sudo -E apt-get update  Install the ifplugd package:
 cumulus@switch:~$ sudo -E apt-get install ifplugd   Configure ifplugd Once ifplugd is installed, two configuration files must be edited to set up ifplugd:</description>
    </item>
    
    <item>
      <title>ifplugd</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Virtual_Router_Redundancy_-_VRR/ifplugd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_1_and_2/Virtual_Router_Redundancy_-_VRR/ifplugd/</guid>
      <description>ifplugd is an Ethernet link-state monitoring daemon, that can execute user-specified scripts to configure an Ethernet device when a cable is plugged in, or automatically unconfigure it when a cable is removed.
Follow the steps below to install and configure the ifplugd daemon.
Install ifplugd  Update the switch before installing the daemon:
 cumulus@switch:~$ sudo -E apt-get update  Install the ifplugd package:
 cumulus@switch:~$ sudo -E apt-get install ifplugd   Configure ifplugd Once ifplugd is installed, two configuration files must be edited to set up ifplugd:</description>
    </item>
    
    <item>
      <title>VLAN-aware Bridge Mode</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode/</guid>
      <description>The Cumulus Linux bridge driver supports two configuration modes, one that is VLAN-aware, and one that follows a more traditional Linux bridge model.
For traditional Linux bridges, the kernel supports VLANs in the form of VLAN subinterfaces. Enabling bridging on multiple VLANs means configuring a bridge for each VLAN and, for each member port on a bridge, creating one or more VLAN subinterfaces out of that port. This mode poses scalability challenges in terms of configuration size as well as boot time and run time state management, when the number of ports times the number of VLANs becomes large.</description>
    </item>
    
    <item>
      <title>Traditional Bridge Mode</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Ethernet_Bridging_-_VLANs/Traditional_Bridge_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Ethernet_Bridging_-_VLANs/Traditional_Bridge_Mode/</guid>
      <description>Cumulus Networks recommends you use a VLAN-aware bridge on your switch. You use traditional mode bridges only if you need to run more than one bridge on the switch or if you need to use PVSTP+.
Create a Traditional Mode Bridge You can configure a traditional mode bridge either using NCLU or manually editing the /etc/network/interfaces file.
Configure a Traditional Bridge with NCLU NCLU has limited support for configuring bridges in traditional mode.</description>
    </item>
    
    <item>
      <title>VLAN Tagging</title>
      <link>http://example.org/Cumulus_Linux/Layer_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</guid>
      <description>This topic shows two examples of VLAN tagging, one basic and one more advanced. They both demonstrate the streamlined interface configuration from ifupdown2.
VLAN Tagging, a Basic Example A simple configuration demonstrating VLAN tagging involves two hosts connected to a switch.
 host1 connects to swp1 with both untagged frames and with 802.1Q frames tagged for vlan100.
 host2 connects to swp2 with 802.1Q frames tagged for vlan120 and vlan130.</description>
    </item>
    
    <item>
      <title>VLAN-aware Bridge Mode</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode/</guid>
      <description>The Cumulus Linux bridge driver supports two configuration modes, one that is VLAN-aware, and one that follows a more traditional Linux bridge model.
For traditional Linux bridges, the kernel supports VLANs in the form of VLAN subinterfaces. Enabling bridging on multiple VLANs means configuring a bridge for each VLAN and, for each member port on a bridge, creating one or more VLAN subinterfaces out of that port. This mode poses scalability challenges in terms of configuration size as well as boot time and run time state management, when the number of ports times the number of VLANs becomes large.</description>
    </item>
    
    <item>
      <title>Traditional Bridge Mode</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/Traditional_Bridge_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/Traditional_Bridge_Mode/</guid>
      <description>Cumulus Networks recommends you use a VLAN-aware bridge on your switch. You use traditional mode bridges only if you need to run more than one bridge on the switch or if you need to use PVSTP+.
Creating a Traditional Mode Bridge You can configure a traditional mode bridge either using NCLU or manually editing the /etc/network/interfaces file.
Using NCLU to Configure a Traditional Bridge NCLU has limited support for configuring bridges in traditional mode.</description>
    </item>
    
    <item>
      <title>Static VXLAN Tunnels</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</guid>
      <description>In VXLAN-based networks, there are a range of complexities and challenges in determining the destination virtual tunnel endpoints (VTEPs) for any given VXLAN. At scale, various solutions, including Lightweight Network Virtualization (LNV), controller-based options like Midokura MidoNet or VMware NSX and even new standards like EVPN are attempts to address these complexities, however do retain their own complexities.
Enter static VXLAN tunnels, which simply serve to connect two VTEPs in a given environment.</description>
    </item>
    
    <item>
      <title>Static VXLAN Tunnels</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</guid>
      <description>In VXLAN-based networks, there are a range of complexities and challenges in determining the destination virtual tunnel endpoints (VTEPs) for any given VXLAN. At scale, various solutions, including Lightweight Network Virtualization (LNV), controller-based options like Midokura MidoNet or VMware NSX and even new standards like EVPN are attempts to address these complexities, however do retain their own complexities.
Enter static VXLAN tunnels, which simply serve to connect two VTEPs in a given environment.</description>
    </item>
    
    <item>
      <title>VLAN Tagging</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/VLAN_Tagging/</guid>
      <description>This article shows two examples of VLAN tagging, one basic and one more advanced. They both demonstrate the streamlined interface configuration from ifupdown2.
VLAN Tagging, a Basic Example A simple configuration demonstrating VLAN tagging involves two hosts connected to a switch.
 host1 connects to swp1 with both untagged frames and with 802.1Q frames tagged for vlan100.
 host2 connects to swp2 with 802.1Q frames tagged for vlan120 and vlan130.</description>
    </item>
    
    <item>
      <title>Static MAC Bindings with VXLAN</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</guid>
      <description>Cumulus Linux includes native Linux VXLAN kernel support.
Requirements A VXLAN configuration requires a switch with a Broadcom Tomahawk, Trident II+ or Trident II chipset running Cumulus Linux 2.0 or later, or a Mellanox Spectrum chipset running Cumulus Linux 3.2.0 or later.
For a basic VXLAN configuration, you should ensure that:
 The VXLAN has a network identifier (VNI); do not use 0 or 16777215 as the VNI ID, as they are reserved values under Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Static MAC Bindings with VXLAN</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</guid>
      <description>Cumulus Linux includes native Linux VXLAN kernel support.
Requirements A VXLAN configuration requires a switch with a Broadcom Tomahawk, Trident II+ or Trident II chipset running Cumulus Linux 2.0 or later, or a Mellanox Spectrum chipset running Cumulus Linux 3.2.0 or later.
For a basic VXLAN configuration, you should ensure that:
 The VXLAN has a network identifier (VNI); do not use 0 or 16777215 as the VNI ID, as they are reserved values under Cumulus Linux.</description>
    </item>
    
    <item>
      <title>VLAN-aware Bridge Mode for Large-scale Layer 2 Environments</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode_for_Large-scale_Layer_2_Environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Ethernet_Bridging_-_VLANs/VLAN-aware_Bridge_Mode_for_Large-scale_Layer_2_Environments/</guid>
      <description>The license could not be verified: License Certificate has expired!</description>
    </item>
    
    <item>
      <title>Static VXLAN Tunnels</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</guid>
      <description>In VXLAN-based networks, there are a range of complexities and challenges in determining the destination virtual tunnel endpoints (VTEPs) for any given VXLAN. At scale, various solutions, including Lightweight Network Virtualization (LNV), controller-based options like Midokura MidoNet or VMware NSX and even new standards like EVPN are attempts to address these complexities, however do retain their own complexities.
Enter static VXLAN tunnels, which simply serve to connect two VTEPs in a given environment.</description>
    </item>
    
    <item>
      <title>Static MAC Bindings with VXLAN</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</guid>
      <description>Cumulus Linux includes native Linux VXLAN kernel support.
Requirements A VXLAN configuration requires a Broadcom switch with the Tomahawk, Trident II+, or Trident II ASIC running Cumulus Linux 2.0 or later, or a Mellanox switch with the Spectrum ASIC running Cumulus Linux 3.2.0 or later.
For a basic VXLAN configuration, make sure that:
 The VXLAN has a network identifier (VNI); do not use 0 or 16777215 as the VNI ID, which are reserved values under Cumulus Linux.</description>
    </item>
    
    <item>
      <title>LNV VXLAN Active-Active Mode</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_VXLAN_Active-Active_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_VXLAN_Active-Active_Mode/</guid>
      <description>LNV active-active mode allows a pair of MLAG switches to act as a single VTEP, providing active-active VXLAN termination for bare metal as well as virtualized workloads.
Terminology and Definitions     Term
 Definition
    vxrd
 VXLAN registration daemon. Runs on the switch that is mapping VLANs to VXLANs. The vxrd daemon needs to be configured to register to a service node. This turns the switch into a VTEP.</description>
    </item>
    
    <item>
      <title>LNV VXLAN Active-Active Mode</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_VXLAN_Active-Active_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_VXLAN_Active-Active_Mode/</guid>
      <description>LNV active-active mode allows a pair of MLAG switches to act as a single VTEP, providing active-active VXLAN termination for bare metal as well as virtualized workloads.
Terminology and Definitions     Term
 Definition
    vxrd
 VXLAN registration daemon. Runs on the switch that is mapping VLANs to VXLANs. The vxrd daemon needs to be configured to register to a service node. This turns the switch into a VTEP.</description>
    </item>
    
    <item>
      <title>ifplugd</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_2/Virtual_Router_Redundancy_-_VRR/ifplugd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_2/Virtual_Router_Redundancy_-_VRR/ifplugd/</guid>
      <description>ifplugd is an Ethernet link-state monitoring daemon, that can execute user-specified scripts to configure an Ethernet device when a cable is plugged in, or automatically unconfigure it when a cable is removed.
Follow the steps below to install and configure the ifplugd daemon.
Install ifplugd  Update the switch before installing the daemon:
 cumulus@switch:~$ sudo -E apt-get update  Install the ifplugd package:
 cumulus@switch:~$ sudo -E apt-get install ifplugd   Configure ifplugd Once ifplugd is installed, two configuration files must be edited to set up ifplugd:</description>
    </item>
    
    <item>
      <title>LNV Full Example</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_Full_Example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_Full_Example/</guid>
      <description>Lightweight Network Virtualization (LNV) is a technique for deploying VXLANs without a central controller on bare metal switches. This a full example complete with diagram. Please reference the Lightweight Network Virtualization chapter for more detailed information. This full example uses the recommended way of deploying LNV, which is to use Anycast to load balance the service nodes.
LNV is a lightweight controller option. Please contact Cumulus Networks with your scale requirements and we can make sure this is the right fit for you.</description>
    </item>
    
    <item>
      <title>LNV Full Example</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_Full_Example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Lightweight_Network_Virtualization_-_LNV_Overview/LNV_Full_Example/</guid>
      <description>Lightweight Network Virtualization (LNV) is a technique for deploying VXLANs without a central controller on bare metal switches. This a full example complete with diagram. Please reference the Lightweight Network Virtualization chapter for more detailed information. This full example uses the recommended way of deploying LNV, which is to use Anycast to load balance the service nodes.
LNV is a lightweight controller option. Please contact Cumulus Networks with your scale requirements and we can make sure this is the right fit for you.</description>
    </item>
    
    <item>
      <title>LNV Full Example</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Lightweight_Network_Virtualization_Overview/LNV_Full_Example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Lightweight_Network_Virtualization_Overview/LNV_Full_Example/</guid>
      <description>As of Cumulus Linux 3.7.4, the lightweight network virtualization feature (LNV) has been deprecated. The feature will be removed in Cumulus Linux 4.0. Cumulus Networks recommends you use Ethernet virtual private network (EVPN) for network virtualization.
 Lightweight Network Virtualization (LNV) is a technique for deploying VXLANs without a central controller on bare metal switches. This a full example complete with diagram. Refer to the Lightweight Network Virtualization chapter for more detailed information.</description>
    </item>
    
    <item>
      <title>Static VXLAN Tunnels</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Static_VXLAN_Configurations/Static_VXLAN_Tunnels/</guid>
      <description>In VXLAN-based networks, there are a range of complexities and challenges in determining the destination virtual tunnel endpoints (VTEPs) for any given VXLAN. At scale, various solutions, including Lightweight Network Virtualization (LNV), controller-based options like Midokura MidoNet or VMware NSX and even new standards like EVPN are attempts to address these complexities, however do retain their own complexities.
Enter static VXLAN tunnels, which simply serve to connect two VTEPs in a given environment.</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with Midokura MidoNet and OpenStack</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</guid>
      <description>Cumulus Linux seamlessly integrates with the MidoNet OpenStack infrastructure, where the switches provide the VTEP gateway for terminating VXLAN tunnels from within MidoNet. MidoNet connects to the OVSDB server running on the Cumulus Linux switch, and exchanges information about the VTEPs and MAC addresses associated with the OpenStack Neutron networks. This provides seamless Ethernet connectivity between virtual and physical server infrastructures.</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with Midokura MidoNet and OpenStack</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</guid>
      <description>Cumulus Linux seamlessly integrates with the MidoNet OpenStack infrastructure, where the switches provide the VTEP gateway for terminating VXLAN tunnels from within MidoNet. MidoNet connects to the OVSDB server running on the Cumulus Linux switch, and exchanges information about the VTEPs and MAC addresses associated with the OpenStack Neutron networks. This provides seamless Ethernet connectivity between virtual and physical server infrastructures.
Getting Started Before you create VXLANs with MidoNet, make sure you have the following components:</description>
    </item>
    
    <item>
      <title>Static MAC Bindings with VXLAN</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Static_VXLAN_Configurations/Static_MAC_Bindings_with_VXLAN/</guid>
      <description>Cumulus Linux includes native Linux VXLAN kernel support.
Requirements A VXLAN configuration requires a Broadcom switch with the Tomahawk, Trident II+, or Trident II ASIC running Cumulus Linux 2.0 or later, or a Mellanox switch with the Spectrum ASIC running Cumulus Linux 3.2.0 or later.
For a basic VXLAN configuration, make sure that:
 The VXLAN has a network identifier (VNI); do not use 0 or 16777215 as the VNI ID, which are reserved values under Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX-V</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX-V to act as hardware VTEP gateways. The VMware NSX-V controller provides consistent provisioning across virtual and physical server infrastructures.
Getting Started Before you integrate VXLANs with NSX-V, make sure you have the following components:
 A switch (L2 gateway) with a Broadcom Tomahawk, Trident II+ or Trident II chipset, or a Mellanox Spectrum chipset running Cumulus Linux
 OVSDB server (ovsdb-server), included in Cumulus Linux</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX-V</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX-V to act as hardware VTEP gateways. The VMware NSX-V controller provides consistent provisioning across virtual and physical server infrastructures.
Getting Started Before you integrate VXLANs with NSX-V, make sure you have the following components:
 A switch (L2 gateway) with a Broadcom Tomahawk, Trident II+ or Trident II chipset, or a Mellanox Spectrum chipset running Cumulus Linux
 OVSDB server (ovsdb-server), included in Cumulus Linux</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX</title>
      <link>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX to act as hardware VTEP gateways. The VMware NSX controller provides consistent provisioning across virtual and physical server infrastructures.
Getting Started Before you integrate VXLANs with NSX, make sure you have the following components:
 A switch (L2 gateway) with a Broadcom Tomahawk, Trident II+, Trident II, or Maverick chipset, or a Mellanox Spectrum chipset running Cumulus Linux
 OVSDB server (ovsdb-server), included in Cumulus Linux</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX</title>
      <link>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX to act as hardware VTEP gateways. The VMware NSX controller provides consistent provisioning across virtual and physical server infrastructures.
Getting Started Before you integrate VXLANs with NSX, make sure you have the following components:
 A switch (L2 gateway) with a Broadcom Tomahawk, Trident II+, Trident II, or Maverick chipset, or a Mellanox Spectrum chipset running Cumulus Linux
 OVSDB server (ovsdb-server), included in Cumulus Linux</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with Midokura MidoNet and OpenStack</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</guid>
      <description>Cumulus Linux seamlessly integrates with the MidoNet OpenStack infrastructure, where the switches provide the VTEP gateway for terminating VXLAN tunnels from within MidoNet. MidoNet connects to the OVSDB server running on the Cumulus Linux switch, and exchanges information about the VTEPs and MAC addresses associated with the OpenStack Neutron networks. This provides seamless Ethernet connectivity between virtual and physical server infrastructures.
Getting Started Make sure you have a layer 2 gateway; a Tomahawk, Trident II+ or Trident II switch running Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX-V</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX-V to act as hardware VTEP gateways. The VMware NSX-V controller provides consistent provisioning across virtual and physical server infrastructures.
Cumulus Linux also supports integration with VMware NSX in high availability mode. Refer to OVSDB Server High Availability.
Getting Started Before you integrate VXLANs with NSX-V, make sure you have a layer 2 gateway; a Broadcom Tomahawk, Trident II+, Trident II, Maverick or Mellanox Spectrum switch running Cumulus Linux.</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX-MH</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-MH/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-MH/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX Multi-Hypervisor (MH) to act as hardware VTEP gateways. The VMware NSX-MH controller provides consistent provisioning across virtual and physical server infrastructures.
Cumulus Linux also supports integration with VMware NSX in high availability mode. Refer to OVSDB Server High Availability.
Getting Started Before you integrate VXLANs with NSX-MH, make sure you have a layer 2 gateway; a Broadcom Tomahawk, Trident II+, Trident II, Maverick, or Mellanox Spectrum switch running Cumulus Linux.</description>
    </item>
    
    <item>
      <title>LNV VXLAN Active-Active Mode</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Lightweight_Network_Virtualization_Overview/LNV_VXLAN_Active-Active_Mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Lightweight_Network_Virtualization_Overview/LNV_VXLAN_Active-Active_Mode/</guid>
      <description>LNV active-active mode allows a pair of MLAG switches to act as a single VTEP, providing active-active VXLAN termination for bare metal as well as virtualized workloads.
Terminology and Definitions     Term
 Definition
    vxrd
 The VXLAN registration daemon. The daemon runs on the switch that is mapping VLANs to VXLANs. You must configure the vxrd daemon to register to a service node.</description>
    </item>
    
    <item>
      <title>OVSDB Server High Availability</title>
      <link>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/OVSDB_Server_High_Availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Network_Virtualization/Virtualization_Integrations/OVSDB_Server_High_Availability/</guid>
      <description>OVSDB server high availability is an early access feature in Cumulus Linux 3.7.
 Cumulus Linux supports integration with VMware NSX in both standalone mode and OVSDB server high availability mode (where the data plane is running in active-active mode). For information about VMware NSX in standalone mode and for a description of the components that work together to integrate VMware NSX and Cumulus Linux, see Integrating Hardware VTEPs with VMware NSX-MH or Integrating Hardware VTEPs with VMware NSX-V.</description>
    </item>
    
    <item>
      <title>LNV Full Example</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Lightweight_Network_Virtualization_Overview/LNV_Full_Example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Lightweight_Network_Virtualization_Overview/LNV_Full_Example/</guid>
      <description>Lightweight Network Virtualization (LNV) is a technique for deploying VXLANs without a central controller on bare metal switches. This a full example complete with diagram. Refer to the Lightweight Network Virtualization chapter for more detailed information. This full example uses the recommended way of deploying LNV, which is to use anycast to load balance the service nodes.
LNV is a lightweight controller option. Contact Cumulus Networks with your scale requirements so we can make sure this is the right fit for you.</description>
    </item>
    
    <item>
      <title>Upgrading from Quagga to FRRouting</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</guid>
      <description>Cumulus Linux 3.4 and later releases replace Quagga with FRRouting. This section outlines the upgrade process for users currently using Quagga.
These instructions only apply to upgrading to Cumulus Linux 3.4 or later from releases earlier than 3.4. New image installations contain frr instead of quagga or quagga-compat. If you are using any automation tools to configure your network and are installing a new Cumulus Linux image, make sure your automation tools refer to FRR and not to Quagga.</description>
    </item>
    
    <item>
      <title>Upgrading from Quagga to FRRouting</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</guid>
      <description>Cumulus Linux 3.4 and later releases replace Quagga with FRRouting. This section outlines the upgrade process for users currently using Quagga.
These instructions only apply to upgrading to Cumulus Linux 3.4 or later from releases earlier than 3.4. New image installations contain frr instead of quagga or quagga-compat. If you are using any automation tools to configure your network and are installing a new Cumulus Linux image, make sure your automation tools refer to FRR and not to Quagga.</description>
    </item>
    
    <item>
      <title>Upgrading from Quagga to FRRouting</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</guid>
      <description>Cumulus Linux 3.4 and later releases replace Quagga with FRRouting. This section outlines the upgrade process for users currently using Quagga.
These instructions only apply to upgrading to Cumulus Linux 3.4 or later from releases earlier than 3.4. New image installations contain frr instead of quagga or quagga-compat. If you are using any automation tools to configure your network and are installing a new Cumulus Linux image, make sure your automation tools refer to FRR and not to Quagga.</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with Midokura MidoNet and OpenStack</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_Midokura_MidoNet_and_OpenStack/</guid>
      <description>Cumulus Linux seamlessly integrates with the MidoNet OpenStack infrastructure, where the switches provide the VTEP gateway for terminating VXLAN tunnels from within MidoNet. MidoNet connects to the OVSDB server running on the Cumulus Linux switch, and exchanges information about the VTEPs and MAC addresses associated with the OpenStack Neutron networks. This provides seamless Ethernet connectivity between virtual and physical server infrastructures.</description>
    </item>
    
    <item>
      <title>Comparing NCLU and vtysh Commands</title>
      <link>http://example.org/version/Cumulus_Linux_35/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</guid>
      <description>Using NCLU is the primary way to configure routing in Cumulus Linux. However, an alternative exists in the the vtysh modal CLI. The available commands are as follows:
Comparing vtysh and NCLU Commands The following table compares the various FRRouting commands with their Cumulus Linux NCLU counterparts.
    Action
 NCLU Commands
 FRRouting Commands
    Display the routing table
  cumulus@switch:~$ net show route   switch# show ip route   Create a new neighbor</description>
    </item>
    
    <item>
      <title>Comparing NCLU and vtysh Commands</title>
      <link>http://example.org/version2/cumulus-linux-35/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</guid>
      <description>Using NCLU is the primary way to configure routing in Cumulus Linux. However, an alternative exists in the the vtysh modal CLI. The available commands are as follows:
Comparing vtysh and NCLU Commands The following table compares the various FRRouting commands with their Cumulus Linux NCLU counterparts.
    Action
 NCLU Commands
 FRRouting Commands
    Display the routing table
  cumulus@switch:~$ net show route   switch# show ip route   Create a new neighbor</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX-V</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX-V/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX-V to act as hardware VTEP gateways. The VMware NSX-V controller provides consistent provisioning across virtual and physical server infrastructures.
Getting Started Before you integrate VXLANs with NSX-V, make sure you have the following components:
 A switch (layer 2 gateway) with a Broadcom Tomahawk, Trident II+ or Trident II chipset, or a Mellanox Spectrum chipset running Cumulus Linux
 OVSDB server (ovsdb-server), included in Cumulus Linux</description>
    </item>
    
    <item>
      <title>Integrating Hardware VTEPs with VMware NSX</title>
      <link>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Network_Virtualization/Virtualization_Integrations/Integrating_Hardware_VTEPs_with_VMware_NSX/</guid>
      <description>Switches running Cumulus Linux can integrate with VMware NSX to act as hardware VTEP gateways. The VMware NSX controller provides consistent provisioning across virtual and physical server infrastructures.
Getting Started Before you integrate VXLANs with NSX, make sure you have the following components:
 A switch (layer 2 gateway) with a Broadcom Tomahawk, Trident II+, Trident II, or Maverick chipset or a Mellanox Spectrum chipset running Cumulus Linux
 OVSDB server (ovsdb-server), included in Cumulus Linux and supports VLAN-aware bridges</description>
    </item>
    
    <item>
      <title>Comparing NCLU and vtysh Commands</title>
      <link>http://example.org/Cumulus_Linux/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</guid>
      <description>Using NCLU is the primary way to configure routing in Cumulus Linux. However, an alternative exists in the the vtysh modal CLI. The available commands are as follows:
The following table compares the various FRRouting commands with their Cumulus Linux NCLU counterparts.
    Action
 NCLU Commands
 FRRouting Commands
    Display the routing table
  cumulus@switch:~$ net show route   switch# show ip route   Create a new neighbor</description>
    </item>
    
    <item>
      <title>Network Switch Port LED and Status LED Guidelines</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</guid>
      <description>Data centers today have a large number of network switches manufactured by different hardware vendors running NOSes (network operating system) from different providers. This chapter provides a set of guidelines for how network port and status LEDs should appear on the front panel of a network switch. This provides a network operator with a standard way to identify the state of a switch and its ports by looking at its front panel, irrespective of the hardware vendor or NOS.</description>
    </item>
    
    <item>
      <title>Network Switch Port LED and Status LED Guidelines</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</guid>
      <description>Data centers today have a large number of network switches manufactured by different hardware vendors running NOSes (network operating system) from different providers. This chapter provides a set of guidelines for how network port and status LEDs should appear on the front panel of a network switch. This provides a network operator with a standard way to identify the state of a switch and its ports by looking at its front panel, irrespective of the hardware vendor or NOS.</description>
    </item>
    
    <item>
      <title>Upgrading from Quagga to FRRouting</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/FRRouting_Overview/Upgrading_from_Quagga_to_FRRouting/</guid>
      <description>Cumulus Linux 3.4 and later releases replace Quagga with FRRouting. This section outlines the upgrade process for users currently using Quagga.
These instructions only apply to upgrading to Cumulus Linux 3.4 or later from releases earlier than 3.4. New image installations contain frr instead of quagga or quagga-compat. If you are using any automation tools to configure your network and are installing a new Cumulus Linux image, make sure your automation tools refer to FRR and not to Quagga.</description>
    </item>
    
    <item>
      <title>Network Switch Port LED and Status LED Guidelines</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</guid>
      <description>Data centers today have a large number of network switches manufactured by different hardware vendors running NOSes (network operating system) from different providers. This chapter provides a set of guidelines for how network port and status LEDs should appear on the front panel of a network switch. This provides a network operator with a standard way to identify the state of a switch and its ports by looking at its front panel, irrespective of the hardware vendor or NOS.</description>
    </item>
    
    <item>
      <title>Troubleshooting Log Files</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</guid>
      <description>The only real unique entity for logging on Cumulus Linux compared to any other Linux distribution is switchd.log, which logs the HAL (hardware abstraction layer) from hardware like the Broadcom or Mellanox ASIC.
This guide on NixCraft is amazing for understanding how /var/log works. The green highlighted rows below are the most important logs and usually looked at first when debugging.
    Log
 Description
 Why is this important?</description>
    </item>
    
    <item>
      <title>Troubleshooting Log Files</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</guid>
      <description>The only real unique entity for logging on Cumulus Linux compared to any other Linux distribution is switchd.log, which logs the HAL (hardware abstraction layer) from hardware like the Broadcom or Mellanox ASIC.
This guide on NixCraft is amazing for understanding how /var/log works. The green highlighted rows below are the most important logs and usually looked at first when debugging.
    Log
 Description
 Why is this important?</description>
    </item>
    
    <item>
      <title>Comparing NCLU and vtysh Commands</title>
      <link>http://example.org/version/Cumulus_Linux_36/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Layer_3/Configuring_FRRouting/Comparing_NCLU_and_vtysh_Commands/</guid>
      <description>Using NCLU is the primary way to configure routing in Cumulus Linux. However, an alternative exists in the the vtysh modal CLI. The available commands are as follows:
Comparing vtysh and NCLU Commands The following table compares the various FRRouting commands with their Cumulus Linux NCLU counterparts.
    Action
 NCLU Commands
 FRRouting Commands
    Display the routing table
  cumulus@switch:~$ net show route   switch# show ip route   Create a new neighbor</description>
    </item>
    
    <item>
      <title>Troubleshooting the etc Directory</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</guid>
      <description>The cl-support script replicates the /etc directory.
Files that cl-support deliberately excludes are:
   File Description     /etc/nologin nologinprevents unprivileged users from logging into the system.   /etc/alternatives update-alternatives creates, removes, maintains and displays information about the symbolic links comprising the Debian alternatives system.    This is the alphabetical of the output from running ls -l on the /etc directory structure created by cl-support.</description>
    </item>
    
    <item>
      <title>Troubleshooting the etc Directory</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</guid>
      <description>The cl-support script replicates the /etc directory.
Files that cl-support deliberately excludes are:
   File Description     /etc/nologin nologinprevents unprivileged users from logging into the system.   /etc/alternatives update-alternatives creates, removes, maintains and displays information about the symbolic links comprising the Debian alternatives system.    This is the alphabetical of the output from running ls -l on the /etc directory structure created by cl-support.</description>
    </item>
    
    <item>
      <title>Troubleshooting Log Files</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</guid>
      <description>The only real unique entity for logging on Cumulus Linux compared to any other Linux distribution is switchd.log, which logs the HAL (hardware abstraction layer) from hardware like the Broadcom or Mellanox ASIC.
This guide on NixCraft is amazing for understanding how /var/log works. The green highlighted rows below are the most important logs and usually looked at first when debugging.
    Log
 Description
 Why is this important?</description>
    </item>
    
    <item>
      <title>Troubleshooting the etc Directory</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</guid>
      <description>The cl-support script replicates the /etc directory.
Files that cl-support deliberately excludes are:
   File Description     /etc/nologin nologinprevents unprivileged users from logging into the system.   /etc/alternatives update-alternatives creates, removes, maintains and displays information about the symbolic links comprising the Debian alternatives system.    This is the alphabetical of the output from running ls -l on the /etc directory structure created by cl-support.</description>
    </item>
    
    <item>
      <title>Monitoring Interfaces and Transceivers Using ethtool</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</guid>
      <description>The ethtool command enables you to query or control the network driver and hardware settings. It takes the device name (like swp1) as an argument. When the device name is the only argument to ethtool, it prints the current settings of the network device. See man ethtool(8) for details. Not all options are currently supported on switch port interfaces.
Monitoring Interface Status Using ethtool To check the status of an interface using ethtool:</description>
    </item>
    
    <item>
      <title>Monitoring Interfaces and Transceivers Using ethtool</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</guid>
      <description>The ethtool command enables you to query or control the network driver and hardware settings. It takes the device name (like swp1) as an argument. When the device name is the only argument to ethtool, it prints the current settings of the network device. See man ethtool(8) for details. Not all options are currently supported on switch port interfaces.
Monitoring Interface Status Using ethtool To check the status of an interface using ethtool:</description>
    </item>
    
    <item>
      <title>Network Switch Port LED and Status LED Guidelines</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Monitoring_System_Hardware/Network_Switch_Port_LED_and_Status_LED_Guidelines/</guid>
      <description>Data centers today have a large number of network switches manufactured by different hardware vendors running NOSes (network operating system) from different providers. This chapter provides a set of guidelines for how network port and status LEDs should appear on the front panel of a network switch. This provides a network operator with a standard way to identify the state of a switch and its ports by looking at its front panel, irrespective of the hardware vendor or NOS.</description>
    </item>
    
    <item>
      <title>Monitoring Interfaces and Transceivers Using ethtool</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</guid>
      <description>The ethtool command enables you to query or control the network driver and hardware settings. It takes the device name (like swp1) as an argument. When the device name is the only argument to ethtool, it prints the current settings of the network device. See man ethtool(8) for details. Not all options are currently supported on switch port interfaces.
Monitor Interface Status Using ethtool To check the status of an interface using ethtool:</description>
    </item>
    
    <item>
      <title>Monitoring Interfaces and Transceivers Using ethtool â€”Â ethtool Counter Definitions</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool_-ethtool_Counter_Definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool_-ethtool_Counter_Definitions/</guid>
      <description>The ethtool command enables you to query or control the network driver and hardware settings. It takes the device name (like swp1) as an argument. When the device name is the only argument to ethtool, it prints the current settings of the network device. See man ethtool(8) for details. Not all options are currently supported on switch port interfaces.
Monitor Interface Status Using ethtool To check the status of an interface using ethtool:</description>
    </item>
    
    <item>
      <title>Troubleshooting Log Files</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_Log_Files/</guid>
      <description>The only real unique entity for logging on Cumulus Linux compared to any other Linux distribution is switchd.log, which logs the HAL (hardware abstraction layer) from hardware like the Broadcom or Mellanox ASIC.
This guide on NixCraft is amazing for understanding how /var/log works. The green highlighted rows below are the most important logs and usually looked at first when debugging.
    Log
 Description
 Why is this important?</description>
    </item>
    
    <item>
      <title>Using NCLU to Troubleshoot Your Network Configuration</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</guid>
      <description>The network command line utility (NCLU) can quickly return a lot of information about your network configuration.
Using net show Commands Running net show and pressing TAB displays all available command line arguments usable by net. The output looks like this:
 cumulus@switch:~$ net show bgp : Border Gateway Protocol bridge : A layer2 bridge clag : Multi-Chassis Link Aggregation commit : apply the commit buffer to the system configuration : Settings, configuration state, etc counters : show netstat counters hostname : System hostname igmp : Internet Group Management Protocol interface : An interface such as swp1, swp2, etc ip : Internet Protocol version 4 ipv6 : Internet Protocol version 6 lldp : Link Layer Discovery Protocol lnv : Lightweight Network Virtualization mroute : Configure static unicast route into MRIB for multicast RPF lookup msdp : Multicast Source Discovery Protocol ospf : Open Shortest Path First (OSPFv2) ospf6 : Open Shortest Path First (OSPFv3) pim : Protocol Independent Multicast rollback : revert to a previous configuration state route : Static routes route-map : Route-map system : System information version : Version number  Showing Interfaces To show all available interfaces that are physically UP, run net show interface:</description>
    </item>
    
    <item>
      <title>Using NCLU to Troubleshoot Your Network Configuration</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</guid>
      <description>The network command line utility (NCLU) can quickly return a lot of information about your network configuration.
Using net show Commands Running net show and pressing TAB displays all available command line arguments usable by net. The output looks like this:
 cumulus@switch:~$ net show bgp : Border Gateway Protocol bridge : A layer2 bridge clag : Multi-Chassis Link Aggregation commit : apply the commit buffer to the system configuration : Settings, configuration state, etc counters : show netstat counters hostname : System hostname igmp : Internet Group Management Protocol interface : An interface such as swp1, swp2, etc ip : Internet Protocol version 4 ipv6 : Internet Protocol version 6 lldp : Link Layer Discovery Protocol lnv : Lightweight Network Virtualization mroute : Configure static unicast route into MRIB for multicast RPF lookup msdp : Multicast Source Discovery Protocol ospf : Open Shortest Path First (OSPFv2) ospf6 : Open Shortest Path First (OSPFv3) pim : Protocol Independent Multicast rollback : revert to a previous configuration state route : Static routes route-map : Route-map system : System information version : Version number  Showing Interfaces To show all available interfaces that are physically UP, run net show interface:</description>
    </item>
    
    <item>
      <title>Monitoring System Statistics and Network Traffic with sFlow</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</guid>
      <description>sFlow is a monitoring protocol that samples network packets, application operations, and system counters. sFlow collects both interface counters and sampled 5-tuple packet information, enabling you to monitor your network traffic as well as your switch state and performance metrics. An outside server, known as an sFlow collector, is required to collect and analyze this data.
hsflowd is the daemon that samples and sends sFlow data to configured collectors. hsflowd is not included in the base Cumulus Linux installation.</description>
    </item>
    
    <item>
      <title>Monitoring System Statistics and Network Traffic with sFlow</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</guid>
      <description>sFlow is a monitoring protocol that samples network packets, application operations, and system counters. sFlow collects both interface counters and sampled 5-tuple packet information, enabling you to monitor your network traffic as well as your switch state and performance metrics. An outside server, known as an sFlow collector, is required to collect and analyze this data.
hsflowd is the daemon that samples and sends sFlow data to configured collectors. hsflowd is not included in the base Cumulus Linux installation.</description>
    </item>
    
    <item>
      <title>Troubleshooting the etc Directory</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Understanding_the_cl-support_Output_File/Troubleshooting_the_etc_Directory/</guid>
      <description>The cl-support script replicates the /etc directory.
Files that cl-support deliberately excludes are:
   File Description     /etc/nologin nologinprevents unprivileged users from logging into the system.   /etc/alternatives update-alternatives creates, removes, maintains and displays information about the symbolic links comprising the Debian alternatives system.    This is the alphabetical of the output from running ls -l on the /etc directory structure created by cl-support.</description>
    </item>
    
    <item>
      <title>Using NCLU to Troubleshoot Your Network Configuration</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</guid>
      <description>The network command line utility (NCLU) can quickly return a lot of information about your network configuration.
net show Commands Running net show and pressing TAB displays all available command line arguments usable by net. The output looks like this:
 cumulus@switch:~$ net show bgp : Border Gateway Protocol bridge : A layer2 bridge clag : Multi-Chassis Link Aggregation commit : apply the commit buffer to the system configuration : Settings, configuration state, etc counters : show netstat counters hostname : System hostname igmp : Internet Group Management Protocol interface : An interface such as swp1, swp2, etc ip : Internet Protocol version 4 ipv6 : Internet Protocol version 6 lldp : Link Layer Discovery Protocol lnv : Lightweight Network Virtualization mroute : Configure static unicast route into MRIB for multicast RPF lookup msdp : Multicast Source Discovery Protocol ospf : Open Shortest Path First (OSPFv2) ospf6 : Open Shortest Path First (OSPFv3) pim : Protocol Independent Multicast rollback : revert to a previous configuration state route : Static routes route-map : Route-map system : System information version : Version number  Show Interfaces To show all available interfaces that are physically UP, run net show interface:</description>
    </item>
    
    <item>
      <title>Monitoring System Statistics and Network Traffic with sFlow</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</guid>
      <description>sFlow is a monitoring protocol that samples network packets, application operations, and system counters. sFlow collects both interface counters and sampled 5-tuple packet information, enabling you to monitor your network traffic as well as your switch state and performance metrics. An outside server, known as an sFlow collector, is required to collect and analyze this data.
hsflowd is the daemon that samples and sends sFlow data to configured collectors. By default, hsflowd is disabled and does not start automatically when the switch boots up.</description>
    </item>
    
    <item>
      <title>Monitoring Interfaces and Transceivers Using ethtool</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Troubleshooting_Network_Interfaces/Monitoring_Interfaces_and_Transceivers_Using_ethtool/</guid>
      <description>The ethtool command enables you to query or control the network driver and hardware settings. It takes the device name (like swp1) as an argument. When the device name is the only argument to ethtool, it prints the current settings of the network device. See man ethtool(8) for details. Not all options are currently supported on switch port interfaces.
Monitoring Interface Status Using ethtool To check the status of an interface using ethtool:</description>
    </item>
    
    <item>
      <title>Using Nutanix Prism as a Monitoring Tool</title>
      <link>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_35/Monitoring_and_Troubleshooting/SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</guid>
      <description>Nutanix Prism is a graphical user interface (GUI) for managing infrastructure and virtual environments. In order to use it, you need to take special steps within Cumulus Linux before you can configure Prism.
Configuring Cumulus Linux  SSH to the Cumulus Linux switch that needs to be configured, replacing [switch] below as appropriate:
 cumulus@switch:~$ ssh cumulus@[switch]  Confirm the switch is running Cumulus Linux 2.5.5 or newer:
 cumulus@switch:~$ net show system Penguin Arctica 4806XP Cumulus Version 3.</description>
    </item>
    
    <item>
      <title>Using Nutanix Prism as a Monitoring Tool</title>
      <link>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version2/cumulus-linux-35/Monitoring_and_Troubleshooting/SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</guid>
      <description>Nutanix Prism is a graphical user interface (GUI) for managing infrastructure and virtual environments. In order to use it, you need to take special steps within Cumulus Linux before you can configure Prism.
Configuring Cumulus Linux  SSH to the Cumulus Linux switch that needs to be configured, replacing [switch] below as appropriate:
 cumulus@switch:~$ ssh cumulus@[switch]  Confirm the switch is running Cumulus Linux 2.5.5 or newer:
 cumulus@switch:~$ net show system Penguin Arctica 4806XP Cumulus Version 3.</description>
    </item>
    
    <item>
      <title>Using Nutanix Prism as a Monitoring Tool</title>
      <link>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Simple_Network_Management_Protocol_SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/Cumulus_Linux/Monitoring_and_Troubleshooting/Simple_Network_Management_Protocol_SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</guid>
      <description>Nutanix Prism is a graphical user interface (GUI) for managing infrastructure and virtual environments. In order to use it, you need to take special steps within Cumulus Linux before you can configure Prism.
Configure Cumulus Linux  SSH to the Cumulus Linux switch that needs to be configured, replacing [switch] below as appropriate:
 cumulus@switch:~$ ssh cumulus@[switch]  Confirm the switch is running Cumulus Linux 2.5.5 or newer:
 cumulus@switch:~$ net show system Hostname.</description>
    </item>
    
    <item>
      <title>Using NCLU to Troubleshoot Your Network Configuration</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Network_Troubleshooting/Using_NCLU_to_Troubleshoot_Your_Network_Configuration/</guid>
      <description>The network command line utility (NCLU) can quickly return a lot of information about your network configuration.
Using net show Commands Running net show and pressing TAB displays all available command line arguments usable by net. The output looks like this:
 cumulus@switch:~$ net show bgp : Border Gateway Protocol bridge : A layer2 bridge clag : Multi-Chassis Link Aggregation commit : apply the commit buffer to the system configuration : Settings, configuration state, etc counters : show netstat counters hostname : System hostname igmp : Internet Group Management Protocol interface : An interface such as swp1, swp2, etc ip : Internet Protocol version 4 ipv6 : Internet Protocol version 6 lldp : Link Layer Discovery Protocol lnv : Lightweight Network Virtualization mroute : Configure static unicast route into MRIB for multicast RPF lookup msdp : Multicast Source Discovery Protocol ospf : Open Shortest Path First (OSPFv2) ospf6 : Open Shortest Path First (OSPFv3) pim : Protocol Independent Multicast rollback : revert to a previous configuration state route : Static routes route-map : Route-map system : System information version : Version number  Showing Interfaces To show all available interfaces that are physically UP, run net show interface:</description>
    </item>
    
    <item>
      <title>Monitoring System Statistics and Network Traffic with sFlow</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Network_Troubleshooting/Monitoring_System_Statistics_and_Network_Traffic_with_sFlow/</guid>
      <description>sFlow is a monitoring protocol that samples network packets, application operations, and system counters. sFlow collects both interface counters and sampled 5-tuple packet information, enabling you to monitor your network traffic as well as your switch state and performance metrics. An outside server, known as an sFlow collector, is required to collect and analyze this data.
hsflowd is the daemon that samples and sends sFlow data to configured collectors. hsflowd is not included in the base Cumulus Linux installation.</description>
    </item>
    
    <item>
      <title>Using Nutanix Prism as a Monitoring Tool</title>
      <link>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Simple_Network_Management_Protocol_SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/version/Cumulus_Linux_36/Monitoring_and_Troubleshooting/Simple_Network_Management_Protocol_SNMP_Monitoring/Using_Nutanix_Prism_as_a_Monitoring_Tool/</guid>
      <description>Nutanix Prism is a graphical user interface (GUI) for managing infrastructure and virtual environments. In order to use it, you need to take special steps within Cumulus Linux before you can configure Prism.
Configuring Cumulus Linux  SSH to the Cumulus Linux switch that needs to be configured, replacing [switch] below as appropriate:
 cumulus@switch:~$ ssh cumulus@[switch]  Confirm the switch is running Cumulus Linux 2.5.5 or newer:
 cumulus@switch:~$ net show system Penguin Arctica 4806XP Cumulus Version 3.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/search-index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/search-index/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>