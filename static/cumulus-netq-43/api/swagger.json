{
  "swagger": "2.0",
  "info": {
    "description": "This API is used to gain access to data collected by the Cumulus NetQ Platform and Agents for integration with third-party analytics software.",
    "version": "0.1",
    "title": "Cumulus NetQ 2.0.0 API",
    "termsOfService": "https://nvidia.com/legal/"
  },
  "host": "35.160.167.233:32708",
  "basePath": "/netq/telemetry/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/object/address": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get all addresses for all network devices",
        "description": "Retrieves all IPv4, IPv6 and MAC addresses deployed on switches and hosts in your network running NetQ Agents.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/address/hostname/{hostname}": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get all addresses for a given network device",
        "description": "Retrieves IPv4, IPv6, and MAC addresses of a network device (switch or host) specified by its hostname.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/bgp": {
      "get": {
        "tags": [
          "bgp"
        ],
        "summary": "Get all BGP session information for all network devices",
        "description": "For every Border Gateway Protocol (BGP) session running on the network, retrieves local node hostname, remote peer hostname, interface, router ID, and ASN, timestamp, VRF, connection state, IP and EVPN prefixes, and so forth. Refer to the BGPSession model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BgpSession"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/bgp/hostname/{hostname}": {
      "get": {
        "tags": [
          "bgp"
        ],
        "summary": "Get all BGP session information for a given network device",
        "description": "For every BGP session running on the network device, retrieves local node hostname, remote peer hostname, interface, router ID, and ASN, timestamp, VRF, connection state, IP and EVPN prefixes, and so forth. Refer to the BGPSession model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BgpSession"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/clag": {
      "get": {
        "tags": [
          "clag"
        ],
        "summary": "Get all CLAG session information for all network devices",
        "description": "For every Cumulus multiple Link Aggregation (CLAG) session running on the network, retrieves local node hostname, CLAG sysmac, remote peer role, state, and interface, backup IP address, bond status, and so forth. Refer to the ClagSessionInfo model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClagSessionInfo"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/clag/hostname/{hostname}": {
      "get": {
        "tags": [
          "clag"
        ],
        "summary": "Get all CLAG session information for a given network device",
        "description": "For every CLAG session running on the network device, retrieves local node hostname, CLAG sysmac, remote peer role, state, and interface, backup IP address, bond status, and so forth. Refer to the ClagSessionInfo model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClagSessionInfo"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get all events from across the entire network",
        "description": "Retrieves all alarm (critical severity) and informational (warning, info and debug severity) events from all network devices and services.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gt_timestamp",
            "in": "query",
            "description": "Used in combination with lt_timestamp, sets the lower limit of the timerange to display. Uses Epoch format. Cannot be used with eq_timestamp. For example, to display events between Monday February 11, 2019 at 1:00am and Tuesday February 12, 2019 at 1:00am, lt_timestamp would be entered as 1549864800 and gt_timestamp would be entered as 1549951200.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "lt_timestamp",
            "in": "query",
            "description": "Used in combination with gt_timestamp, sets the upper limit of the timerange to display. Uses Epoch format. Cannot be used with eq_timestamp. For example, to display events between Monday February 11, 2019 at 1:00am and Tuesday February 12, 2019 at 1:00am, lt_timestamp would be entered as 1549864800 and gt_timestamp would be entered as 1549951200.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interface"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/events/alarms": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Return alarms based on the condition",
        "description": "",
        "operationId": "getL1L2Alarms",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "details",
            "in": "query",
            "description": "details",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "description": "time",
            "required": true,
            "type": "integer"
          },
          {
            "name": "duration",
            "in": "query",
            "description": "duration",
            "required": true,
            "type": "integer"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "bucket",
            "required": true,
            "type": "integer"
          },
          {
            "name": "category",
            "in": "query",
            "description": "category",
            "required": false,
            "type": "string"
          },
          {
            "name": "message_type",
            "in": "query",
            "description": "message_type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/events/alarms/hostname/{hostname}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Return alarms based on the condition",
        "description": "",
        "operationId": "getL1L2HostnameAlarms",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "details",
            "in": "query",
            "description": "details",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "description": "time",
            "required": true,
            "type": "integer"
          },
          {
            "name": "duration",
            "in": "query",
            "description": "duration",
            "required": true,
            "type": "integer"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "bucket",
            "required": true,
            "type": "integer"
          },
          {
            "name": "category",
            "in": "query",
            "description": "category",
            "required": false,
            "type": "string"
          },
          {
            "name": "msg_type",
            "in": "query",
            "description": "message_type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/events/info": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Info Message handling",
        "description": "",
        "operationId": "getL1L2Info",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "details",
            "in": "query",
            "description": "details",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "description": "time",
            "required": true,
            "type": "integer"
          },
          {
            "name": "duration",
            "in": "query",
            "description": "duration",
            "required": true,
            "type": "integer"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "bucket",
            "required": true,
            "type": "integer"
          },
          {
            "name": "message_type",
            "in": "query",
            "description": "message_type",
            "required": false,
            "type": "string"
          },
          {
            "name": "config_changes",
            "in": "query",
            "description": "config_changes",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/events/info/hostname/{hostname}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Info Message handling",
        "description": "",
        "operationId": "getL1L2HostInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "details",
            "in": "query",
            "description": "details",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "description": "time",
            "required": true,
            "type": "integer"
          },
          {
            "name": "duration",
            "in": "query",
            "description": "duration",
            "required": true,
            "type": "integer"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "bucket",
            "required": true,
            "type": "integer"
          },
          {
            "name": "message_type",
            "in": "query",
            "description": "message_type",
            "required": false,
            "type": "string"
          },
          {
            "name": "config_changes",
            "in": "query",
            "description": "config_changes",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/evpn": {
      "get": {
        "tags": [
          "evpn"
        ],
        "summary": "Get all EVPN session information from across the entire network",
        "description": "For every Ethernet Virtual Private Network (EVPN) session running on the network, retrieves hostname, VNI status, origin IP address, timestamp, export and import routes, and so forth. Refer to the Evpn model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evpn"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/evpn/hostname/{hostname}": {
      "get": {
        "tags": [
          "evpn"
        ],
        "summary": "Get all EVPN session information from a given network device",
        "description": "For every EVPN session running on the network device, retrieves hostname, VNI status, origin IP address, timestamp, export and import routes, and so forth. Refer to the Evpn model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evpn"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/interface": {
      "get": {
        "tags": [
          "interface"
        ],
        "summary": "Get software interface information for all network devices",
        "description": "Retrieves information about all software interfaces, including type and name of the interfaces, the hostnames of the device where they reside, state, VRF, and so forth. Refer to the Interface model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interface"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/interface/hostname/{hostname}": {
      "get": {
        "tags": [
          "interface"
        ],
        "summary": "Get software interface information for a given network device",
        "description": "Retrieves information about all software interfaces on a network device, including type and name of the interfaces, state, VRF, and so forth. Refer to the Interface model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interface"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/inventory": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get component inventory information from all network devices",
        "description": "Retrieves the hardware and software component information, such as ASIC, platform, and OS vendor and version information, for all switches and hosts in your network. Refer to the InventoryOutput model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InventoryOutput"
            }
          },
          "400": {
            "description": "Invalid Input"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/inventory/hostname/{hostname}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get component inventory information from a given network device",
        "description": "Retrieves the hardware and software component information, such as ASIC, platform, and OS vendor and version information, for the given switchor host in your network. Refer to the InventoryOutput model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InventoryOutput"
            }
          },
          "400": {
            "description": "Invalid Input"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/lldp": {
      "get": {
        "tags": [
          "lldp"
        ],
        "summary": "Get LLDP information for all network devices",
        "description": "Retrieves Link Layer Discovery Protocol (LLDP) information, such as hostname, interface name, peer hostname, interface name, bridge, router, OS, timestamp, for all switches and hosts in the network. Refer to the LLDP model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LLDP"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/lldp/hostname/{hostname}": {
      "get": {
        "tags": [
          "lldp"
        ],
        "summary": "Get LLDP information for a given network device",
        "description": "Retrieves Link Layer Discovery Protocol (LLDP) information, such as hostname, interface name, peer hostname, interface name, bridge, router, OS, timestamp, for the given switch or host. Refer to the LLDP model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LLDP"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/macfdb": {
      "get": {
        "tags": [
          "macfdb"
        ],
        "summary": "Get all MAC FDB information for all network devices",
        "description": "Retrieves all MAC address forwarding database (MACFDB) information for all switches and hosts in the network, such as MAC address, timestamp, next hop, destination, port, and VLAN. Refer to MacFdb model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MacFdb"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/macfdb/hostname/{hostname}": {
      "get": {
        "tags": [
          "macfdb"
        ],
        "summary": "Get all MAC FDB information for a given network device",
        "description": "Retrieves all MAC address forwarding database (MACFDB) information for a given switch or host in the network, such as MAC address, timestamp, next hop, destination, port, and VLAN. Refer to MacFdb model for all data collected.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "User-specified name for a network switch or host. For example, leaf01, spine04, host-6, engr-1, tor-22.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "Display results for a given time. Time must be entered in Epoch format. For example, to display the results for Monday February 13, 2019 at 1:25 pm, use a time converter and enter 1550082300.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of entries to display starting from the offset value. For example, a count of 100 displays 100 entries at a time.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used in combination with count, offest specifies the starting location within the set of entries returned. For example, an offset of 100 would display results beginning with entry 101.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MacFdb"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/mstp": {
      "get": {
        "tags": [
          "mstp"
        ],
        "summary": "Return objects for a givn opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MstpInfo"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/mstp/hostname/{hostname}": {
      "get": {
        "tags": [
          "mstp"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MstpInfo"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/neighbor": {
      "get": {
        "tags": [
          "neighbor"
        ],
        "summary": "Return objects for a given opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "is_ipv6",
            "in": "query",
            "description": "is_ipv6",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "is_total",
            "in": "query",
            "description": "is_total",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Neighbor"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/neighbor/hostname/{hostname}": {
      "get": {
        "tags": [
          "neighbor"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "is_ipv6",
            "in": "query",
            "description": "is_ipv6",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "is_total",
            "in": "query",
            "description": "is_total",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Neighbor"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/node": {
      "get": {
        "tags": [
          "node"
        ],
        "summary": "Return objects for a givn opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NODE"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/node/hostname/{hostname}": {
      "get": {
        "tags": [
          "node"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NODE"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/ntp": {
      "get": {
        "tags": [
          "ntp"
        ],
        "summary": "Return objects for a givn opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "in_sync",
            "in": "query",
            "description": "in_sync",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NTP"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/ntp/hostname/{hostname}": {
      "get": {
        "tags": [
          "ntp"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "in_sync",
            "in": "query",
            "description": "in_sync",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NTP"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/port": {
      "get": {
        "tags": [
          "port"
        ],
        "summary": "Return objects for a givn opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "model",
            "in": "query",
            "description": "model",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "vendor",
            "in": "query",
            "description": "vendor",
            "required": false,
            "type": "string"
          },
          {
            "name": "most_active",
            "in": "query",
            "description": "most_active",
            "required": false,
            "type": "string"
          },
          {
            "name": "most_error",
            "in": "query",
            "description": "most_error",
            "required": false,
            "type": "string"
          },
          {
            "name": "most_flap",
            "in": "query",
            "description": "most_flap",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Port"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/port/hostname/{hostname}": {
      "get": {
        "tags": [
          "port"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "model",
            "in": "query",
            "description": "model",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "vendor",
            "in": "query",
            "description": "vendor",
            "required": false,
            "type": "string"
          },
          {
            "name": "most_active",
            "in": "query",
            "description": "most_active",
            "required": false,
            "type": "string"
          },
          {
            "name": "most_error",
            "in": "query",
            "description": "most_error",
            "required": false,
            "type": "string"
          },
          {
            "name": "most_flap",
            "in": "query",
            "description": "most_flap",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Port"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/route": {
      "get": {
        "tags": [
          "route"
        ],
        "summary": "Return objects for a given opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "is_ipv6",
            "in": "query",
            "description": "is_ipv6",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "is_origin",
            "in": "query",
            "description": "is_origin",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "is_total",
            "in": "query",
            "description": "is_total",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Route"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/route/hostname/{hostname}": {
      "get": {
        "tags": [
          "route"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "is_ipv6",
            "in": "query",
            "description": "is_ipv6",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "is_origin",
            "in": "query",
            "description": "is_origin",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "is_total",
            "in": "query",
            "description": "is_total",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Route"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/sensor": {
      "get": {
        "tags": [
          "sensor"
        ],
        "summary": "Return objects for a given opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sensor"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/sensor/hostname/{hostname}": {
      "get": {
        "tags": [
          "sensor"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sensor"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Return objects for a given opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "active",
            "in": "query",
            "description": "active",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string"
          },
          {
            "name": "monitored",
            "in": "query",
            "description": "monitored",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sensor"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/services/hostname/{hostname}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Return objects for a givn opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "name": "active",
            "in": "query",
            "description": "active",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string"
          },
          {
            "name": "monitored",
            "in": "query",
            "description": "monitored",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sensor"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/vlan": {
      "get": {
        "tags": [
          "vlan"
        ],
        "summary": "Return objects for a givn opid",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vlan"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
    "/object/vlan/hostname/{hostname}": {
      "get": {
        "tags": [
          "vlan"
        ],
        "summary": "Return objects for a given opid and hostname",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "hostname",
            "required": true,
            "type": "string"
          },
          {
            "name": "eq_timestamp",
            "in": "query",
            "description": "eq_timestamp",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vlan"
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "InventoryModel": {
      "type": "object",
      "required": [
        "label",
        "value"
      ],
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "ifname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "prefix": {
          "type": "string"
        },
        "mask": {
          "type": "integer",
          "format": "int32"
        },
        "is_ipv6": {
          "type": "boolean"
        },
        "vrf": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "Schema": {
      "type": "object",
      "required": [
        "aliases",
        "doc",
        "elementType",
        "enumSymbols",
        "error",
        "fields",
        "fixedSize",
        "fullName",
        "hashCode",
        "jsonProps",
        "logicalType",
        "name",
        "namespace",
        "objectProps",
        "props",
        "type",
        "types",
        "valueType"
      ],
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "RECORD",
            "ENUM",
            "ARRAY",
            "MAP",
            "UNION",
            "FIXED",
            "STRING",
            "BYTES",
            "INT",
            "LONG",
            "FLOAT",
            "DOUBLE",
            "BOOLEAN",
            "NULL"
          ]
        },
        "logicalType": {
          "$ref": "#/definitions/LogicalType"
        },
        "hashCode": {
          "type": "integer",
          "format": "int32"
        },
        "elementType": {
          "$ref": "#/definitions/Schema"
        },
        "aliases": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "namespace": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schema"
          }
        },
        "fullName": {
          "type": "string"
        },
        "enumSymbols": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "doc": {
          "type": "string"
        },
        "valueType": {
          "$ref": "#/definitions/Schema"
        },
        "fixedSize": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "error": {
          "type": "boolean"
        },
        "jsonProps": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "objectProps": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "Port": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "hostname": {
          "type": "string"
        },
        "ifname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "speed": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "autoneg": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        },
        "transreceiver": {
          "type": "string"
        },
        "connector": {
          "type": "string"
        },
        "vendor_name": {
          "type": "string"
        },
        "part_number": {
          "type": "string"
        },
        "serial_number": {
          "type": "string"
        },
        "length": {
          "type": "string"
        },
        "supported_fec": {
          "type": "string"
        },
        "advertised_fec": {
          "type": "string"
        },
        "fec": {
          "type": "string"
        },
        "message_type": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "description": "This is Port object"
    },
    "LogicalType": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "required": [
        "array",
        "bigDecimal",
        "bigInteger",
        "bigIntegerValue",
        "binary",
        "binaryValue",
        "boolean",
        "booleanValue",
        "containerNode",
        "decimalValue",
        "double",
        "doubleValue",
        "elements",
        "fieldNames",
        "fields",
        "floatingPointNumber",
        "int",
        "intValue",
        "integralNumber",
        "long",
        "longValue",
        "missingNode",
        "null",
        "number",
        "numberType",
        "numberValue",
        "object",
        "pojo",
        "textValue",
        "textual",
        "valueAsBoolean",
        "valueAsDouble",
        "valueAsInt",
        "valueAsLong",
        "valueAsText",
        "valueNode"
      ],
      "properties": {
        "elements": {
          "$ref": "#/definitions/IteratorJsonNode"
        },
        "fieldNames": {
          "$ref": "#/definitions/IteratorString"
        },
        "binary": {
          "type": "boolean"
        },
        "intValue": {
          "type": "integer",
          "format": "int32"
        },
        "object": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "numberValue": {
          "$ref": "#/definitions/Number"
        },
        "numberType": {
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "BIG_INTEGER",
            "FLOAT",
            "DOUBLE",
            "BIG_DECIMAL"
          ]
        },
        "longValue": {
          "type": "integer",
          "format": "int64"
        },
        "bigIntegerValue": {
          "type": "integer"
        },
        "doubleValue": {
          "type": "number",
          "format": "double"
        },
        "decimalValue": {
          "type": "number"
        },
        "booleanValue": {
          "type": "boolean"
        },
        "binaryValue": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        },
        "valueAsInt": {
          "type": "integer",
          "format": "int32"
        },
        "valueAsLong": {
          "type": "integer",
          "format": "int64"
        },
        "valueAsDouble": {
          "type": "number",
          "format": "double"
        },
        "valueAsBoolean": {
          "type": "boolean"
        },
        "textValue": {
          "type": "string"
        },
        "valueAsText": {
          "type": "string"
        },
        "array": {
          "type": "boolean"
        },
        "fields": {
          "$ref": "#/definitions/IteratorEntryStringJsonNode"
        },
        "null": {
          "type": "boolean"
        }
      }
    },
    "SearchResults": {
      "type": "object",
      "required": [
        "prefix",
        "results"
      ],
      "properties": {
        "prefix": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        }
      }
    },
    "StatusCode": {
      "type": "object",
      "required": [
        "failure",
        "redirection",
        "success"
      ],
      "properties": {
        "redirection": {
          "type": "boolean"
        },
        "success": {
          "type": "boolean"
        },
        "failure": {
          "type": "boolean"
        }
      }
    },
    "VXLAN": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "hostname": {
          "type": "string"
        },
        "vni": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "rdst": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        }
      },
      "description": "This is VXLAN object"
    },
    "IteratorEntryStringJsonNode": {
      "type": "object"
    },
    "InventorySuperModel": {
      "type": "object",
      "required": [
        "data",
        "label"
      ],
      "properties": {
        "label": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryModel"
          }
        }
      }
    },
    "Route": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "hostname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "vrf": {
          "type": "string"
        },
        "message_type": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        },
        "is_ipv6": {
          "type": "boolean",
          "description": "Is Ip address IPV6"
        },
        "rt_table_id": {
          "type": "integer",
          "format": "int32"
        },
        "src": {
          "type": "string"
        },
        "nexthops": {
          "type": "string"
        },
        "route_type": {
          "type": "integer",
          "format": "int32"
        },
        "origin": {
          "type": "boolean"
        },
        "protocol": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        }
      },
      "description": "This is Route object"
    },
    "InventorySampleClass": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "total"
        },
        "os_version": {
          "description": "os_version",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "os_vendor": {
          "description": "os_vendor",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "asic": {
          "description": "asic",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "asic_vendor": {
          "description": "asic_vendor",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "asic_model": {
          "description": "asic_model",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "cl_license": {
          "description": "cl_license",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "agent_version": {
          "description": "agent_version",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "agent_state": {
          "description": "agent_state",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "platform": {
          "description": "platform",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "platform_vendor": {
          "description": "platform_vendor",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "disk_size": {
          "description": "disk_size",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "memory_size": {
          "description": "memory_size",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "platform_model": {
          "description": "platform_model",
          "$ref": "#/definitions/InventorySuperModel"
        },
        "interface_speeds": {
          "description": "interface_speeds",
          "$ref": "#/definitions/InventorySuperModel"
        }
      }
    },
    "NODE": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "sys_uptime": {
          "type": "integer",
          "format": "int64"
        },
        "lastboot": {
          "type": "integer",
          "format": "int64"
        },
        "last_reinit": {
          "type": "integer",
          "format": "int64"
        },
        "active": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        },
        "ntp_state": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "last_update_time": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "ObjectKey": {
      "type": "object",
      "properties": {
        "deviceKey": {
          "description": "unique device key",
          "$ref": "#/definitions/DeviceKey"
        },
        "objectDeviceKey": {
          "type": "object",
          "description": "unique object key within a given device. This is a generic type",
          "properties": {}
        }
      },
      "description": "unique object key"
    },
    "Function1": {
      "type": "object"
    },
    "Vlan": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "ifname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "last_changed": {
          "type": "integer",
          "format": "int64"
        },
        "vlans": {
          "type": "string"
        },
        "svi": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        },
        "ports": {
          "type": "string"
        }
      }
    },
    "Evpn": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "hostname": {
          "type": "string"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "vni": {
          "type": "integer",
          "format": "int32"
        },
        "origin_ip": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "rd": {
          "type": "string"
        },
        "export_rt": {
          "type": "string"
        },
        "import_rt": {
          "type": "string"
        },
        "in_kernel": {
          "type": "boolean"
        },
        "adv_all_vni": {
          "type": "boolean"
        },
        "adv_gw_ip": {
          "type": "string"
        },
        "is_l3": {
          "type": "boolean"
        },
        "db_state": {
          "type": "string"
        }
      },
      "description": "This is evpn object"
    },
    "LLDP": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "hostname": {
          "type": "string"
        },
        "ifname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "peer_hostname": {
          "type": "string"
        },
        "peer_ifname": {
          "type": "string"
        },
        "lldp_peer_bridge": {
          "type": "boolean"
        },
        "lldp_peer_router": {
          "type": "boolean"
        },
        "lldp_peer_station": {
          "type": "boolean",
          "description": "Is lldp peer a station"
        },
        "lldp_peer_os": {
          "type": "string"
        },
        "lldp_peer_osv": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        }
      },
      "description": "This is LLDP object"
    },
    "ResourceUtil": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "hostname": {
          "type": "string"
        },
        "cpu_utilization": {
          "type": "number",
          "format": "float"
        },
        "mem_utilization": {
          "type": "number",
          "format": "float"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        }
      },
      "description": "This is ResourceUtil object"
    },
    "FILTERMANAGER": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "message_type": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "Sensor": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "s_prev_state": {
          "type": "string"
        },
        "s_name": {
          "type": "string"
        },
        "s_state": {
          "type": "string"
        },
        "s_input": {
          "type": "number",
          "format": "float"
        },
        "message_type": {
          "type": "string"
        },
        "s_msg": {
          "type": "string"
        },
        "s_desc": {
          "type": "string"
        },
        "s_max": {
          "type": "integer",
          "format": "int32"
        },
        "s_min": {
          "type": "integer",
          "format": "int32"
        },
        "s_crit": {
          "type": "integer",
          "format": "int32"
        },
        "s_lcrit": {
          "type": "integer",
          "format": "int32"
        },
        "db_state": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "description": "This is Sensor object"
    },
    "Function1RequestContextFutureRouteResult": {
      "type": "object"
    },
    "InventoryOutput": {
      "type": "object",
      "properties": {
        "data": {
          "description": "data",
          "$ref": "#/definitions/InventorySampleClass"
        }
      }
    },
    "OspfNbr": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "ifname": {
          "type": "string"
        },
        "peer_id": {
          "type": "string"
        },
        "peer_addr": {
          "type": "string"
        },
        "area": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        },
        "is_ipv6": {
          "type": "string"
        }
      }
    },
    "IndexBean": {
      "type": "object",
      "required": [
        "data",
        "entityType"
      ],
      "properties": {
        "entityType": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "NTP": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "hostname": {
          "type": "string"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "ntp_sync": {
          "type": "string"
        },
        "stratum": {
          "type": "integer",
          "format": "int32"
        },
        "ntp_app": {
          "type": "string"
        },
        "message_type": {
          "type": "string"
        },
        "current_server": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "Field": {
      "type": "object",
      "required": [
        "aliases",
        "defaultValue",
        "doc",
        "jsonProps",
        "name",
        "objectProps",
        "order",
        "props",
        "schema"
      ],
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "doc": {
          "type": "string"
        },
        "defaultValue": {
          "$ref": "#/definitions/JsonNode"
        },
        "order": {
          "type": "string",
          "enum": [
            "ASCENDING",
            "DESCENDING",
            "IGNORE"
          ]
        },
        "aliases": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "jsonProps": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "objectProps": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "ProcDevStats": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "ifname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        },
        "rx_multicast": {
          "type": "integer",
          "format": "int32"
        },
        "rx_packets": {
          "type": "integer",
          "format": "int32"
        },
        "tx_carrier": {
          "type": "integer",
          "format": "int32"
        },
        "rx_drop": {
          "type": "integer",
          "format": "int32"
        },
        "rx_bytes": {
          "type": "integer",
          "format": "int32"
        },
        "rx_errs": {
          "type": "integer",
          "format": "int32"
        },
        "tx_colls": {
          "type": "integer",
          "format": "int32"
        },
        "rx_frame": {
          "type": "integer",
          "format": "int32"
        },
        "tx_drop": {
          "type": "integer",
          "format": "int32"
        },
        "tx_bytes": {
          "type": "integer",
          "format": "int32"
        },
        "tx_errs": {
          "type": "integer",
          "format": "int32"
        },
        "tx_packets": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Number": {
      "type": "object"
    },
    "Iterator": {
      "type": "object"
    },
    "LINK": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "ifname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "ifindex": {
          "type": "integer",
          "format": "int32"
        },
        "mac_address": {
          "type": "string"
        },
        "admin_state": {
          "type": "string"
        },
        "oper_state": {
          "type": "string"
        },
        "managed": {
          "type": "boolean"
        },
        "kind": {
          "type": "string"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "master": {
          "type": "string"
        },
        "is_vlan_filtering": {
          "type": "boolean"
        },
        "vlans": {
          "type": "string"
        },
        "access_vlan": {
          "type": "integer",
          "format": "int32"
        },
        "dst_port": {
          "type": "integer",
          "format": "int32"
        },
        "localip": {
          "type": "string"
        },
        "vni": {
          "type": "integer",
          "format": "int32"
        },
        "vrf": {
          "type": "string"
        },
        "rt_table_id": {
          "type": "integer",
          "format": "int32"
        },
        "parent_if": {
          "type": "string"
        },
        "stp_state": {
          "type": "integer",
          "format": "int32"
        },
        "down_reason": {
          "type": "string"
        },
        "learning_en": {
          "type": "boolean"
        },
        "arp_suppress_en": {
          "type": "boolean"
        },
        "objid": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "RULE": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_json": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "CHANNELS": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "severity": {
          "type": "string"
        },
        "channel_info_json": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_type": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "TCSchedulerReq": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "schedid": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "create_timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "last_modified_timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "start_time": {
          "type": "integer",
          "format": "int64"
        },
        "cadence_min": {
          "type": "integer",
          "format": "int32"
        },
        "request_type": {
          "type": "integer",
          "format": "int32"
        },
        "params": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        }
      },
      "description": "This is table will contain scheduler requests"
    },
    "ConfigDiff": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "hostname": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "last_modify_time": {
          "type": "integer",
          "format": "int64"
        },
        "file_content": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        }
      },
      "description": "This is ConfigDiff object"
    },
    "MacFdb": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "mac_address": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "dst": {
          "type": "string"
        },
        "nexthop": {
          "type": "string"
        },
        "is_remote": {
          "type": "boolean"
        },
        "port": {
          "type": "string"
        },
        "vlan": {
          "type": "integer",
          "format": "int32"
        },
        "is_static": {
          "type": "boolean"
        },
        "origin": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "ClagSessionInfo": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "clag_sysmac": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        },
        "peer_role": {
          "type": "string"
        },
        "peer_state": {
          "type": "boolean"
        },
        "peer_if": {
          "type": "string"
        },
        "backup_ip_active": {
          "type": "boolean"
        },
        "backup_ip": {
          "type": "string"
        },
        "single_bonds": {
          "type": "string"
        },
        "dual_bonds": {
          "type": "string"
        },
        "conflicted_bonds": {
          "type": "string"
        },
        "proto_down_bonds": {
          "type": "string"
        },
        "vxlan_anycast": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "OspfIf": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "ifname": {
          "type": "string"
        },
        "area": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        },
        "is_unnumbered": {
          "type": "boolean"
        },
        "if_up": {
          "type": "boolean"
        },
        "network_type": {
          "type": "string"
        },
        "nbr_count": {
          "type": "integer",
          "format": "int32"
        },
        "nbr_adj_count": {
          "type": "integer",
          "format": "int32"
        },
        "cost": {
          "type": "integer",
          "format": "int32"
        },
        "is_passive": {
          "type": "boolean"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "dead_time": {
          "type": "integer",
          "format": "int32"
        },
        "rexmit_time": {
          "type": "integer",
          "format": "int32"
        },
        "hello_time": {
          "type": "integer",
          "format": "int32"
        },
        "router_id": {
          "type": "string"
        }
      }
    },
    "FILTER": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "filter_name": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "rules": {
          "type": "string"
        },
        "channels": {
          "type": "string"
        },
        "terminate_on_match": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        }
      }
    },
    "Neighbor": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique on-premise identifier"
        },
        "hostname": {
          "type": "string"
        },
        "ifname": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "vrf": {
          "type": "string"
        },
        "is_remote": {
          "type": "boolean"
        },
        "ifindex": {
          "type": "integer",
          "format": "int32"
        },
        "mac_address": {
          "type": "string"
        },
        "is_ipv6": {
          "type": "boolean",
          "description": "Is Ip address IPV6"
        },
        "message_type": {
          "type": "string"
        },
        "ip_address": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        }
      },
      "description": "This is Neighbor object"
    },
    "SearchResult": {
      "type": "object",
      "required": [
        "entityType",
        "hits"
      ],
      "properties": {
        "entityType": {
          "type": "string"
        },
        "hits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexBean"
          }
        }
      }
    },
    "LnvSession": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "hostname": {
          "type": "string"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "role": {
          "type": "string"
        },
        "snd_ip": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "repl_mode": {
          "type": "string"
        },
        "rd_peers": {
          "type": "string"
        },
        "snd_peers": {
          "type": "string"
        },
        "vnis": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "src_ip": {
          "type": "string"
        },
        "db_state": {
          "type": "string"
        }
      },
      "description": "This is LnvSession object"
    },
    "BgpSession": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "peer_name": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "peer_router_id": {
          "type": "string"
        },
        "peer_asn": {
          "type": "integer",
          "format": "int64"
        },
        "peer_hostname": {
          "type": "string"
        },
        "asn": {
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "type": "string"
        },
        "ipv4_pfx_rcvd": {
          "type": "integer",
          "format": "int32"
        },
        "ipv6_pfx_rcvd": {
          "type": "integer",
          "format": "int32"
        },
        "evpn_pfx_rcvd": {
          "type": "integer",
          "format": "int32"
        },
        "last_reset_time": {
          "type": "number",
          "format": "float"
        },
        "up_time": {
          "type": "number",
          "format": "float"
        },
        "conn_estd": {
          "type": "integer",
          "format": "int32"
        },
        "conn_dropped": {
          "type": "integer",
          "format": "int32"
        },
        "upd8_rx": {
          "type": "integer",
          "format": "int32"
        },
        "upd8_tx": {
          "type": "integer",
          "format": "int32"
        },
        "vrfid": {
          "type": "integer",
          "format": "int32"
        },
        "vrf": {
          "type": "string"
        },
        "tx_families": {
          "type": "string"
        },
        "rx_families": {
          "type": "string"
        },
        "objid": {
          "type": "string"
        }
      }
    },
    "MstpInfo": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "bridge_name": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "db_state": {
          "type": "string"
        },
        "state": {
          "type": "boolean"
        },
        "root_port_name": {
          "type": "string"
        },
        "root_bridge": {
          "type": "string"
        },
        "topo_chg_ports": {
          "type": "string"
        },
        "time_since_tcn": {
          "type": "integer",
          "format": "int64"
        },
        "topo_chg_cntr": {
          "type": "integer",
          "format": "int64"
        },
        "bridge_id": {
          "type": "string"
        },
        "edge_ports": {
          "type": "string"
        },
        "network_ports": {
          "type": "string"
        },
        "disputed_ports": {
          "type": "string"
        },
        "bpduguard_ports": {
          "type": "string"
        },
        "bpduguard_err_ports": {
          "type": "string"
        },
        "ba_inconsistent_ports": {
          "type": "string"
        },
        "bpdufilter_ports": {
          "type": "string"
        },
        "ports": {
          "type": "string"
        },
        "is_vlan_filtering": {
          "type": "boolean"
        }
      }
    },
    "IteratorJsonNode": {
      "type": "object"
    },
    "DeviceKey": {
      "type": "object",
      "properties": {
        "opid": {
          "type": "integer",
          "format": "int32",
          "description": "unique on-premise identifier"
        },
        "hostname": {
          "type": "string",
          "description": "hostname of a device"
        }
      },
      "description": "unique device key"
    },
    "IteratorString": {
      "type": "object"
    },
    "Interface": {
      "type": "object",
      "required": [
        "schema"
      ],
      "properties": {
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "opid": {
          "type": "integer",
          "format": "int32"
        },
        "hostname": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "last_changed": {
          "type": "integer",
          "format": "int64"
        },
        "ifname": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "vrf": {
          "type": "string"
        },
        "details": {
          "type": "string"
        }
      }
    }
  }
}
